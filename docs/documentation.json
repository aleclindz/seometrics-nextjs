{
  "overview": "# Project Overview for seoagent-nextjs\n\n## What This Application Does\nThe **seoagent-nextjs** application is designed to help users optimize their online content for search engines, making it easier for potential customers to find them. Whether you're a small business owner, a content creator, or a digital marketer, this tool provides you with the insights and resources you need to improve your website's visibility. By analyzing your content and suggesting enhancements, it empowers you to reach a wider audience and drive more traffic to your site. What sets this application apart is its user-friendly interface and intelligent recommendations, making SEO accessible even for those who may not have a technical background.\n\n## How It Works (Simple Explanation)\nWhen you use the seoagent-nextjs application, you simply input your website information and the content you want to optimize. The application then analyzes this data, providing you with actionable insights and suggestions to improve your SEO strategy. The user experience is seamless; you can easily navigate through the interface to see your content's performance metrics and receive tailored recommendations. Information flows through the system as you interact with the application, allowing it to learn and adapt to your specific needs, ensuring that you get the most relevant advice for your content.\n\n## Key Features & Capabilities\n- **SEO Analysis**: Get detailed reports on how well your content is optimized for search engines.\n- **Content Recommendations**: Receive personalized suggestions to enhance your website's visibility.\n- **User-Friendly Interface**: Navigate effortlessly through the application with a clean and intuitive design.\n- **Performance Tracking**: Monitor your content's performance over time to see the impact of your SEO efforts.\n- **Data Handling**: Manage various types of content, including articles, blog posts, and product descriptions, all aimed at improving search engine rankings.\n\n## Technology Overview (Friendly)\nThe seoagent-nextjs application is powered by modern web technologies such as React and Next.js, which ensure a fast and responsive user experience. These frameworks were chosen for their ability to create dynamic and interactive web applications that are easy to use. Additionally, Express is utilized for the backend, allowing for efficient data handling and processing. Together, these technologies work harmoniously to provide users with a robust platform that not only looks great but also delivers valuable insights to enhance their online presence. By leveraging these tools, we ensure that users can focus on what matters most: creating great content and connecting with their audience.",
  "gettingStarted": "# Getting Started with seoagent-nextjs\n\n## Welcome to seoagent-nextjs\nWelcome to **seoagent-nextjs**, a powerful web application designed to help users manage their SEO strategies effectively. Built using React, Next.js, and Express, this application provides a user-friendly dashboard for tracking and optimizing your website's performance. Whether you're a digital marketer, a small business owner, or an SEO enthusiast, this tool is tailored to enhance your online presence and streamline your SEO efforts.\n\n## 🚀 Quick Start (5 Minutes)\n\n### 1. Create Your Account\nTo get started, you'll need to create an account:\n1. Visit the application at [your-app-url].\n2. Click on **Sign Up**.\n3. Enter your email address and a secure password.\n4. If required, verify your account through the email confirmation link sent to your inbox.\n\n### 2. First Login\nOnce your account is set up, log in to access your dashboard:\n1. Sign in using your registered email and password.\n2. Complete any onboarding steps that may guide you through the application features.\n\n### 3. Navigate to Dashboard\nAfter logging in, you'll be directed to your main dashboard:\n1. Familiarize yourself with the layout and available options.\n2. Explore the various sections such as **Website Management**, **Usage Dashboard**, and **Subscription Manager**.\n3. Take note of the features available to you, including analytics and SEO tools.\n\n### 4. Start Using Key Features\nTo get the most out of your new application, consider taking these initial actions:\n- **Website Management**: Use the **Website Management** component to add and manage your websites. This is essential for tracking your SEO performance.\n- **Usage Dashboard**: Check your **Usage Dashboard** to view key metrics and insights about your website's SEO performance.\n- **Subscription Manager**: If you're interested in premium features, navigate to the **Subscription Manager** to explore your subscription options.\n\n## 📋 Detailed Setup Guide\n\n### System Requirements\n- Node.js (version 14.x or later)\n- npm (Node Package Manager)\n- A modern web browser (Chrome, Firefox, Safari, or Edge)\n\n### Browser Compatibility\nThe application is designed to work seamlessly with the latest versions of major browsers. For the best experience, ensure your browser is up-to-date.\n\n### Initial Configuration Steps\n1. **Clone the Repository**: If you're working with the codebase, clone the repository using:\n   ```bash\n   git clone https://github.com/your-repo/seoagent-nextjs.git\n   ```\n2. **Install Dependencies**: Navigate to the project directory and install the required dependencies:\n   ```bash\n   cd seoagent-nextjs\n   npm install\n   ```\n3. **Environment Variables**: Create a `.env` file in the root directory and add the necessary environment variables for your application, such as API keys and database URLs. Refer to the `.env.example` file for guidance.\n\n4. **Run the Application**: Start the development server with:\n   ```bash\n   npm run dev\n   ```\n   Your application should now be running at `http://localhost:3000`.\n\n### Common Setup Issues\n- **Dependency Errors**: Ensure that all dependencies are correctly installed. If you encounter issues, try deleting the `node_modules` folder and running `npm install` again.\n- **Environment Variable Issues**: Double-check your `.env` file for any missing or incorrect values. Ensure that all required variables are set.\n\n## 🎯 Next Steps\nNow that you have your application up and running, here are some recommended next steps:\n- **Explore the Documentation**: Familiarize yourself with the detailed documentation to understand all features and functionalities.\n- **Integrate with Supabase**: If you plan to use Supabase for authentication and database management, check out the integration guide in the documentation.\n- **Utilize the OpenAI API**: Explore how to leverage the OpenAI API for advanced SEO insights and recommendations.\n\nWe hope you enjoy using **seoagent-nextjs**! If you have any questions or need assistance, feel free to reach out to our support team or consult the community forums. Happy optimizing!",
  "userGuide": "# seoagent-nextjs User Guide\n\n## Overview\nThe **seoagent-nextjs** application is a powerful tool designed to assist users in optimizing their websites for search engines. Built using React, Next.js, and Express, this application provides a user-friendly interface for managing SEO strategies, analyzing keywords, and enhancing overall website performance. Users can navigate through various features to improve their site's visibility and effectiveness in search engine results.\n\n---\n\n## 📄 Upgrade Badge\n\n### What You See\nWhen you visit the Upgrade Badge page, you will see a clean interface that may display information related to upgrade options available for your account or features. This page is designed to inform users about potential upgrades without any interactive elements.\n\n### What You Can Do\n- View information regarding available upgrades.\n\n**Related API**: [`/api/upgrade-badge`](api-reference.md#upgrade-badge)\n\n---\n\n## 📄 Protected Route\n\n### What You See\nThe Protected Route page serves as a secure area that may display a message indicating that access is restricted. Users will not see any interactive elements here, as this page is primarily for authentication purposes.\n\n### What You Can Do\n- View information about access restrictions.\n\n**Related API**: [`/api/protected-route`](api-reference.md#protected-route)\n\n---\n\n## 📄 Feature Gate\n\n### What You See\nOn the Feature Gate page, users will encounter a straightforward layout that outlines the features available based on their subscription or access level. This page may include descriptions of features that are gated.\n\n### What You Can Do\n- View information regarding feature availability based on your account type.\n\n**Related API**: [`/api/feature-gate`](api-reference.md#feature-gate)\n\n---\n\n## 📄 App\n\n### What You See\nThe App page serves as the landing page for the application. Users will see an overview of the main features and functionalities available to them, presented in an organized manner.\n\n### What You Can Do\n- Navigate to different sections of the application.\n\n**Related API**: [`/api/app`](api-reference.md#app)\n\n---\n\n## 📄 Layout\n\n### What You See\nThe Layout page provides a consistent structure for the application, including headers, footers, and navigation menus. Users will see the overall design and framework of the application.\n\n### What You Can Do\n- View the layout and structure of the application.\n\n**Related API**: [`/api/layout`](api-reference.md#layout)\n\n---\n\n## 📄 Terms\n\n### What You See\nThe Terms page displays the terms and conditions governing the use of the application. Users will see legal language outlining their rights and responsibilities.\n\n### What You Can Do\n- Read the terms and conditions.\n\n**Related API**: [`/api/terms`](api-reference.md#terms)\n\n---\n\n## 📄 Strategy\n\n### What You See\nThe Strategy page outlines various SEO strategies that users can implement. It may include tips, best practices, and guidelines for optimizing their websites.\n\n### What You Can Do\n- View and learn about different SEO strategies.\n\n**Related API**: [`/api/strategy`](api-reference.md#strategy)\n\n---\n\n## 📄 Privacy\n\n### What You See\nThe Privacy page informs users about how their data is collected, used, and protected. It includes privacy policies and user rights regarding their personal information.\n\n### What You Can Do\n- Read the privacy policy.\n\n**Related API**: [`/api/privacy`](api-reference.md#privacy)\n\n---\n\n## 📄 Login\n\n### What You See\nThe Login page presents a form where users can enter their credentials to access their accounts. It typically includes fields for username and password, along with a login button.\n\n### What You Can Do\n- Enter your username and password to log in.\n- Click the login button to access your account.\n\n**Related API**: [`/api/login`](api-reference.md#login)\n\n---\n\n## 📄 Keywords\n\n### What You See\nThe Keywords page displays a list of keywords relevant to your website's SEO strategy. Users will see keyword suggestions, their search volumes, and other related metrics.\n\n### What You Can Do\n- View and analyze keywords.\n\n**Related API**: [`/api/keywords`](api-reference.md#keywords)\n\n---\n\n## 📄 Debug Seo\n\n### What You See\nThe Debug Seo page provides tools and insights for troubleshooting SEO issues on your website. Users will see diagnostic information and suggestions for improvements.\n\n### What You Can Do\n- Analyze SEO performance and identify issues.\n\n### Navigation Options\nFrom this page, you can navigate to:\n- [App](#app)\n\n**Related API**: [`/api/debug-seo`](api-reference.md#debug-seo)\n\n---\n\n## 📄 Dashboard\n\n### What You See\nThe Dashboard page presents an overview of your website's SEO performance, including key metrics and analytics. Users will see graphs, charts, and summary statistics.\n\n### What You Can Do\n- View performance metrics and analytics.\n\n**Related API**: [`/api/dashboard`](api-reference.md#dashboard)\n\n---\n\n## 📄 Content Writer\n\n### What You See\nThe Content Writer page offers tools for creating and managing content for your website. Users will see a text editor and options for formatting and publishing content.\n\n### What You Can Do\n- Create, edit, and manage website content.\n\n### Navigation Options\nFrom this page, you can navigate to:\n- [Cms Connections](#cms-connections)\n\n**Related API**: [`/api/content-writer`](api-reference.md#content-writer)\n\n---\n\n## 📄 Cms Connections\n\n### What You See\nThe Cms Connections page allows users to manage connections to various content management systems. Users will see a list of connected systems and options to add or remove connections.\n\n### What You Can Do\n- View and manage CMS connections.\n\n**Related API**: [`/api/cms-connections`](api-reference.md#cms-connections)\n\n---\n\n## 📄 Chat\n\n### What You See\nThe Chat page provides a communication interface for users to interact with support or other users. It may include a chat window and message history.\n\n### What You Can Do\n- Send and receive messages in real-time.\n\n**Related API**: [`/api/chat`](api-reference.md#chat)\n\n---\n\n## 📄 Autopilot\n\n### What You See\nThe Autopilot page presents automated SEO tools and features that can enhance your website's performance. Users will see options to configure and manage these tools.\n\n### What You Can Do\n- Configure and manage automated SEO features.\n\n**Related API**: [`/api/autopilot`](api-reference.md#autopilot)\n\n---\n\n## 📄 Article Writer\n\n### What You See\nThe Article Writer page provides a platform for creating articles tailored for SEO. Users will see an editor with tools for formatting and optimizing content.\n\n### What You Can Do\n- Write and optimize articles for SEO.\n\n### Navigation Options\nFrom this page, you can navigate to:\n- [Cms Connections](#cms-connections)\n\n**Related API**: [`/api/article-writer`](api-reference.md#article-writer)\n\n---\n\n## 📄 Add Website\n\n### What You See\nThe Add Website page allows users to input details about a new website they wish to manage. Users will see a form to fill out relevant information.\n\n### What You Can Do\n- Enter website details and submit the form to add a new website.\n\n### Navigation Options\nFrom this page, you can navigate to:\n- [App](#app)\n\n**Related API**: [`/api/add-website`](api-reference.md#add-website)\n\n---\n\n## 📄 Account\n\n### What You See\nThe Account page displays user account information, including personal details and subscription status. Users will see options to update their information.\n\n### What You Can Do\n- View and update your account details.\n\n**Related API**: [`/api/account`](api-reference.md#account)\n\n---\n\n## 📄 [website Id]\n\n### What You See\nThe [website Id] page provides detailed information about a specific website managed by the user. Users will see metrics, performance data, and optimization suggestions.\n\n### What You Can Do\n- View detailed metrics and insights for the specified website.\n\n**Related API**: [`/api/website/[id]`](api-reference.md#website-id)\n\n---\n\n## 📄 [token]\n\n### What You See\nThe [token] page may display information related to a specific token used for authentication or API access. Users will see relevant details about the token's status and usage.\n\n### What You Can Do\n- View token information and its status.\n\n### Navigation Options\nFrom this page, you can navigate to:\n- [App](#app)\n\n**Related API**: [`/api/token/[token]`](api-reference.md#token)\n\n---\n\n## 📄 [token]\n\n### What You See\nSimilar to the previous token page, this page provides information about another token. Users will see details regarding its usage and status.\n\n### What You Can Do\n- View token information and its status.\n\n### Navigation Options\nFrom this page, you can navigate to:\n- [App](#app)\n\n**Related API**: [`/api/token/[token]`](api-reference.md#token)\n\n---\n\n## 📄 Cms Connection\n\n### What You See\nThe Cms Connection page allows users to manage connections to various content management systems. Users will see details about each connection and options to modify them.\n\n### What You Can Do\n- View and manage CMS connections.\n\n**Related API**: [`/api/cms-connection`](api-reference.md#cms-connection)\n\n---\n\nThis user guide serves as a comprehensive reference for navigating and utilizing the features of the **seoagent-nextjs** application. Each section provides clear insights into what users can expect and how they can interact with the application effectively.",
  "frontend": {
    "overview": "# Frontend Architecture Overview\n\nThis React application consists of **23 pages** with **92 components** (90 interactive).\n\n## Pages Structure\n\n- **[Upgrade Badge](#upgrade-badge)** (`/unknown`) - 1 components\n- **[Protected Route](#protected-route)** (`/unknown`) - 0 components\n- **[Feature Gate](#feature-gate)** (`/unknown`) - 2 components\n- **[App](#app)** (`/`) - 0 components\n- **[Layout](#layout)** (`/layout.tsx`) - 5 components\n- **[Terms](#terms)** (`/terms`) - 1 components\n- **[Strategy](#strategy)** (`/strategy`) - 2 components\n- **[Privacy](#privacy)** (`/privacy`) - 1 components\n- **[Login](#login)** (`/login`) - 6 components\n- **[Keywords](#keywords)** (`/keywords`) - 0 components\n- **[Debug Seo](#debug-seo)** (`/debug-seo`) - 3 components\n- **[Dashboard](#dashboard)** (`/dashboard`) - 0 components\n- **[Content Writer](#content-writer)** (`/content-writer`) - 17 components\n- **[Cms Connections](#cms-connections)** (`/cms-connections`) - 4 components\n- **[Chat](#chat)** (`/chat`) - 0 components\n- **[Autopilot](#autopilot)** (`/autopilot`) - 1 components\n- **[Article Writer](#article-writer)** (`/article-writer`) - 17 components\n- **[Add Website](#add-website)** (`/add-website`) - 10 components\n- **[Account](#account)** (`/account`) - 4 components\n- **[[website Id]](#website-id)** (`/website/[websiteId]`) - 5 components\n- **[[token]](#token)** (`/meta-tags/[token]`) - 4 components\n- **[[token]](#token)** (`/alt-tags/[token]`) - 4 components\n- **[Cms Connection](#cms-connection)** (`/website/[websiteId]/cms-connection`) - 5 components\n\n## Component Distribution\n\n- **Buttons & Actions**: 45\n- **Input Fields**: 21\n- **Navigation Links**: 19\n- **Forms & Input**: 5\n- **Navigation Components**: 2\n\n## Navigation Flow\n\nThe application uses a combination of:\n- **Direct links** for page-to-page navigation\n- **Button clicks** for actions and form submissions\n- **Programmatic navigation** using React Router or Next.js routing\n\nClick on any page below to see its components and navigation details.",
    "featuresAndFunctionality": "# Frontend Features & Functionality\n\nThis React application provides a comprehensive user interface with 23 distinct pages and interactive components.\n\n## Pages Overview\n\n### Upgrade Badge\n**Route**: `/unknown`\n\nThe Upgrade Badge page provides user interface and functionality for upgrade badge related features.\n\n**Interactive Components**: 1\n- ⚡\n\n### Protected Route\n**Route**: `/unknown`\n\nThe Protected Route page provides user interface and functionality for protected route related features.\n\n\n### Feature Gate\n**Route**: `/unknown`\n\nThe Feature Gate page provides user interface and functionality for feature gate related features.\n\n**Interactive Components**: 2\n- ⚡ Upgrade Now, ← Back to Dashboard\n\n### App\n**Route**: `/`\n\nThe App page provides user interface and functionality for app related features.\n\n\n### Layout\n**Route**: `/layout.tsx`\n\nThe Layout page provides user interface and functionality for layout related features.\n\n**Interactive Components**: 5\n- link, link, link, link, link\n\n### Terms\n**Route**: `/terms`\n\nThe Terms page provides user interface and functionality for terms related features.\n\n**Interactive Components**: 1\n- legal@seoagent.com\n\n### Strategy\n**Route**: `/strategy`\n\nThe Strategy page provides user interface and functionality for strategy related features.\n\n**Interactive Components**: 2\n- input, Join Waitlist\n\n### Privacy\n**Route**: `/privacy`\n\nThe Privacy page provides user interface and functionality for privacy related features.\n\n**Interactive Components**: 1\n- privacy@seoagent.com\n\n### Login\n**Route**: `/login`\n\nThe Login page provides user interface and functionality for login related features.\n\n**Interactive Components**: 6\n- form, input, input, button, button, LoginForm\n\n### Keywords\n**Route**: `/keywords`\n\nThe Keywords page provides user interface and functionality for keywords related features.\n\n\n### Debug Seo\n**Route**: `/debug-seo`\n\nThe Debug Seo page provides user interface and functionality for debug seo related features.\n\n**Interactive Components**: 3\n- Back to Dashboard, Run All Tests, Run\n\n### Dashboard\n**Route**: `/dashboard`\n\nThe Dashboard page provides user interface and functionality for dashboard related features.\n\n\n### Content Writer\n**Route**: `/content-writer`\n\nThe Content Writer page provides user interface and functionality for content writer related features.\n\n**Interactive Components**: 17\n- button, Set Up CMS Connection, Create New Article, form, input, select, select, input, Cancel, button, select, button, button, button, View Live Article, Edit in Strapi, button\n\n### Cms Connections\n**Route**: `/cms-connections`\n\nThe Cms Connections page provides user interface and functionality for cms connections related features.\n\n**Interactive Components**: 4\n- Connect CMS, Cancel, Try Again, Get Started\n\n### Chat\n**Route**: `/chat`\n\nThe Chat page provides user interface and functionality for chat related features.\n\n\n### Autopilot\n**Route**: `/autopilot`\n\nThe Autopilot page provides user interface and functionality for autopilot related features.\n\n**Interactive Components**: 1\n- Get Tracking Script\n\n### Article Writer\n**Route**: `/article-writer`\n\nThe Article Writer page provides user interface and functionality for article writer related features.\n\n**Interactive Components**: 17\n- button, Set Up CMS Connection, Create New Article, form, input, select, select, input, Cancel, button, select, button, button, button, View Live Article, Edit in Strapi, button\n\n### Add Website\n**Route**: `/add-website`\n\nThe Add Website page provides user interface and functionality for add website related features.\n\n**Interactive Components**: 10\n- textarea, Copy Code, Done, form, input, select, input, input, Cancel, button\n\n### Account\n**Route**: `/account`\n\nThe Account page provides user interface and functionality for account related features.\n\n**Interactive Components**: 4\n- input, input, input, Sign Out\n\n### [website Id]\n**Route**: `/website/[websiteId]`\n\nThe [website Id] page provides user interface and functionality for [website id] related features.\n\n**Interactive Components**: 5\n- Return to Dashboard, Dashboard, button, button\n\n### [token]\n**Route**: `/meta-tags/[token]`\n\nThe [token] page provides user interface and functionality for [token] related features.\n\n**Interactive Components**: 4\n- Back to Dashboard, a, Edit, Delete\n\n### [token]\n**Route**: `/alt-tags/[token]`\n\nThe [token] page provides user interface and functionality for [token] related features.\n\n**Interactive Components**: 4\n- Back to Dashboard, a, Edit, Delete\n\n### Cms Connection\n**Route**: `/website/[websiteId]/cms-connection`\n\nThe Cms Connection page provides user interface and functionality for cms connection related features.\n\n**Interactive Components**: 5\n- Return to Dashboard, Dashboard, button, Disconnect\n\n## Navigation Flow\n\nThe application provides seamless navigation between pages through:\n\n- **Back to Dashboard** navigates from [debug-seo](#debug-seo) to [app](#app)\n- **Set Up CMS Connection** navigates from [content-writer](#content-writer) to [cms-connections](#cms-connections)\n- **Set Up CMS Connection** navigates from [article-writer](#article-writer) to [cms-connections](#cms-connections)\n- **Done** navigates from [add-website](#add-website) to [app](#app)\n- **Back to Dashboard** navigates from [token](#token) to [app](#app)\n- **Back to Dashboard** navigates from [token](#token) to [app](#app)\n\n",
    "components": [
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"⚡\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: expression",
          "title: expression"
        ],
        "usage": "Used in Upgrade Badge page",
        "interactions": "Click handler: handleUpgrade",
        "filePath": "src/components/UpgradeBadge.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks ⚡"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"⚡ Upgrade Now\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Feature Gate page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/components/FeatureGate.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks ⚡ Upgrade Now"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"← Back to Dashboard\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Feature Gate page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/components/FeatureGate.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks ← Back to Dashboard"
          }
        ]
      },
      {
        "name": "link",
        "slug": "link",
        "purpose": "Navigation link that takes users to different pages",
        "props": [
          "rel: string",
          "href: string",
          "sizes: string"
        ],
        "usage": "Used in Layout page",
        "interactions": "No interactions defined",
        "filePath": "src/app/layout.tsx",
        "uiEvents": []
      },
      {
        "name": "link",
        "slug": "link",
        "purpose": "Navigation link that takes users to different pages",
        "props": [
          "rel: string",
          "href: string",
          "sizes: string",
          "type: string"
        ],
        "usage": "Used in Layout page",
        "interactions": "No interactions defined",
        "filePath": "src/app/layout.tsx",
        "uiEvents": []
      },
      {
        "name": "link",
        "slug": "link",
        "purpose": "Navigation link that takes users to different pages",
        "props": [
          "rel: string",
          "href: string",
          "sizes: string",
          "type: string"
        ],
        "usage": "Used in Layout page",
        "interactions": "No interactions defined",
        "filePath": "src/app/layout.tsx",
        "uiEvents": []
      },
      {
        "name": "link",
        "slug": "link",
        "purpose": "Navigation link that takes users to different pages",
        "props": [
          "rel: string",
          "href: string"
        ],
        "usage": "Used in Layout page",
        "interactions": "No interactions defined",
        "filePath": "src/app/layout.tsx",
        "uiEvents": []
      },
      {
        "name": "link",
        "slug": "link",
        "purpose": "Navigation link that takes users to different pages",
        "props": [
          "rel: string",
          "href: string"
        ],
        "usage": "Used in Layout page",
        "interactions": "No interactions defined",
        "filePath": "src/app/layout.tsx",
        "uiEvents": []
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"legal@seoagent.com\" that takes users to different pages",
        "props": [
          "href: string",
          "className: string"
        ],
        "usage": "Used in Terms page",
        "interactions": "No interactions defined",
        "filePath": "src/app/terms/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "placeholder: string",
          "className: string"
        ],
        "usage": "Used in Strategy page",
        "interactions": "No interactions defined",
        "filePath": "src/app/strategy/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Join Waitlist\" that triggers user actions",
        "props": [
          "className: string"
        ],
        "usage": "Used in Strategy page",
        "interactions": "No interactions defined",
        "filePath": "src/app/strategy/page.tsx",
        "uiEvents": []
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"privacy@seoagent.com\" that takes users to different pages",
        "props": [
          "href: string",
          "className: string"
        ],
        "usage": "Used in Privacy page",
        "interactions": "No interactions defined",
        "filePath": "src/app/privacy/page.tsx",
        "uiEvents": []
      },
      {
        "name": "form",
        "slug": "form",
        "purpose": "Form component for user input and data submission",
        "props": [
          "className: string",
          "onSubmit: expression"
        ],
        "usage": "Used in Login page",
        "interactions": "No interactions defined",
        "filePath": "src/app/login/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "id: string",
          "name: string",
          "type: string",
          "autoComplete: string",
          "required: unknown",
          "value: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Login page",
        "interactions": "No interactions defined",
        "filePath": "src/app/login/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "id: string",
          "name: string",
          "type: string",
          "autoComplete: expression",
          "required: unknown",
          "value: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Login page",
        "interactions": "No interactions defined",
        "filePath": "src/app/login/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "type: string",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Login page",
        "interactions": "No interactions defined",
        "filePath": "src/app/login/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "type: string",
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Login page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/login/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "LoginForm",
        "slug": "loginform",
        "purpose": "Form component for user input and data submission",
        "props": [],
        "usage": "Used in Login page",
        "interactions": "No interactions defined",
        "filePath": "src/app/login/page.tsx",
        "uiEvents": []
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"Back to Dashboard\" that takes users to different pages",
        "props": [
          "href: string",
          "className: string"
        ],
        "usage": "Used in Debug Seo page",
        "interactions": "No interactions defined",
        "filePath": "src/app/debug-seo/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Run All Tests\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Debug Seo page",
        "interactions": "Click handler: runAllTests",
        "filePath": "src/app/debug-seo/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Run All Tests"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Run\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Debug Seo page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/debug-seo/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Run"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"Set Up CMS Connection\" that takes users to different pages",
        "props": [
          "href: string",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Create New Article\" that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Create New Article"
          }
        ]
      },
      {
        "name": "form",
        "slug": "form",
        "purpose": "Form component for user input and data submission",
        "props": [
          "onSubmit: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "value: expression",
          "onChange: expression",
          "placeholder: string",
          "className: string",
          "required: unknown"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "select",
        "slug": "select",
        "purpose": "Input field for user data entry",
        "props": [
          "value: expression",
          "onChange: expression",
          "className: string",
          "required: unknown"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "select",
        "slug": "select",
        "purpose": "Input field for user data entry",
        "props": [
          "value: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "value: expression",
          "onChange: expression",
          "placeholder: string",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Cancel\" that triggers user actions",
        "props": [
          "type: string",
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Cancel"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "type: string",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "select",
        "slug": "select",
        "purpose": "Input field for user data entry",
        "props": [
          "value: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"View Live Article\" that takes users to different pages",
        "props": [
          "href: expression",
          "target: string",
          "rel: string",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"Edit in Strapi\" that takes users to different pages",
        "props": [
          "href: expression",
          "target: string",
          "rel: string",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Connect CMS\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Cms Connections page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/cms-connections/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Connect CMS"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Cancel\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Cms Connections page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/cms-connections/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Cancel"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Try Again\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Cms Connections page",
        "interactions": "Click handler: fetchConnections",
        "filePath": "src/app/cms-connections/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Try Again"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Get Started\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Cms Connections page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/cms-connections/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Get Started"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Get Tracking Script\" that triggers user actions",
        "props": [
          "className: string"
        ],
        "usage": "Used in Autopilot page",
        "interactions": "No interactions defined",
        "filePath": "src/app/autopilot/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"Set Up CMS Connection\" that takes users to different pages",
        "props": [
          "href: string",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Create New Article\" that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Create New Article"
          }
        ]
      },
      {
        "name": "form",
        "slug": "form",
        "purpose": "Form component for user input and data submission",
        "props": [
          "onSubmit: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "value: expression",
          "onChange: expression",
          "placeholder: string",
          "className: string",
          "required: unknown"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "select",
        "slug": "select",
        "purpose": "Input field for user data entry",
        "props": [
          "value: expression",
          "onChange: expression",
          "className: string",
          "required: unknown"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "select",
        "slug": "select",
        "purpose": "Input field for user data entry",
        "props": [
          "value: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "value: expression",
          "onChange: expression",
          "placeholder: string",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Cancel\" that triggers user actions",
        "props": [
          "type: string",
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Cancel"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "type: string",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "select",
        "slug": "select",
        "purpose": "Input field for user data entry",
        "props": [
          "value: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"View Live Article\" that takes users to different pages",
        "props": [
          "href: expression",
          "target: string",
          "rel: string",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"Edit in Strapi\" that takes users to different pages",
        "props": [
          "href: expression",
          "target: string",
          "rel: string",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "textarea",
        "slug": "textarea",
        "purpose": "Input field for user data entry",
        "props": [
          "className: string",
          "rows: expression",
          "readOnly: unknown",
          "value: expression"
        ],
        "usage": "Used in Add Website page",
        "interactions": "No interactions defined",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Copy Code\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Add Website page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Copy Code"
          }
        ]
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"Done\" that takes users to different pages",
        "props": [
          "href: string",
          "className: string"
        ],
        "usage": "Used in Add Website page",
        "interactions": "No interactions defined",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": []
      },
      {
        "name": "form",
        "slug": "form",
        "purpose": "Form component for user input and data submission",
        "props": [
          "onSubmit: expression",
          "className: string"
        ],
        "usage": "Used in Add Website page",
        "interactions": "No interactions defined",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "id: string",
          "value: expression",
          "onChange: expression",
          "className: string",
          "placeholder: string",
          "required: unknown"
        ],
        "usage": "Used in Add Website page",
        "interactions": "No interactions defined",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": []
      },
      {
        "name": "select",
        "slug": "select",
        "purpose": "Input field for user data entry",
        "props": [
          "id: string",
          "value: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Add Website page",
        "interactions": "No interactions defined",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "id: string",
          "type: string",
          "checked: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Add Website page",
        "interactions": "No interactions defined",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "id: string",
          "type: string",
          "checked: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Add Website page",
        "interactions": "No interactions defined",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Cancel\" that triggers user actions",
        "props": [
          "type: string",
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Add Website page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Cancel"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "type: string",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Add Website page",
        "interactions": "No interactions defined",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "value: expression",
          "disabled: unknown",
          "className: string"
        ],
        "usage": "Used in Account page",
        "interactions": "No interactions defined",
        "filePath": "src/app/account/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "value: expression",
          "disabled: unknown",
          "className: string"
        ],
        "usage": "Used in Account page",
        "interactions": "No interactions defined",
        "filePath": "src/app/account/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "value: expression",
          "disabled: unknown",
          "className: string"
        ],
        "usage": "Used in Account page",
        "interactions": "No interactions defined",
        "filePath": "src/app/account/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Sign Out\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Account page",
        "interactions": "Click handler: handleSignOut",
        "filePath": "src/app/account/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Sign Out"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Return to Dashboard\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in [website Id] page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/website/[websiteId]/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Return to Dashboard"
          }
        ]
      },
      {
        "name": "nav",
        "slug": "nav",
        "purpose": "Navigation component for site/app navigation",
        "props": [
          "className: string",
          "aria-label: string"
        ],
        "usage": "Used in [website Id] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/website/[websiteId]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Dashboard\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in [website Id] page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/website/[websiteId]/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Dashboard"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in [website Id] page",
        "interactions": "Click handler: handleStartAudit",
        "filePath": "src/app/website/[websiteId]/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in [website Id] page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/website/[websiteId]/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"Back to Dashboard\" that takes users to different pages",
        "props": [
          "href: string",
          "className: string"
        ],
        "usage": "Used in [token] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/meta-tags/[token]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link that takes users to different pages",
        "props": [
          "href: expression",
          "target: string",
          "rel: string",
          "className: string"
        ],
        "usage": "Used in [token] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/meta-tags/[token]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Edit\" that triggers user actions",
        "props": [
          "className: string"
        ],
        "usage": "Used in [token] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/meta-tags/[token]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Delete\" that triggers user actions",
        "props": [
          "className: string"
        ],
        "usage": "Used in [token] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/meta-tags/[token]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"Back to Dashboard\" that takes users to different pages",
        "props": [
          "href: string",
          "className: string"
        ],
        "usage": "Used in [token] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/alt-tags/[token]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link that takes users to different pages",
        "props": [
          "href: expression",
          "target: string",
          "rel: string",
          "className: string"
        ],
        "usage": "Used in [token] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/alt-tags/[token]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Edit\" that triggers user actions",
        "props": [
          "className: string"
        ],
        "usage": "Used in [token] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/alt-tags/[token]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Delete\" that triggers user actions",
        "props": [
          "className: string"
        ],
        "usage": "Used in [token] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/alt-tags/[token]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Return to Dashboard\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Cms Connection page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/website/[websiteId]/cms-connection/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Return to Dashboard"
          }
        ]
      },
      {
        "name": "nav",
        "slug": "nav",
        "purpose": "Navigation component for site/app navigation",
        "props": [
          "className: string",
          "aria-label: string"
        ],
        "usage": "Used in Cms Connection page",
        "interactions": "No interactions defined",
        "filePath": "src/app/website/[websiteId]/cms-connection/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Dashboard\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Cms Connection page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/website/[websiteId]/cms-connection/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Dashboard"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Cms Connection page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/website/[websiteId]/cms-connection/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Disconnect\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Cms Connection page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/website/[websiteId]/cms-connection/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Disconnect"
          }
        ]
      }
    ],
    "pages": [
      {
        "route": "/unknown",
        "name": "Upgrade Badge",
        "slug": "upgrade-badge",
        "purpose": "The Upgrade Badge page provides user interface and functionality for upgrade badge related features.",
        "components": [
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button - \"⚡\"\n\n> **Location**: `src/components/UpgradeBadge.tsx:43`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"⚡\" that triggers user actions\n\n**Click Handler**: `handleUpgrade`\n\n**Props**:\n- `onClick` (expression)\n- `className` (expression)\n- `title` (expression)\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/unknown",
        "name": "Protected Route",
        "slug": "protected-route",
        "purpose": "The Protected Route page provides user interface and functionality for protected route related features.",
        "components": [],
        "componentsMarkdown": "**No interactive components detected on this page.**",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/unknown",
        "name": "Feature Gate",
        "slug": "feature-gate",
        "purpose": "The Feature Gate page provides user interface and functionality for feature gate related features.",
        "components": [
          "button",
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button - \"⚡ Upgrade Now\"\n\n> **Location**: `src/components/FeatureGate.tsx:68`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"⚡ Upgrade Now\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"w-full btn bg-violet-600 hover:bg-violet-700 text-white py-3\"\n\n\n#### button - \"← Back to Dashboard\"\n\n> **Location**: `src/components/FeatureGate.tsx:75`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"← Back to Dashboard\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"w-full btn border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500 text-gray-700 dark:text-gray-300\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/",
        "name": "App",
        "slug": "app",
        "purpose": "The App page provides user interface and functionality for app related features.",
        "components": [],
        "componentsMarkdown": "**No interactive components detected on this page.**",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/layout.tsx",
        "name": "Layout",
        "slug": "layout",
        "purpose": "The Layout page provides user interface and functionality for layout related features.",
        "components": [
          "link",
          "link",
          "link",
          "link",
          "link"
        ],
        "componentsMarkdown": "### 🔗 Navigation Links\n\n#### link\n\n> **Location**: `src/app/layout.tsx:51`  \n> **Type**: link  \n> **Description**: Navigation link that takes users to different pages\n\n**Navigates To**: `/favicon.ico`\n\n**Props**:\n- `rel` (string) = \"icon\"\n- `href` (string) = \"/favicon.ico\"\n- `sizes` (string) = \"32x32\"\n\n\n#### link\n\n> **Location**: `src/app/layout.tsx:52`  \n> **Type**: link  \n> **Description**: Navigation link that takes users to different pages\n\n**Navigates To**: `/favicon-16x16.png`\n\n**Props**:\n- `rel` (string) = \"icon\"\n- `href` (string) = \"/favicon-16x16.png\"\n- `sizes` (string) = \"16x16\"\n- `type` (string) = \"image/png\"\n\n\n#### link\n\n> **Location**: `src/app/layout.tsx:53`  \n> **Type**: link  \n> **Description**: Navigation link that takes users to different pages\n\n**Navigates To**: `/favicon-32x32.png`\n\n**Props**:\n- `rel` (string) = \"icon\"\n- `href` (string) = \"/favicon-32x32.png\"\n- `sizes` (string) = \"32x32\"\n- `type` (string) = \"image/png\"\n\n\n#### link\n\n> **Location**: `src/app/layout.tsx:54`  \n> **Type**: link  \n> **Description**: Navigation link that takes users to different pages\n\n**Navigates To**: `/apple-touch-icon.png`\n\n**Props**:\n- `rel` (string) = \"apple-touch-icon\"\n- `href` (string) = \"/apple-touch-icon.png\"\n\n\n#### link\n\n> **Location**: `src/app/layout.tsx:55`  \n> **Type**: link  \n> **Description**: Navigation link that takes users to different pages\n\n**Navigates To**: `/site.webmanifest`\n\n**Props**:\n- `rel` (string) = \"manifest\"\n- `href` (string) = \"/site.webmanifest\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/terms",
        "name": "Terms",
        "slug": "terms",
        "purpose": "The Terms page provides user interface and functionality for terms related features.",
        "components": [
          "a"
        ],
        "componentsMarkdown": "### 🔗 Navigation Links\n\n#### a - \"legal@seoagent.com\"\n\n> **Location**: `src/app/terms/page.tsx:83`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"legal@seoagent.com\" that takes users to different pages\n\n**Navigates To**: `mailto:legal@seoagent.com`\n\n**Props**:\n- `href` (string) = \"mailto:legal@seoagent.com\"\n- `className` (string) = \"text-violet-600 hover:underline\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/strategy",
        "name": "Strategy",
        "slug": "strategy",
        "purpose": "The Strategy page provides user interface and functionality for strategy related features.",
        "components": [
          "input",
          "button"
        ],
        "componentsMarkdown": "### 📋 Input Fields\n\n#### input\n\n> **Location**: `src/app/strategy/page.tsx:128`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"email\"\n- `placeholder` (string) = \"Enter your email\"\n- `className` (string) = \"flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n\n\n\n### 🔘 Buttons & Actions\n\n#### button - \"Join Waitlist\"\n\n> **Location**: `src/app/strategy/page.tsx:133`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Join Waitlist\" that triggers user actions\n\n**Props**:\n- `className` (string) = \"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-medium py-2 px-6 rounded-lg transition-all duration-200\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/privacy",
        "name": "Privacy",
        "slug": "privacy",
        "purpose": "The Privacy page provides user interface and functionality for privacy related features.",
        "components": [
          "a"
        ],
        "componentsMarkdown": "### 🔗 Navigation Links\n\n#### a - \"privacy@seoagent.com\"\n\n> **Location**: `src/app/privacy/page.tsx:65`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"privacy@seoagent.com\" that takes users to different pages\n\n**Navigates To**: `mailto:privacy@seoagent.com`\n\n**Props**:\n- `href` (string) = \"mailto:privacy@seoagent.com\"\n- `className` (string) = \"text-violet-600 hover:underline\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/login",
        "name": "Login",
        "slug": "login",
        "purpose": "The Login page provides user interface and functionality for login related features.",
        "components": [
          "form",
          "input",
          "input",
          "button",
          "button",
          "LoginForm"
        ],
        "componentsMarkdown": "### 📝 Forms & Input\n\n#### form\n\n> **Location**: `src/app/login/page.tsx:79`  \n> **Type**: form  \n> **Description**: Form component for user input and data submission\n\n**Props**:\n- `className` (string) = \"space-y-6\"\n- `onSubmit` (expression)\n\n\n#### LoginForm\n\n> **Location**: `src/app/login/page.tsx:187`  \n> **Type**: form  \n> **Description**: Form component for user input and data submission\n\n\n\n### 📋 Input Fields\n\n#### input\n\n> **Location**: `src/app/login/page.tsx:85`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `id` (string) = \"email\"\n- `name` (string) = \"email\"\n- `type` (string) = \"email\"\n- `autoComplete` (string) = \"email\"\n- `required` (unknown)\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"appearance-none block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white sm:text-sm\"\n\n\n#### input\n\n> **Location**: `src/app/login/page.tsx:103`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `id` (string) = \"password\"\n- `name` (string) = \"password\"\n- `type` (string) = \"password\"\n- `autoComplete` (expression)\n- `required` (unknown)\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"appearance-none block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white sm:text-sm\"\n\n\n\n### 🔘 Buttons & Actions\n\n#### button\n\n> **Location**: `src/app/login/page.tsx:123`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Props**:\n- `type` (string) = \"submit\"\n- `disabled` (expression)\n- `className` (string) = \"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n\n\n#### button\n\n> **Location**: `src/app/login/page.tsx:146`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `type` (string) = \"button\"\n- `onClick` (expression)\n- `className` (string) = \"w-full flex justify-center py-2 px-4 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/keywords",
        "name": "Keywords",
        "slug": "keywords",
        "purpose": "The Keywords page provides user interface and functionality for keywords related features.",
        "components": [],
        "componentsMarkdown": "**No interactive components detected on this page.**",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/debug-seo",
        "name": "Debug Seo",
        "slug": "debug-seo",
        "purpose": "The Debug Seo page provides user interface and functionality for debug seo related features.",
        "components": [
          "a",
          "button",
          "button"
        ],
        "componentsMarkdown": "### 🔗 Navigation Links\n\n#### a - \"Back to Dashboard\"\n\n> **Location**: `src/app/debug-seo/page.tsx:301`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"Back to Dashboard\" that takes users to different pages\n\n**Navigates To**: [App](#app) (`/`)\n\n**Props**:\n- `href` (string) = \"/\"\n- `className` (string) = \"inline-flex items-center text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-200 transition-colors mr-4\"\n\n\n\n### 🔘 Buttons & Actions\n\n#### button - \"Run All Tests\"\n\n> **Location**: `src/app/debug-seo/page.tsx:319`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Run All Tests\" that triggers user actions\n\n**Click Handler**: `runAllTests`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn bg-violet-600 hover:bg-violet-700 text-white\"\n\n\n#### button - \"Run\"\n\n> **Location**: `src/app/debug-seo/page.tsx:392`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Run\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn-sm bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100\"\n\n\n\n",
        "navigationLinks": [
          "[App](#app)"
        ],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/dashboard",
        "name": "Dashboard",
        "slug": "dashboard",
        "purpose": "The Dashboard page provides user interface and functionality for dashboard related features.",
        "components": [],
        "componentsMarkdown": "**No interactive components detected on this page.**",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/content-writer",
        "name": "Content Writer",
        "slug": "content-writer",
        "purpose": "The Content Writer page provides user interface and functionality for content writer related features.",
        "components": [
          "button",
          "a",
          "button",
          "form",
          "input",
          "select",
          "select",
          "input",
          "button",
          "button",
          "select",
          "button",
          "button",
          "button",
          "a",
          "a",
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button\n\n> **Location**: `src/app/content-writer/page.tsx:456`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"ml-auto text-red-400 hover:text-red-600\"\n\n\n#### button - \"Create New Article\"\n\n> **Location**: `src/app/content-writer/page.tsx:499`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Create New Article\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-4 py-2 bg-violet-600 hover:bg-violet-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button - \"Cancel\"\n\n> **Location**: `src/app/content-writer/page.tsx:589`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Cancel\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `type` (string) = \"button\"\n- `onClick` (expression)\n- `className` (string) = \"px-4 py-2 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/content-writer/page.tsx:596`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Props**:\n- `type` (string) = \"submit\"\n- `disabled` (expression)\n- `className` (string) = \"px-4 py-2 bg-violet-600 hover:bg-violet-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/content-writer/page.tsx:711`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-blue-600 hover:bg-blue-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/content-writer/page.tsx:732`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-orange-600 hover:bg-orange-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/content-writer/page.tsx:753`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-green-600 hover:bg-green-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/content-writer/page.tsx:800`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-red-600 hover:bg-red-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n\n### 🔗 Navigation Links\n\n#### a - \"Set Up CMS Connection\"\n\n> **Location**: `src/app/content-writer/page.tsx:483`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"Set Up CMS Connection\" that takes users to different pages\n\n**Navigates To**: [Cms Connections](#cms-connections) (`/cms-connections`)\n\n**Props**:\n- `href` (string) = \"/cms-connections\"\n- `className` (string) = \"inline-flex items-center px-4 py-2 bg-violet-600 hover:bg-violet-700 text-white rounded-lg transition-colors\"\n\n\n#### a - \"View Live Article\"\n\n> **Location**: `src/app/content-writer/page.tsx:774`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"View Live Article\" that takes users to different pages\n\n**Props**:\n- `href` (expression)\n- `target` (string) = \"_blank\"\n- `rel` (string) = \"noopener noreferrer\"\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors\"\n\n\n#### a - \"Edit in Strapi\"\n\n> **Location**: `src/app/content-writer/page.tsx:787`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"Edit in Strapi\" that takes users to different pages\n\n**Props**:\n- `href` (expression)\n- `target` (string) = \"_blank\"\n- `rel` (string) = \"noopener noreferrer\"\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors\"\n\n\n\n### 📝 Forms & Input\n\n#### form\n\n> **Location**: `src/app/content-writer/page.tsx:518`  \n> **Type**: form  \n> **Description**: Form component for user input and data submission\n\n**Props**:\n- `onSubmit` (expression)\n- `className` (string) = \"space-y-4\"\n\n\n\n### 📋 Input Fields\n\n#### input\n\n> **Location**: `src/app/content-writer/page.tsx:523`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"text\"\n- `value` (expression)\n- `onChange` (expression)\n- `placeholder` (string) = \"Enter article title...\"\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n- `required` (unknown)\n\n\n#### select\n\n> **Location**: `src/app/content-writer/page.tsx:537`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n- `required` (unknown)\n\n\n#### select\n\n> **Location**: `src/app/content-writer/page.tsx:556`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n\n\n#### input\n\n> **Location**: `src/app/content-writer/page.tsx:576`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"text\"\n- `value` (expression)\n- `onChange` (expression)\n- `placeholder` (string) = \"keyword1, keyword2, keyword3\"\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n\n\n#### select\n\n> **Location**: `src/app/content-writer/page.tsx:618`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"text-sm border border-gray-300 dark:border-gray-600 rounded-md px-3 py-1 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n\n\n\n",
        "navigationLinks": [
          "[Cms Connections](#cms-connections)"
        ],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/cms-connections",
        "name": "Cms Connections",
        "slug": "cms-connections",
        "purpose": "The Cms Connections page provides user interface and functionality for cms connections related features.",
        "components": [
          "button",
          "button",
          "button",
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button - \"Connect CMS\"\n\n> **Location**: `src/app/cms-connections/page.tsx:120`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Connect CMS\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn bg-violet-600 hover:bg-violet-700 text-white\"\n\n\n#### button - \"Cancel\"\n\n> **Location**: `src/app/cms-connections/page.tsx:138`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Cancel\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"text-gray-500 hover:text-gray-700 text-sm\"\n\n\n#### button - \"Try Again\"\n\n> **Location**: `src/app/cms-connections/page.tsx:163`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Try Again\" that triggers user actions\n\n**Click Handler**: `fetchConnections`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn bg-blue-600 hover:bg-blue-700 text-white\"\n\n\n#### button - \"Get Started\"\n\n> **Location**: `src/app/cms-connections/page.tsx:185`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Get Started\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn bg-violet-600 hover:bg-violet-700 text-white\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/chat",
        "name": "Chat",
        "slug": "chat",
        "purpose": "The Chat page provides user interface and functionality for chat related features.",
        "components": [],
        "componentsMarkdown": "**No interactive components detected on this page.**",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/autopilot",
        "name": "Autopilot",
        "slug": "autopilot",
        "purpose": "The Autopilot page provides user interface and functionality for autopilot related features.",
        "components": [
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button - \"Get Tracking Script\"\n\n> **Location**: `src/app/autopilot/page.tsx:98`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Get Tracking Script\" that triggers user actions\n\n**Props**:\n- `className` (string) = \"w-full bg-purple-600 hover:bg-purple-700 text-white font-medium py-2 px-4 rounded-lg transition-colors\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/article-writer",
        "name": "Article Writer",
        "slug": "article-writer",
        "purpose": "The Article Writer page provides user interface and functionality for article writer related features.",
        "components": [
          "button",
          "a",
          "button",
          "form",
          "input",
          "select",
          "select",
          "input",
          "button",
          "button",
          "select",
          "button",
          "button",
          "button",
          "a",
          "a",
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button\n\n> **Location**: `src/app/article-writer/page.tsx:449`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"ml-auto text-red-400 hover:text-red-600\"\n\n\n#### button - \"Create New Article\"\n\n> **Location**: `src/app/article-writer/page.tsx:492`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Create New Article\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-4 py-2 bg-violet-600 hover:bg-violet-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button - \"Cancel\"\n\n> **Location**: `src/app/article-writer/page.tsx:582`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Cancel\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `type` (string) = \"button\"\n- `onClick` (expression)\n- `className` (string) = \"px-4 py-2 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/article-writer/page.tsx:589`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Props**:\n- `type` (string) = \"submit\"\n- `disabled` (expression)\n- `className` (string) = \"px-4 py-2 bg-violet-600 hover:bg-violet-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/article-writer/page.tsx:704`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-blue-600 hover:bg-blue-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/article-writer/page.tsx:725`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-orange-600 hover:bg-orange-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/article-writer/page.tsx:746`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-green-600 hover:bg-green-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/article-writer/page.tsx:793`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-red-600 hover:bg-red-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n\n### 🔗 Navigation Links\n\n#### a - \"Set Up CMS Connection\"\n\n> **Location**: `src/app/article-writer/page.tsx:476`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"Set Up CMS Connection\" that takes users to different pages\n\n**Navigates To**: [Cms Connections](#cms-connections) (`/cms-connections`)\n\n**Props**:\n- `href` (string) = \"/cms-connections\"\n- `className` (string) = \"inline-flex items-center px-4 py-2 bg-violet-600 hover:bg-violet-700 text-white rounded-lg transition-colors\"\n\n\n#### a - \"View Live Article\"\n\n> **Location**: `src/app/article-writer/page.tsx:767`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"View Live Article\" that takes users to different pages\n\n**Props**:\n- `href` (expression)\n- `target` (string) = \"_blank\"\n- `rel` (string) = \"noopener noreferrer\"\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors\"\n\n\n#### a - \"Edit in Strapi\"\n\n> **Location**: `src/app/article-writer/page.tsx:780`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"Edit in Strapi\" that takes users to different pages\n\n**Props**:\n- `href` (expression)\n- `target` (string) = \"_blank\"\n- `rel` (string) = \"noopener noreferrer\"\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors\"\n\n\n\n### 📝 Forms & Input\n\n#### form\n\n> **Location**: `src/app/article-writer/page.tsx:511`  \n> **Type**: form  \n> **Description**: Form component for user input and data submission\n\n**Props**:\n- `onSubmit` (expression)\n- `className` (string) = \"space-y-4\"\n\n\n\n### 📋 Input Fields\n\n#### input\n\n> **Location**: `src/app/article-writer/page.tsx:516`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"text\"\n- `value` (expression)\n- `onChange` (expression)\n- `placeholder` (string) = \"Enter article title...\"\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n- `required` (unknown)\n\n\n#### select\n\n> **Location**: `src/app/article-writer/page.tsx:530`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n- `required` (unknown)\n\n\n#### select\n\n> **Location**: `src/app/article-writer/page.tsx:549`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n\n\n#### input\n\n> **Location**: `src/app/article-writer/page.tsx:569`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"text\"\n- `value` (expression)\n- `onChange` (expression)\n- `placeholder` (string) = \"keyword1, keyword2, keyword3\"\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n\n\n#### select\n\n> **Location**: `src/app/article-writer/page.tsx:611`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"text-sm border border-gray-300 dark:border-gray-600 rounded-md px-3 py-1 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n\n\n\n",
        "navigationLinks": [
          "[Cms Connections](#cms-connections)"
        ],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/add-website",
        "name": "Add Website",
        "slug": "add-website",
        "purpose": "The Add Website page provides user interface and functionality for add website related features.",
        "components": [
          "textarea",
          "button",
          "a",
          "form",
          "input",
          "select",
          "input",
          "input",
          "button",
          "button"
        ],
        "componentsMarkdown": "### 📋 Input Fields\n\n#### textarea\n\n> **Location**: `src/app/add-website/page.tsx:159`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `className` (string) = \"w-full p-4 bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg text-sm font-mono\"\n- `rows` (expression)\n- `readOnly` (unknown)\n- `value` (expression)\n\n\n#### input\n\n> **Location**: `src/app/add-website/page.tsx:223`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"text\"\n- `id` (string) = \"domain\"\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-violet-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n- `placeholder` (string) = \"example.com\"\n- `required` (unknown)\n\n\n#### select\n\n> **Location**: `src/app/add-website/page.tsx:241`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `id` (string) = \"language\"\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-violet-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n\n\n#### input\n\n> **Location**: `src/app/add-website/page.tsx:262`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `id` (string) = \"enableMetaTags\"\n- `type` (string) = \"checkbox\"\n- `checked` (expression)\n- `onChange` (expression)\n- `className` (string) = \"h-4 w-4 text-violet-600 focus:ring-violet-500 border-gray-300 rounded\"\n\n\n#### input\n\n> **Location**: `src/app/add-website/page.tsx:278`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `id` (string) = \"enableImageTags\"\n- `type` (string) = \"checkbox\"\n- `checked` (expression)\n- `onChange` (expression)\n- `className` (string) = \"h-4 w-4 text-violet-600 focus:ring-violet-500 border-gray-300 rounded\"\n\n\n\n### 🔘 Buttons & Actions\n\n#### button - \"Copy Code\"\n\n> **Location**: `src/app/add-website/page.tsx:170`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Copy Code\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn bg-violet-600 hover:bg-violet-700 text-white\"\n\n\n#### button - \"Cancel\"\n\n> **Location**: `src/app/add-website/page.tsx:295`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Cancel\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `type` (string) = \"button\"\n- `onClick` (expression)\n- `className` (string) = \"btn border-gray-200 dark:border-gray-700/60 hover:border-gray-300 dark:hover:border-gray-600 text-gray-800 dark:text-gray-300\"\n\n\n#### button\n\n> **Location**: `src/app/add-website/page.tsx:302`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Props**:\n- `type` (string) = \"submit\"\n- `disabled` (expression)\n- `className` (string) = \"btn bg-violet-500 hover:bg-violet-600 text-white disabled:opacity-50 disabled:cursor-not-allowed\"\n\n\n\n### 🔗 Navigation Links\n\n#### a - \"Done\"\n\n> **Location**: `src/app/add-website/page.tsx:178`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"Done\" that takes users to different pages\n\n**Navigates To**: [App](#app) (`/`)\n\n**Props**:\n- `href` (string) = \"/\"\n- `className` (string) = \"btn bg-gray-900 text-gray-100 hover:bg-gray-800 dark:bg-gray-100 dark:text-gray-800 dark:hover:bg-white\"\n\n\n\n### 📝 Forms & Input\n\n#### form\n\n> **Location**: `src/app/add-website/page.tsx:202`  \n> **Type**: form  \n> **Description**: Form component for user input and data submission\n\n**Props**:\n- `onSubmit` (expression)\n- `className` (string) = \"space-y-6\"\n\n\n\n",
        "navigationLinks": [
          "[App](#app)"
        ],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/account",
        "name": "Account",
        "slug": "account",
        "purpose": "The Account page provides user interface and functionality for account related features.",
        "components": [
          "input",
          "input",
          "input",
          "button"
        ],
        "componentsMarkdown": "### 📋 Input Fields\n\n#### input\n\n> **Location**: `src/app/account/page.tsx:60`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"email\"\n- `value` (expression)\n- `disabled` (unknown)\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-700 text-gray-500 dark:text-gray-400\"\n\n\n#### input\n\n> **Location**: `src/app/account/page.tsx:71`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"text\"\n- `value` (expression)\n- `disabled` (unknown)\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-700 text-gray-500 dark:text-gray-400 font-mono text-xs\"\n\n\n#### input\n\n> **Location**: `src/app/account/page.tsx:82`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"text\"\n- `value` (expression)\n- `disabled` (unknown)\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-700 text-gray-500 dark:text-gray-400\"\n\n\n\n### 🔘 Buttons & Actions\n\n#### button - \"Sign Out\"\n\n> **Location**: `src/app/account/page.tsx:107`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Sign Out\" that triggers user actions\n\n**Click Handler**: `handleSignOut`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn border-gray-200 dark:border-gray-700/60 hover:border-gray-300 dark:hover:border-gray-600 text-gray-800 dark:text-gray-300\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/website/[websiteId]",
        "name": "[website Id]",
        "slug": "website-id",
        "purpose": "The [website Id] page provides user interface and functionality for [website id] related features.",
        "components": [
          "button",
          "nav",
          "button",
          "button",
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button - \"Return to Dashboard\"\n\n> **Location**: `src/app/website/[websiteId]/page.tsx:248`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Return to Dashboard\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn bg-violet-600 hover:bg-violet-700 text-white\"\n\n\n#### button - \"Dashboard\"\n\n> **Location**: `src/app/website/[websiteId]/page.tsx:292`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Dashboard\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"inline-flex items-center text-sm font-medium text-gray-700 hover:text-violet-600 dark:text-gray-400 dark:hover:text-white\"\n\n\n#### button\n\n> **Location**: `src/app/website/[websiteId]/page.tsx:502`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `handleStartAudit`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"w-full btn bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white flex items-center justify-center\"\n\n\n#### button\n\n> **Location**: `src/app/website/[websiteId]/page.tsx:558`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"w-full btn bg-violet-600 hover:bg-violet-700 text-white flex items-center justify-center\"\n\n\n\n### 🧭 Navigation Components\n\n#### nav\n\n> **Location**: `src/app/website/[websiteId]/page.tsx:289`  \n> **Type**: navigation  \n> **Description**: Navigation component for site/app navigation\n\n**Props**:\n- `className` (string) = \"flex mb-4\"\n- `aria-label` (string) = \"Breadcrumb\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/meta-tags/[token]",
        "name": "[token]",
        "slug": "token",
        "purpose": "The [token] page provides user interface and functionality for [token] related features.",
        "components": [
          "a",
          "a",
          "button",
          "button"
        ],
        "componentsMarkdown": "### 🔗 Navigation Links\n\n#### a - \"Back to Dashboard\"\n\n> **Location**: `src/app/meta-tags/[token]/page.tsx:175`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"Back to Dashboard\" that takes users to different pages\n\n**Navigates To**: [App](#app) (`/`)\n\n**Props**:\n- `href` (string) = \"/\"\n- `className` (string) = \"inline-flex items-center text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-200 transition-colors mr-4\"\n\n\n#### a\n\n> **Location**: `src/app/meta-tags/[token]/page.tsx:249`  \n> **Type**: link  \n> **Description**: Navigation link that takes users to different pages\n\n**Props**:\n- `href` (expression)\n- `target` (string) = \"_blank\"\n- `rel` (string) = \"noopener noreferrer\"\n- `className` (string) = \"text-indigo-600 hover:text-indigo-700 dark:text-indigo-400 dark:hover:text-indigo-300\"\n\n\n\n### 🔘 Buttons & Actions\n\n#### button - \"Edit\"\n\n> **Location**: `src/app/meta-tags/[token]/page.tsx:284`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Edit\" that triggers user actions\n\n**Props**:\n- `className` (string) = \"text-indigo-600 hover:text-indigo-700 dark:text-indigo-400 dark:hover:text-indigo-300 text-sm\"\n\n\n#### button - \"Delete\"\n\n> **Location**: `src/app/meta-tags/[token]/page.tsx:287`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Delete\" that triggers user actions\n\n**Props**:\n- `className` (string) = \"text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 text-sm\"\n\n\n\n",
        "navigationLinks": [
          "[App](#app)"
        ],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/alt-tags/[token]",
        "name": "[token]",
        "slug": "token",
        "purpose": "The [token] page provides user interface and functionality for [token] related features.",
        "components": [
          "a",
          "a",
          "button",
          "button"
        ],
        "componentsMarkdown": "### 🔗 Navigation Links\n\n#### a - \"Back to Dashboard\"\n\n> **Location**: `src/app/alt-tags/[token]/page.tsx:175`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"Back to Dashboard\" that takes users to different pages\n\n**Navigates To**: [App](#app) (`/`)\n\n**Props**:\n- `href` (string) = \"/\"\n- `className` (string) = \"inline-flex items-center text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-200 transition-colors mr-4\"\n\n\n#### a\n\n> **Location**: `src/app/alt-tags/[token]/page.tsx:264`  \n> **Type**: link  \n> **Description**: Navigation link that takes users to different pages\n\n**Props**:\n- `href` (expression)\n- `target` (string) = \"_blank\"\n- `rel` (string) = \"noopener noreferrer\"\n- `className` (string) = \"text-indigo-600 hover:text-indigo-700 dark:text-indigo-400 dark:hover:text-indigo-300\"\n\n\n\n### 🔘 Buttons & Actions\n\n#### button - \"Edit\"\n\n> **Location**: `src/app/alt-tags/[token]/page.tsx:288`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Edit\" that triggers user actions\n\n**Props**:\n- `className` (string) = \"text-indigo-600 hover:text-indigo-700 dark:text-indigo-400 dark:hover:text-indigo-300 text-sm\"\n\n\n#### button - \"Delete\"\n\n> **Location**: `src/app/alt-tags/[token]/page.tsx:291`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Delete\" that triggers user actions\n\n**Props**:\n- `className` (string) = \"text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 text-sm\"\n\n\n\n",
        "navigationLinks": [
          "[App](#app)"
        ],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/website/[websiteId]/cms-connection",
        "name": "Cms Connection",
        "slug": "cms-connection",
        "purpose": "The Cms Connection page provides user interface and functionality for cms connection related features.",
        "components": [
          "button",
          "nav",
          "button",
          "button",
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button - \"Return to Dashboard\"\n\n> **Location**: `src/app/website/[websiteId]/cms-connection/page.tsx:185`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Return to Dashboard\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn bg-violet-600 hover:bg-violet-700 text-white\"\n\n\n#### button - \"Dashboard\"\n\n> **Location**: `src/app/website/[websiteId]/cms-connection/page.tsx:229`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Dashboard\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"inline-flex items-center text-sm font-medium text-gray-700 hover:text-violet-600 dark:text-gray-400 dark:hover:text-white\"\n\n\n#### button\n\n> **Location**: `src/app/website/[websiteId]/cms-connection/page.tsx:241`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"ml-1 text-sm font-medium text-gray-700 hover:text-violet-600 dark:text-gray-400 dark:hover:text-white md:ml-2\"\n\n\n#### button - \"Disconnect\"\n\n> **Location**: `src/app/website/[websiteId]/cms-connection/page.tsx:329`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Disconnect\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"text-sm text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300\"\n\n\n\n### 🧭 Navigation Components\n\n#### nav\n\n> **Location**: `src/app/website/[websiteId]/cms-connection/page.tsx:226`  \n> **Type**: navigation  \n> **Description**: Navigation component for site/app navigation\n\n**Props**:\n- `className` (string) = \"flex mb-4\"\n- `aria-label` (string) = \"Breadcrumb\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      }
    ],
    "styling": "CSS",
    "stateManagement": "React State (useState, useContext)"
  },
  "backend": {
    "overview": "# Backend API Documentation\n\nThis document provides a comprehensive overview of the backend API, including routes, functions, and their interactions with the database. It also includes mappings between UI components and API endpoints for better understanding and navigation.\n\n## Table of Contents\n- [1. Strapi Publishing Debug & Fix](#1-strapi-publishing-debug--fix)\n- [2. Admin Tool API](#2-admin-tool-api)\n- [3. Supabase Server Client](#3-supabase-server-client)\n- [4. GSC Connection Component](#4-gsc-connection-component)\n- [5. API Service](#5-api-service)\n- [6. UI Component → API Mapping](#6-ui-component--api-mapping)\n\n---\n\n## 1. Strapi Publishing Debug & Fix\n\n### Issues Identified & Fixed ✅\n\n#### 1.1 CMS Manager Database Schema Mismatch\n- **Problem**: The CMS Manager was using modern schema (`user_id`, `is_active`) while the database had a legacy schema (`user_token`, `status`).\n- **Error**: `400 Bad Request` when querying the `cms_connections` table.\n- **Fixed**: Updated `/src/lib/cms/cms-manager.ts` to use correct column names:\n  - `user_id` → `user_token`\n  - `is_active` → `status = 'active'`\n  - Updated `dbRecordToConnection()` to map legacy schema properly.\n\n#### 1.2 Created Supabase Edge Function\n- **File**: `/supabase/functions/publish-article/index.ts`\n- **Purpose**: Replace Vercel Edge Functions with Supabase Edge Functions.\n- **Features**:\n  - Same publishing logic as current API.\n  - Improved Strapi content type parsing.\n  - Better error handling and logging.\n  - CORS support for frontend calls.\n\n### Current Strapi Publishing Error Analysis\n- **Error Message**: \n  ```\n  \"Method not allowed for endpoint: api::blog-post.blog-post\"\n  ```\n\n---\n\n## 2. Admin Tool API\n\n### Routes\n- **GET** `/api/health`\n- **GET** `/api/websites`\n- **GET** `/api/websites/:token`\n- **POST** `/api/test-endpoints/:token`\n- **POST** `/api/websites`\n- **GET** `/api/users`\n- **GET** `/api/env`\n- **GET** `/`\n\n### Functions\n- **Health Check**: Returns the health status of the API.\n- **Get Websites**: Retrieves all websites with associated user information.\n\n### Example Route Implementation\n```typescript\napp.get('/api/health', (req, res) => {\n  res.json({ status: 'ok', timestamp: new Date().toISOString() });\n});\n```\n\n---\n\n## 3. Supabase Server Client\n\n### Functionality\n- **Function**: `createServerSupabaseClient`\n- **Purpose**: Creates a Supabase client for server-side rendering.\n- **Parameters**: None.\n- **Returns**: A Supabase client instance.\n\n### Example Implementation\n```typescript\nexport const createServerSupabaseClient = () => {\n  const cookieStore = cookies();\n  \n  return createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value;\n        },\n        set(name: string, value: string, options: any) {\n          cookieStore.set({ name, value, ...options });\n        },\n        remove(name: string, options: any) {\n          cookieStore.set({ name, value: '', ...options });\n        },\n      },\n    }\n  );\n};\n```\n\n---\n\n## 4. GSC Connection Component\n\n### Routes\n- **GET** `gsc_connected`\n- **GET** `error`\n- **GET** `details`\n\n### Function\n- **Function**: `GSCConnection(param)`\n- **Purpose**: Manages the connection status with Google Search Console (GSC).\n\n### Example Implementation\n```typescript\nexport default function GSCConnection({ onConnectionChange }: GSCConnectionProps) {\n  // Component logic here...\n}\n```\n\n---\n\n## 5. API Service\n\n### Routes\n- **GET** `/`\n\n### Functions\n- **Purpose**: Entry point for the API service, handling various routes through imported route files.\n\n### Example Route Implementation\n```typescript\nconst app = express();\napp.use('/api/auth', authRoutes);\napp.use('/api/gsc', gscRoutes);\napp.use('/api/cms', cmsRoutes);\napp.use('/api/articles', articlesRoutes);\napp.use('/api/subscriptions', subscriptionRoutes);\napp.use('/api/seo', seoRoutes);\napp.use('/api/health', healthRoutes);\n```\n\n---\n\n## 6. UI Component → API Mapping\n\n| **Slug**          | **Service Function**       | **Linked Components** | **Purpose**                              | **Parameters**                      | **Response**                      | **Error Handling**                | **Database Operations**           |\n|-------------------|----------------------------|-----------------------|------------------------------------------|------------------------------------|-----------------------------------|-----------------------------------|-----------------------------------|\n| `get-health`      | `GET /api/health`         | -                     | Returns the health status of the API.   | None                               | `{ status: 'ok', timestamp: '...'}` | `500 Internal Server Error`       | None                              |\n| `get-websites`    | `GET /api/websites`       | -                     | Retrieves all websites.                  | None                               | `[{ id: 1, name: 'Website 1' }]` | `404 Not Found`                   | Select from `websites`           |\n| `post-websites`   | `POST /api/websites`      | -                     | Creates a new website.                   | `{ name: string, url: string }`   | `{ id: 1, name: 'Website 1' }`   | `400 Bad Request`                 | Insert into `websites`           |\n| `gsc_connected`    | `GET gsc_connected`       | `GSCConnection`       | Checks GSC connection status.            | None                               | `{ connected: true, ... }`       | `401 Unauthorized`                 | None                              |\n\n---\n\nThis documentation serves as a reference for developers to understand the backend API structure, its routes, and how they relate to the UI components. For further details on specific implementations, please refer to the respective code files.",
    "apis": [
      {
        "method": "GET",
        "path": "/api/health",
        "slug": "get-api-health",
        "purpose": "GET endpoint for /api/health",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "admin-tool/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/api/websites",
        "slug": "get-api-websites",
        "purpose": "GET endpoint for /api/websites",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "admin-tool/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/api/websites/:token",
        "slug": "get-api-websites-token",
        "purpose": "GET endpoint for /api/websites/:token",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "admin-tool/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/api/test-endpoints/:token",
        "slug": "post-api-test-endpoints-token",
        "purpose": "POST endpoint for /api/test-endpoints/:token",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "admin-tool/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/api/websites",
        "slug": "post-api-websites",
        "purpose": "POST endpoint for /api/websites",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "admin-tool/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/api/users",
        "slug": "get-api-users",
        "purpose": "GET endpoint for /api/users",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "admin-tool/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/api/env",
        "slug": "get-api-env",
        "purpose": "GET endpoint for /api/env",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "admin-tool/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/",
        "slug": "get",
        "purpose": "GET endpoint for /",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "admin-tool/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "gsc_connected",
        "slug": "get-gsc-connected",
        "purpose": "GET endpoint for gsc_connected",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/components/GSCConnection.tsx",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "error",
        "slug": "get-error",
        "purpose": "GET endpoint for error",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/components/GSCConnection.tsx",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "details",
        "slug": "get-details",
        "purpose": "GET endpoint for details",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/components/GSCConnection.tsx",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/",
        "slug": "get",
        "purpose": "GET endpoint for /",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_URL",
        "slug": "get-supabase-url",
        "purpose": "GET endpoint for SUPABASE_URL",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/websites/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_SERVICE_ROLE_KEY",
        "slug": "get-supabase-service-role-key",
        "purpose": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/websites/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "Authorization",
        "slug": "get-authorization",
        "purpose": "GET endpoint for Authorization",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/websites/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_URL",
        "slug": "get-supabase-url",
        "purpose": "GET endpoint for SUPABASE_URL",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/publish-article/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_SERVICE_ROLE_KEY",
        "slug": "get-supabase-service-role-key",
        "purpose": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/publish-article/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_URL",
        "slug": "get-supabase-url",
        "purpose": "GET endpoint for SUPABASE_URL",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/get-meta-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_SERVICE_ROLE_KEY",
        "slug": "get-supabase-service-role-key",
        "purpose": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/get-meta-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "token",
        "slug": "get-token",
        "purpose": "GET endpoint for token",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/get-meta-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_URL",
        "slug": "get-supabase-url",
        "purpose": "GET endpoint for SUPABASE_URL",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/get-alt-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_SERVICE_ROLE_KEY",
        "slug": "get-supabase-service-role-key",
        "purpose": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/get-alt-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "token",
        "slug": "get-token",
        "purpose": "GET endpoint for token",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/get-alt-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_URL",
        "slug": "get-supabase-url",
        "purpose": "GET endpoint for SUPABASE_URL",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-image-alt/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_SERVICE_ROLE_KEY",
        "slug": "get-supabase-service-role-key",
        "purpose": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-image-alt/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "OPENAI_API_KEY",
        "slug": "get-openai-api-key",
        "purpose": "GET endpoint for OPENAI_API_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-image-alt/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "OPENAI_API_KEY",
        "slug": "get-openai-api-key",
        "purpose": "GET endpoint for OPENAI_API_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-image-alt/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "OPENAI_API_KEY",
        "slug": "get-openai-api-key",
        "purpose": "GET endpoint for OPENAI_API_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-article/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_URL",
        "slug": "get-supabase-url",
        "purpose": "GET endpoint for SUPABASE_URL",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-article/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_SERVICE_ROLE_KEY",
        "slug": "get-supabase-service-role-key",
        "purpose": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-article/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_URL",
        "slug": "get-supabase-url",
        "purpose": "GET endpoint for SUPABASE_URL",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-meta-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_SERVICE_ROLE_KEY",
        "slug": "get-supabase-service-role-key",
        "purpose": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-meta-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "OPENAI_API_KEY",
        "slug": "get-openai-api-key",
        "purpose": "GET endpoint for OPENAI_API_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-meta-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "content-type",
        "slug": "get-content-type",
        "purpose": "GET endpoint for content-type",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/lib/cms/base-provider.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "mode",
        "slug": "get-mode",
        "purpose": "GET endpoint for mode",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/login/page.tsx",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/manage",
        "slug": "get-manage",
        "purpose": "GET endpoint for /manage",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/subscriptions.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/manage",
        "slug": "post-manage",
        "purpose": "POST endpoint for /manage",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/subscriptions.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/create-checkout-session",
        "slug": "post-create-checkout-session",
        "purpose": "POST endpoint for /create-checkout-session",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/subscriptions.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/webhook",
        "slug": "post-webhook",
        "purpose": "POST endpoint for /webhook",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/subscriptions.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/usage",
        "slug": "get-usage",
        "purpose": "GET endpoint for /usage",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/subscriptions.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/websites",
        "slug": "get-websites",
        "purpose": "GET endpoint for /websites",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/seo.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/websites",
        "slug": "post-websites",
        "purpose": "POST endpoint for /websites",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/seo.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/audit/:websiteId",
        "slug": "get-audit-websiteid",
        "purpose": "GET endpoint for /audit/:websiteId",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/seo.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/crawl/:websiteId",
        "slug": "get-crawl-websiteid",
        "purpose": "GET endpoint for /crawl/:websiteId",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/seo.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/issues/:websiteId",
        "slug": "get-issues-websiteid",
        "purpose": "GET endpoint for /issues/:websiteId",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/seo.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/",
        "slug": "get",
        "purpose": "GET endpoint for /",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/health.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/detailed",
        "slug": "get-detailed",
        "purpose": "GET endpoint for /detailed",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/health.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/ready",
        "slug": "get-ready",
        "purpose": "GET endpoint for /ready",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/health.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/alive",
        "slug": "get-alive",
        "purpose": "GET endpoint for /alive",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/health.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/connection",
        "slug": "get-connection",
        "purpose": "GET endpoint for /connection",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/gsc.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/oauth/start",
        "slug": "get-oauth-start",
        "purpose": "GET endpoint for /oauth/start",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/gsc.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/oauth/callback",
        "slug": "get-oauth-callback",
        "purpose": "GET endpoint for /oauth/callback",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/gsc.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/oauth/refresh",
        "slug": "post-oauth-refresh",
        "purpose": "POST endpoint for /oauth/refresh",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/gsc.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/properties",
        "slug": "get-properties",
        "purpose": "GET endpoint for /properties",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/gsc.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/sync",
        "slug": "post-sync",
        "purpose": "POST endpoint for /sync",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/gsc.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/performance",
        "slug": "get-performance",
        "purpose": "GET endpoint for /performance",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/gsc.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/connections",
        "slug": "get-connections",
        "purpose": "GET endpoint for /connections",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/cms.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/connections",
        "slug": "post-connections",
        "purpose": "POST endpoint for /connections",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/cms.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/connections/:id",
        "slug": "get-connections-id",
        "purpose": "GET endpoint for /connections/:id",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/cms.js",
        "serviceFunction": "handler"
      },
      {
        "method": "DELETE",
        "path": "/connections/:id",
        "slug": "delete-connections-id",
        "purpose": "DELETE endpoint for /connections/:id",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/cms.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/oauth/start",
        "slug": "get-oauth-start",
        "purpose": "GET endpoint for /oauth/start",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/cms.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/oauth/callback/:type",
        "slug": "get-oauth-callback-type",
        "purpose": "GET endpoint for /oauth/callback/:type",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/cms.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/test-connection",
        "slug": "post-test-connection",
        "purpose": "POST endpoint for /test-connection",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/cms.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/login",
        "slug": "post-login",
        "purpose": "POST endpoint for /login",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/auth.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/register",
        "slug": "post-register",
        "purpose": "POST endpoint for /register",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/auth.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/refresh",
        "slug": "post-refresh",
        "purpose": "POST endpoint for /refresh",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/auth.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/me",
        "slug": "get-me",
        "purpose": "GET endpoint for /me",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/auth.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/",
        "slug": "get",
        "purpose": "GET endpoint for /",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/articles.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/generate",
        "slug": "post-generate",
        "purpose": "POST endpoint for /generate",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/articles.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/publish",
        "slug": "post-publish",
        "purpose": "POST endpoint for /publish",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/articles.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/:id",
        "slug": "get-id",
        "purpose": "GET endpoint for /:id",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/articles.js",
        "serviceFunction": "handler"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "slug": "put-id",
        "purpose": "PUT endpoint for /:id",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/articles.js",
        "serviceFunction": "handler"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "slug": "delete-id",
        "purpose": "DELETE endpoint for /:id",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/articles.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "User-Agent",
        "slug": "get-user-agent",
        "purpose": "GET endpoint for User-Agent",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/middleware/logger.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "User-Agent",
        "slug": "get-user-agent",
        "purpose": "GET endpoint for User-Agent",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/middleware/errorHandler.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "site_url",
        "slug": "get-site-url",
        "purpose": "GET endpoint for site_url",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/lib/cms/providers/wordpress.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "user_login",
        "slug": "get-user-login",
        "purpose": "GET endpoint for user_login",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/lib/cms/providers/wordpress.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "password",
        "slug": "get-password",
        "purpose": "GET endpoint for password",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/lib/cms/providers/wordpress.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "shop",
        "slug": "get-shop",
        "purpose": "GET endpoint for shop",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/lib/cms/providers/shopify.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/websites/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/websites/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/websites/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "websiteId",
        "slug": "get-websiteid",
        "purpose": "GET endpoint for websiteId",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/websites/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "websiteUrl",
        "slug": "get-websiteurl",
        "purpose": "GET endpoint for websiteUrl",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "status",
        "slug": "get-status",
        "purpose": "GET endpoint for status",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "limit",
        "slug": "get-limit",
        "purpose": "GET endpoint for limit",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "offset",
        "slug": "get-offset",
        "purpose": "GET endpoint for offset",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/articles/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/websites/switch-info/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "stripe-signature",
        "slug": "get-stripe-signature",
        "purpose": "GET endpoint for stripe-signature",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/subscription/webhook/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/subscription/manage/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/properties/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/connection/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/connection/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "authorization",
        "slug": "get-authorization",
        "purpose": "GET endpoint for authorization",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cron/gsc-sync/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/connections/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/connections/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "connectionId",
        "slug": "get-connectionid",
        "purpose": "GET endpoint for connectionId",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/connections/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/chat/threads/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "siteId",
        "slug": "get-siteid",
        "purpose": "GET endpoint for siteId",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/chat/threads/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/chat/sites/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/chat/messages/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "threadId",
        "slug": "get-threadid",
        "purpose": "GET endpoint for threadId",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/chat/messages/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "authUserId",
        "slug": "get-authuserid",
        "purpose": "GET endpoint for authUserId",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/auth/get-token/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/debug/tables/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/debug/gsc-test/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/start/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/[auditId]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/[auditId]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/[auditId]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/oauth/start/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/oauth/refresh/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "code",
        "slug": "get-code",
        "purpose": "GET endpoint for code",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/oauth/callback/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "state",
        "slug": "get-state",
        "purpose": "GET endpoint for state",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/oauth/callback/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "error",
        "slug": "get-error",
        "purpose": "GET endpoint for error",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/oauth/callback/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "origin",
        "slug": "get-origin",
        "purpose": "GET endpoint for origin",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/oauth/start/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "code",
        "slug": "get-code",
        "purpose": "GET endpoint for code",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/oauth/callback/[type]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "state",
        "slug": "get-state",
        "purpose": "GET endpoint for state",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/oauth/callback/[type]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "error",
        "slug": "get-error",
        "purpose": "GET endpoint for error",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/oauth/callback/[type]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "user_id",
        "slug": "get-user-id",
        "purpose": "GET endpoint for user_id",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/oauth/callback/[type]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "site_url",
        "slug": "get-site-url",
        "purpose": "GET endpoint for site_url",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/oauth/callback/[type]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "user_login",
        "slug": "get-user-login",
        "purpose": "GET endpoint for user_login",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/oauth/callback/[type]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "password",
        "slug": "get-password",
        "purpose": "GET endpoint for password",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/oauth/callback/[type]/route.ts",
        "serviceFunction": "handler"
      }
    ],
    "services": [],
    "middleware": [],
    "authentication": "Custom"
  },
  "database": {
    "overview": "# Database Documentation\n\nThis document provides a comprehensive overview of the database architecture, schema, query patterns, data models, and performance considerations for the project utilizing Supabase as the database solution.\n\n## 1. Database Architecture\n\n### 1.1 Database Type\n- **Type**: Supabase (PostgreSQL)\n- **Hosting**: Supabase provides a managed PostgreSQL database hosted in the cloud.\n\n### 1.2 Connection Details\n- **Client Library**: `@supabase/supabase-js`\n- **SSR Library**: `@supabase/ssr`\n- **Connection String**: The connection string is typically provided in the environment variables and follows the format:\n  ```\n  supabaseUrl = 'https://<project-ref>.supabase.co'\n  supabaseKey = '<anon-key>'\n  ```\n- **Initialization**:\n  ```javascript\n  import { createClient } from '@supabase/supabase-js';\n\n  const supabase = createClient(supabaseUrl, supabaseKey);\n  ```\n\n## 2. Schema Overview\n\n### 2.1 Tables/Collections\nThe following is a high-level overview of the primary tables utilized in the database. Each table includes its purpose and key relationships.\n\n| Table Name             | Description                                      | Relationships                |\n|------------------------|--------------------------------------------------|------------------------------|\n| users                  | Stores user information                          | One-to-many with profiles    |\n| profiles               | Stores user profile details                      | One-to-one with users        |\n| posts                  | Contains blog posts                              | Many-to-one with users       |\n| comments               | Stores comments on posts                         | Many-to-one with posts       |\n| categories             | Categorizes posts                                | Many-to-many with posts      |\n| tags                   | Tags for posts                                   | Many-to-many with posts      |\n| settings               | User-specific settings                          | One-to-one with users        |\n\n### 2.2 Relationships\n- **Users to Profiles**: One-to-one relationship where each user has one profile.\n- **Users to Posts**: One-to-many relationship where each user can create multiple posts.\n- **Posts to Comments**: One-to-many relationship where each post can have multiple comments.\n- **Posts to Categories/Tags**: Many-to-many relationships allowing posts to be categorized and tagged.\n\n## 3. Query Patterns\n\n### 3.1 Data Access\nData is accessed primarily through the following methods:\n\n- **Select Queries**: Fetching data from tables.\n  ```javascript\n  const { data, error } = await supabase\n    .from('posts')\n    .select('*')\n    .eq('user_id', userId);\n  ```\n\n- **Insert Queries**: Adding new records.\n  ```javascript\n  const { data, error } = await supabase\n    .from('posts')\n    .insert([{ title: 'New Post', content: 'Post content', user_id: userId }]);\n  ```\n\n- **Update Queries**: Modifying existing records.\n  ```javascript\n  const { data, error } = await supabase\n    .from('posts')\n    .update({ title: 'Updated Title' })\n    .eq('id', postId);\n  ```\n\n- **Delete Queries**: Removing records.\n  ```javascript\n  const { data, error } = await supabase\n    .from('posts')\n    .delete()\n    .eq('id', postId);\n  ```\n\n### 3.2 Data Modification\nData modification follows RESTful principles, where HTTP methods correspond to CRUD operations.\n\n## 4. Data Models\n\n### 4.1 Structure\nEach table has a defined structure with specific fields. Below are examples of the structure for key tables:\n\n#### Users Table\n| Field Name | Type       | Constraints            |\n|------------|------------|------------------------|\n| id         | UUID       | Primary Key            |\n| email      | VARCHAR    | Unique, Not Null       |\n| password   | VARCHAR    | Not Null               |\n| created_at | TIMESTAMP  | Default: now()         |\n\n#### Posts Table\n| Field Name | Type       | Constraints            |\n|------------|------------|------------------------|\n| id         | UUID       | Primary Key            |\n| title      | VARCHAR    | Not Null               |\n| content    | TEXT       | Not Null               |\n| user_id    | UUID       | Foreign Key (users.id) |\n| created_at | TIMESTAMP  | Default: now()         |\n\n### 4.2 Validation Rules\nValidation rules are enforced at the application level, ensuring that required fields are populated and data types are respected before any database operations are executed.\n\n## 5. Performance Considerations\n\n### 5.1 Indexing\nTo enhance query performance, the following indexes are recommended:\n- Index on `user_id` in the `posts` table to speed up user-specific queries.\n- Index on `post_id` in the `comments` table to optimize comment retrieval for specific posts.\n- Composite indexes on `tags` and `categories` for efficient filtering.\n\n### 5.2 Optimization Techniques\n- **Batch Inserts**: Use batch inserts for adding multiple records to reduce the number of transactions.\n- **Pagination**: Implement pagination for queries that return large datasets to improve load times and reduce server load.\n- **Caching**: Utilize caching strategies for frequently accessed data to minimize database hits.\n\n## 6. Files with Database Queries\n\n### 6.1 File: `src/app/api/admin/check-schema/route.ts`\n- **Queries**: This file contains API routes that check the current database schema against expected configurations.\n\n### 6.2 File: `docs-improved/database-schema.md`\n- **Queries**: This documentation file outlines the database schema in detail, including tables, relationships, and data types.\n\n### 6.3 File: `supabase/migrations/021_cms_content_schemas.sql`\n- **Queries**: This migration file defines the schema for content management, including the creation of tables and relationships.\n\n### 6.4 File: `supabase/migrations/001_initial_schema.sql`\n- **Queries**: This migration file sets up the initial database schema, creating essential tables and establishing primary keys.\n\n## Conclusion\nThis documentation serves as a guide for developers working with the Supabase database in this project. It provides essential information on the architecture, schema, query patterns, data models, and performance considerations necessary for effective database management and application development.",
    "schema": [],
    "queries": [],
    "relationships": "Database relationships to be documented"
  },
  "userFlows": [
    {
      "name": "Landing Page",
      "slug": "landing-page",
      "description": "Main entry point where users first visit the website to learn about the product/service",
      "steps": [
        {
          "action": "Create Account Button",
          "component": "Landing Page",
          "componentSlug": "landing-page",
          "event": "onClick",
          "apiEndpoint": "POST /api/auth/register",
          "apiSlug": "create-account-function",
          "serviceFunction": "createAccount",
          "dbModel": "users",
          "result": "Navigate to signup-page"
        },
        {
          "action": "Login Button",
          "component": "Landing Page",
          "componentSlug": "landing-page",
          "event": "onClick",
          "apiEndpoint": "POST /api/auth/login",
          "apiSlug": "authenticate-user-function",
          "serviceFunction": "authenticateUser",
          "dbModel": "users",
          "result": "Navigate to dashboard"
        }
      ]
    },
    {
      "name": "Dashboard",
      "slug": "dashboard",
      "description": "Main user interface after login where users manage their account and access features",
      "steps": [
        {
          "action": "Profile Settings",
          "component": "Dashboard",
          "componentSlug": "dashboard",
          "event": "onClick",
          "apiEndpoint": "",
          "apiSlug": "",
          "serviceFunction": "",
          "dbModel": "",
          "result": "Navigate to profile-settings"
        },
        {
          "action": "Manage Websites",
          "component": "Dashboard",
          "componentSlug": "dashboard",
          "event": "onClick",
          "apiEndpoint": "",
          "apiSlug": "",
          "serviceFunction": "",
          "dbModel": "",
          "result": "Navigate to website-management"
        }
      ]
    },
    {
      "name": "Login Page",
      "slug": "login-page",
      "description": "Page for users to log into their existing accounts",
      "steps": [
        {
          "action": "Submit Login",
          "component": "Login Page",
          "componentSlug": "login-page",
          "event": "onSubmit",
          "apiEndpoint": "POST /api/auth/login",
          "apiSlug": "authenticate-user-function",
          "serviceFunction": "authenticateUser",
          "dbModel": "users",
          "result": "Navigate to dashboard"
        },
        {
          "action": "Forgot Password Link",
          "component": "Login Page",
          "componentSlug": "login-page",
          "event": "onClick",
          "apiEndpoint": "",
          "apiSlug": "",
          "serviceFunction": "",
          "dbModel": "",
          "result": "Navigate to forgot-password"
        }
      ]
    },
    {
      "name": "Website Management Page",
      "slug": "website-management",
      "description": "Interface for users to manage their websites and SEO settings",
      "steps": [
        {
          "action": "Add New Website",
          "component": "Website Management Page",
          "componentSlug": "website-management",
          "event": "onClick",
          "apiEndpoint": "POST /api/websites",
          "apiSlug": "add-website-function",
          "serviceFunction": "addWebsite",
          "dbModel": "websites",
          "result": "Navigate to add-website"
        },
        {
          "action": "Edit Website",
          "component": "Website Management Page",
          "componentSlug": "website-management",
          "event": "onClick",
          "apiEndpoint": "",
          "apiSlug": "",
          "serviceFunction": "",
          "dbModel": "",
          "result": "Navigate to edit-website"
        }
      ]
    },
    {
      "name": "Terms Page",
      "slug": "terms-page",
      "description": "Page displaying the terms of service for the application",
      "steps": []
    },
    {
      "name": "Privacy Page",
      "slug": "privacy-page",
      "description": "Page detailing the privacy policy of the application",
      "steps": []
    },
    {
      "name": "Debug SEO Page",
      "slug": "debug-seo-page",
      "description": "Page for users to test and debug SEO settings",
      "steps": [
        {
          "action": "Test SEO Settings",
          "component": "Debug SEO Page",
          "componentSlug": "debug-seo-page",
          "event": "onClick",
          "apiEndpoint": "POST /api/test-endpoints/:token",
          "apiSlug": "test-seo-settings-function",
          "serviceFunction": "testSeoSettings",
          "dbModel": "websites",
          "result": "Navigate to debug-results"
        }
      ]
    }
  ],
  "architectureDiagram": "\ngraph TB\n    %% Frontend Layer\n    subgraph \"Frontend Layer\"\n        FE0[\"AuthProvider\"]\n        FE1[\"WebsiteManagement\"]\n        FE2[\"UsageDashboard\"]\n        FE3[\"UpgradeBadge\"]\n        FE4[\"ThemeToggle\"]\n        FE5[\"SubscriptionManager\"]\n        FE6[\"SocialProof\"]\n        FE7[\"SnippetModal\"]\n    end\n    \n    %% Backend Layer\n    subgraph \"Backend Layer\"\n        BE0[\"server\"]\n        BE1[\"GSCConnection\"]\n        BE2[\"index\"]\n        BE3[\"base-provider\"]\n        BE4[\"page\"]\n        BE5[\"subscriptions\"]\n    end\n    \n    %% Database Layer\n    subgraph \"Database Layer\"\n        DB0[\"Supabase\"]\n    end\n    \n    %% External Services\n    subgraph \"External Services\"\n        EXT0[\"@supabase/ssr\"]\n        EXT1[\"@supabase/supabase-js\"]\n        EXT2[\"stripe\"]\n    end\n    \n    %% Connections\n    FE0 --> BE0\n    FE1 --> BE1\n    FE2 --> BE2\n    FE3 --> BE3\n    FE4 --> BE4\n    FE5 --> BE5\n    FE6 --> BE0\n    FE7 --> BE1\n    BE0 --> DB0\n    BE1 --> DB0\n    BE2 --> DB0\n    BE3 --> DB0\n    BE4 --> DB0\n    BE5 --> DB0\n    BE0 --> EXT0\n    BE0 --> EXT1\n    BE0 --> EXT2\n    BE1 --> EXT0\n    BE1 --> EXT1\n    BE1 --> EXT2\n    BE2 --> EXT0\n    BE2 --> EXT1\n    BE2 --> EXT2\n    \n    %% Styling\n    classDef frontend fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef backend fill:#f3e5f5,stroke:#4a148c,stroke-width:2px\n    classDef database fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px\n    classDef external fill:#fff3e0,stroke:#e65100,stroke-width:2px\n    \n    class FE0 frontend\n    class FE1 frontend\n    class FE2 frontend\n    class FE3 frontend\n    class FE4 frontend\n    class FE5 frontend\n    class FE6 frontend\n    class FE7 frontend\n    class BE0 backend\n    class BE1 backend\n    class BE2 backend\n    class BE3 backend\n    class BE4 backend\n    class BE5 backend\n    class DB0 database\n    class EXT0 external\n    class EXT1 external\n    class EXT2 external\n",
  "apiDocumentation": [
    {
      "endpoint": "/api/health",
      "method": "GET",
      "description": "GET endpoint for /api/health",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /api/health",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/api/websites",
      "method": "GET",
      "description": "List websites managed by the user",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /api/websites",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/api/websites/:token",
      "method": "GET",
      "description": "List websites managed by the user",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /api/websites/:token",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/api/test-endpoints/:token",
      "method": "POST",
      "description": "POST endpoint for /api/test-endpoints/:token",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /api/test-endpoints/:token",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/api/websites",
      "method": "POST",
      "description": "Add new website to management",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /api/websites",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/api/users",
      "method": "GET",
      "description": "Retrieve user account information",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /api/users",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/api/env",
      "method": "GET",
      "description": "GET endpoint for /api/env",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /api/env",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/",
      "method": "GET",
      "description": "GET endpoint for /",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "gsc_connected",
      "method": "GET",
      "description": "GET endpoint for gsc_connected",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET gsc_connected",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "error",
      "method": "GET",
      "description": "GET endpoint for error",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET error",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "details",
      "method": "GET",
      "description": "GET endpoint for details",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET details",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/",
      "method": "GET",
      "description": "GET endpoint for /",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_URL",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_URL",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_URL",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_SERVICE_ROLE_KEY",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_SERVICE_ROLE_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "Authorization",
      "method": "GET",
      "description": "GET endpoint for Authorization",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET Authorization",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_URL",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_URL",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_URL",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_SERVICE_ROLE_KEY",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_SERVICE_ROLE_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_URL",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_URL",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_URL",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_SERVICE_ROLE_KEY",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_SERVICE_ROLE_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "token",
      "method": "GET",
      "description": "GET endpoint for token",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET token",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_URL",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_URL",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_URL",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_SERVICE_ROLE_KEY",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_SERVICE_ROLE_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "token",
      "method": "GET",
      "description": "GET endpoint for token",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET token",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_URL",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_URL",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_URL",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_SERVICE_ROLE_KEY",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_SERVICE_ROLE_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "OPENAI_API_KEY",
      "method": "GET",
      "description": "GET endpoint for OPENAI_API_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET OPENAI_API_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "OPENAI_API_KEY",
      "method": "GET",
      "description": "GET endpoint for OPENAI_API_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET OPENAI_API_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "OPENAI_API_KEY",
      "method": "GET",
      "description": "GET endpoint for OPENAI_API_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET OPENAI_API_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_URL",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_URL",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_URL",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_SERVICE_ROLE_KEY",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_SERVICE_ROLE_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_URL",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_URL",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_URL",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_SERVICE_ROLE_KEY",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_SERVICE_ROLE_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "OPENAI_API_KEY",
      "method": "GET",
      "description": "GET endpoint for OPENAI_API_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET OPENAI_API_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "content-type",
      "method": "GET",
      "description": "GET endpoint for content-type",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET content-type",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "mode",
      "method": "GET",
      "description": "GET endpoint for mode",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET mode",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/manage",
      "method": "GET",
      "description": "GET endpoint for /manage",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /manage",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/manage",
      "method": "POST",
      "description": "POST endpoint for /manage",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /manage",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/create-checkout-session",
      "method": "POST",
      "description": "POST endpoint for /create-checkout-session",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /create-checkout-session",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/webhook",
      "method": "POST",
      "description": "POST endpoint for /webhook",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /webhook",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/usage",
      "method": "GET",
      "description": "GET endpoint for /usage",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /usage",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/websites",
      "method": "GET",
      "description": "List websites managed by the user",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /websites",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/websites",
      "method": "POST",
      "description": "Add new website to management",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /websites",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/audit/:websiteId",
      "method": "GET",
      "description": "GET endpoint for /audit/:websiteId",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /audit/:websiteId",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/crawl/:websiteId",
      "method": "GET",
      "description": "GET endpoint for /crawl/:websiteId",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /crawl/:websiteId",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/issues/:websiteId",
      "method": "GET",
      "description": "GET endpoint for /issues/:websiteId",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /issues/:websiteId",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/",
      "method": "GET",
      "description": "GET endpoint for /",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/detailed",
      "method": "GET",
      "description": "GET endpoint for /detailed",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /detailed",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/ready",
      "method": "GET",
      "description": "GET endpoint for /ready",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /ready",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/alive",
      "method": "GET",
      "description": "GET endpoint for /alive",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /alive",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/connection",
      "method": "GET",
      "description": "GET endpoint for /connection",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /connection",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/oauth/start",
      "method": "GET",
      "description": "GET endpoint for /oauth/start",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /oauth/start",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/oauth/callback",
      "method": "GET",
      "description": "GET endpoint for /oauth/callback",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /oauth/callback",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/oauth/refresh",
      "method": "POST",
      "description": "POST endpoint for /oauth/refresh",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /oauth/refresh",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/properties",
      "method": "GET",
      "description": "GET endpoint for /properties",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /properties",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/sync",
      "method": "POST",
      "description": "POST endpoint for /sync",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /sync",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/performance",
      "method": "GET",
      "description": "GET endpoint for /performance",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /performance",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/connections",
      "method": "GET",
      "description": "GET endpoint for /connections",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /connections",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/connections",
      "method": "POST",
      "description": "POST endpoint for /connections",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /connections",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/connections/:id",
      "method": "GET",
      "description": "GET endpoint for /connections/:id",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /connections/:id",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/connections/:id",
      "method": "DELETE",
      "description": "DELETE endpoint for /connections/:id",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "DELETE /connections/:id",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/oauth/start",
      "method": "GET",
      "description": "GET endpoint for /oauth/start",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /oauth/start",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/oauth/callback/:type",
      "method": "GET",
      "description": "GET endpoint for /oauth/callback/:type",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /oauth/callback/:type",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/test-connection",
      "method": "POST",
      "description": "POST endpoint for /test-connection",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /test-connection",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/login",
      "method": "POST",
      "description": "POST endpoint for /login",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /login",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/register",
      "method": "POST",
      "description": "POST endpoint for /register",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /register",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/refresh",
      "method": "POST",
      "description": "POST endpoint for /refresh",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /refresh",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/me",
      "method": "GET",
      "description": "GET endpoint for /me",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /me",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/",
      "method": "GET",
      "description": "GET endpoint for /",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/generate",
      "method": "POST",
      "description": "POST endpoint for /generate",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /generate",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/publish",
      "method": "POST",
      "description": "POST endpoint for /publish",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /publish",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/:id",
      "method": "GET",
      "description": "GET endpoint for /:id",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /:id",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/:id",
      "method": "PUT",
      "description": "PUT endpoint for /:id",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "PUT /:id",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/:id",
      "method": "DELETE",
      "description": "DELETE endpoint for /:id",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "DELETE /:id",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "User-Agent",
      "method": "GET",
      "description": "GET endpoint for User-Agent",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET User-Agent",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "User-Agent",
      "method": "GET",
      "description": "GET endpoint for User-Agent",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET User-Agent",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "site_url",
      "method": "GET",
      "description": "GET endpoint for site_url",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET site_url",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "user_login",
      "method": "GET",
      "description": "GET endpoint for user_login",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET user_login",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "password",
      "method": "GET",
      "description": "GET endpoint for password",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET password",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "shop",
      "method": "GET",
      "description": "GET endpoint for shop",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET shop",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "websiteId",
      "method": "GET",
      "description": "GET endpoint for websiteId",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET websiteId",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "websiteUrl",
      "method": "GET",
      "description": "GET endpoint for websiteUrl",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET websiteUrl",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "status",
      "method": "GET",
      "description": "GET endpoint for status",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET status",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "limit",
      "method": "GET",
      "description": "GET endpoint for limit",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET limit",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "offset",
      "method": "GET",
      "description": "GET endpoint for offset",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET offset",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "stripe-signature",
      "method": "GET",
      "description": "GET endpoint for stripe-signature",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET stripe-signature",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "authorization",
      "method": "GET",
      "description": "GET endpoint for authorization",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET authorization",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "connectionId",
      "method": "GET",
      "description": "GET endpoint for connectionId",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET connectionId",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "siteId",
      "method": "GET",
      "description": "GET endpoint for siteId",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET siteId",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "threadId",
      "method": "GET",
      "description": "GET endpoint for threadId",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET threadId",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "authUserId",
      "method": "GET",
      "description": "GET endpoint for authUserId",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET authUserId",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "code",
      "method": "GET",
      "description": "GET endpoint for code",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET code",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "state",
      "method": "GET",
      "description": "GET endpoint for state",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET state",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "error",
      "method": "GET",
      "description": "GET endpoint for error",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET error",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "origin",
      "method": "GET",
      "description": "GET endpoint for origin",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET origin",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "code",
      "method": "GET",
      "description": "GET endpoint for code",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET code",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "state",
      "method": "GET",
      "description": "GET endpoint for state",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET state",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "error",
      "method": "GET",
      "description": "GET endpoint for error",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET error",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "user_id",
      "method": "GET",
      "description": "GET endpoint for user_id",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET user_id",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "site_url",
      "method": "GET",
      "description": "GET endpoint for site_url",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET site_url",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "user_login",
      "method": "GET",
      "description": "GET endpoint for user_login",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET user_login",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "password",
      "method": "GET",
      "description": "GET endpoint for password",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET password",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    }
  ],
  "deploymentGuide": "# Deployment Guide\n\nThis guide provides comprehensive instructions for deploying the project on Vercel and a Generic Node.js environment. Follow the steps below to ensure a successful deployment.\n\n## 1. Prerequisites\n\nBefore deploying the application, ensure you have the following tools and accounts:\n\n### Tools\n- **Node.js**: Version 14.x or higher. You can download it from [Node.js Official Website](https://nodejs.org/).\n- **npm**: Comes bundled with Node.js.\n- **Git**: For version control. Install from [Git Official Website](https://git-scm.com/).\n\n### Accounts\n- **Vercel Account**: Sign up at [Vercel](https://vercel.com/signup) if deploying on Vercel.\n- **Supabase Account**: Create an account at [Supabase](https://supabase.io/) to manage your database.\n\n## 2. Environment Setup\n\n### Environment Variables\nCreate a `.env` file in the root of your project and configure the following environment variables:\n\n```plaintext\nSUPABASE_URL=<your_supabase_url>\nSUPABASE_ANON_KEY=<your_supabase_anon_key>\nSTRIPE_SECRET_KEY=<your_stripe_secret_key>\nGOOGLE_API_KEY=<your_google_api_key>\nOPENAI_API_KEY=<your_openai_api_key>\n```\n\n> **Note**: Replace `<your_supabase_url>`, `<your_supabase_anon_key>`, etc., with your actual credentials.\n\n### Configuration\nEnsure that your Supabase database is set up correctly and that you have the necessary tables and schemas in place.\n\n## 3. Build Process\n\nTo build the application, use the following commands:\n\n1. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n2. **Run Linting** (optional but recommended):\n   ```bash\n   npm run lint\n   ```\n\n3. **Build the Application**:\n   ```bash\n   npm run build\n   ```\n\n## 4. Deployment Steps\n\n### A. Deploying on Vercel\n\n1. **Login to Vercel**:\n   ```bash\n   npx vercel login\n   ```\n\n2. **Deploy the Application**:\n   ```bash\n   npx vercel\n   ```\n\n   Follow the prompts to select your project and configure the deployment settings. Vercel will automatically detect your framework and set up the necessary configurations.\n\n3. **Set Environment Variables in Vercel**:\n   After deployment, go to your Vercel dashboard, select your project, and navigate to the \"Settings\" tab. Under \"Environment Variables\", add the variables defined in your `.env` file.\n\n### B. Deploying on Generic Node.js\n\n1. **Clone the Repository**:\n   ```bash\n   git clone <repository-url>\n   cd <repository-name>\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n3. **Run Database Migrations**:\n   ```bash\n   npm run run-migration\n   ```\n\n4. **Start the Application**:\n   ```bash\n   npm start\n   ```\n\n   Ensure that your server is running on the desired port (default is 3000).\n\n## 5. Post-Deployment\n\n### Verification\nAfter deployment, verify that the application is running correctly:\n\n- **Vercel**: Visit the URL provided by Vercel after deployment.\n- **Node.js**: Open a browser and navigate to `http://localhost:3000` (or the port you specified).\n\n### Monitoring\n- Use tools like [LogRocket](https://logrocket.com/) or [Sentry](https://sentry.io/) for monitoring application performance and error tracking.\n- Check the Supabase dashboard for database activity and logs.\n\n## 6. Troubleshooting\n\n### Common Deployment Issues\n\n- **Environment Variables Not Set**: Ensure all required environment variables are correctly set in your deployment platform.\n- **Database Connection Errors**: Verify your Supabase credentials and ensure the database is accessible.\n- **Build Failures**: Check the build logs for errors. Common issues include missing dependencies or incorrect configurations.\n- **Application Not Starting**: Ensure that the correct start script is being used and that no other processes are using the same port.\n\n### Additional Commands\n- **Run Database Audit**:\n   ```bash\n   npm run audit-db\n   ```\n\n- **Initialize SEO Agent**:\n   ```bash\n   npm run init-seoagent\n   ```\n\n- **Setup Stripe Products**:\n   ```bash\n   npm run setup-stripe\n   ```\n\n- **Test Webhook**:\n   ```bash\n   npm run test-webhook\n   ```\n\n- **Admin Tool Setup**:\n   ```bash\n   cd admin-tool\n   npm install\n   npm start\n   ```\n\nBy following this guide, you should be able to successfully deploy and manage your application on both Vercel and a Generic Node.js environment. For further assistance, refer to the documentation of the respective platforms or reach out to the community forums.",
  "troubleshooting": "# Troubleshooting Guide\n\nThis troubleshooting guide is designed to help developers diagnose and resolve common issues encountered while working with a project built using React, Next.js, and Express. The guide is organized into several categories, each addressing specific types of problems.\n\n## Table of Contents\n1. [Common Setup Issues](#common-setup-issues)\n2. [Build Errors](#build-errors)\n3. [Runtime Errors](#runtime-errors)\n4. [Performance Issues](#performance-issues)\n5. [Database Connectivity](#database-connectivity)\n6. [API Integration](#api-integration)\n7. [Deployment Issues](#deployment-issues)\n\n---\n\n## Common Setup Issues\n\n### Symptoms and Error Messages\n- Errors during `npm install` or `yarn install`\n- Missing environment variables\n- Unable to start the development server\n\n### Root Cause Analysis\n- Incorrect Node.js version\n- Missing dependencies or incorrect versions\n- Misconfigured environment variables\n\n### Step-by-Step Solutions\n1. **Check Node.js Version**: Ensure you are using the correct version of Node.js as specified in the project documentation.\n   ```bash\n   node -v\n   ```\n   If necessary, switch versions using a version manager like `nvm`.\n\n2. **Install Dependencies**: Run the following command to install all dependencies:\n   ```bash\n   npm install\n   ```\n   or\n   ```bash\n   yarn install\n   ```\n\n3. **Configure Environment Variables**: Create a `.env` file in the root directory and add the required environment variables. Refer to the `.env.example` file for guidance.\n\n4. **Start the Development Server**: Use the following command to start the server:\n   ```bash\n   npm run dev\n   ```\n\n### Prevention Strategies\n- Maintain a `.nvmrc` file to specify the Node.js version.\n- Document required environment variables clearly in the README file.\n- Regularly update dependencies and test the setup process.\n\n---\n\n## Build Errors\n\n### Symptoms and Error Messages\n- Errors during the build process\n- Warnings about missing modules\n- \"Module not found\" errors\n\n### Root Cause Analysis\n- Incorrect import paths\n- Missing dependencies\n- Misconfigured Webpack or Babel settings\n\n### Step-by-Step Solutions\n1. **Check Import Paths**: Verify that all import statements use the correct relative paths.\n   ```javascript\n   import MyComponent from './components/MyComponent'; // Ensure the path is correct\n   ```\n\n2. **Install Missing Dependencies**: If you encounter a \"Module not found\" error, install the missing package:\n   ```bash\n   npm install <missing-package>\n   ```\n\n3. **Review Build Configuration**: Check `next.config.js` and `.babelrc` for any misconfigurations.\n\n4. **Clear Cache**: Sometimes, clearing the cache can resolve build issues:\n   ```bash\n   npm run clean\n   ```\n\n### Prevention Strategies\n- Use TypeScript for type safety to catch errors early.\n- Regularly run builds in a CI/CD pipeline to catch issues before deployment.\n\n---\n\n## Runtime Errors\n\n### Symptoms and Error Messages\n- Application crashes with stack traces\n- Uncaught exceptions in the console\n- Blank pages or infinite loading\n\n### Root Cause Analysis\n- Unhandled exceptions in the code\n- Issues with state management or asynchronous calls\n- Incorrect API responses\n\n### Step-by-Step Solutions\n1. **Check Console Logs**: Inspect the browser console for error messages and stack traces.\n\n2. **Debug the Code**: Use breakpoints or `console.log` statements to identify the source of the error.\n\n3. **Handle Exceptions**: Ensure that all asynchronous calls are wrapped in try-catch blocks.\n   ```javascript\n   try {\n       const response = await fetch('/api/data');\n   } catch (error) {\n       console.error('Error fetching data:', error);\n   }\n   ```\n\n4. **Review State Management**: Ensure that state updates are handled correctly, especially in React components.\n\n### Prevention Strategies\n- Implement error boundaries in React components to catch rendering errors.\n- Write unit tests for critical components and functions.\n\n---\n\n## Performance Issues\n\n### Symptoms and Error Messages\n- Slow loading times\n- High memory usage\n- Unresponsive UI\n\n### Root Cause Analysis\n- Large bundle sizes\n- Inefficient rendering or state updates\n- Unoptimized images or assets\n\n### Step-by-Step Solutions\n1. **Analyze Bundle Size**: Use tools like Webpack Bundle Analyzer to identify large dependencies.\n   ```bash\n   npm run analyze\n   ```\n\n2. **Optimize Images**: Use image optimization techniques or libraries like `next/image` for automatic optimization.\n\n3. **Implement Code Splitting**: Use dynamic imports to load components only when needed.\n   ```javascript\n   const MyComponent = dynamic(() => import('./MyComponent'));\n   ```\n\n4. **Profile React Components**: Use React's built-in Profiler to identify performance bottlenecks.\n\n### Prevention Strategies\n- Regularly audit dependencies for size and performance.\n- Follow best practices for React performance optimization.\n\n---\n\n## Database Connectivity\n\n### Symptoms and Error Messages\n- Connection timeout errors\n- Query failures\n- Data not being saved or retrieved\n\n### Root Cause Analysis\n- Incorrect database configuration\n- Network issues\n- Insufficient permissions\n\n### Step-by-Step Solutions\n1. **Check Database Configuration**: Verify the database connection string in your environment variables.\n   ```plaintext\n   DATABASE_URL=postgres://user:password@host:port/dbname\n   ```\n\n2. **Test Connection**: Use a database client to test the connection using the same credentials.\n\n3. **Review Query Logic**: Ensure that your queries are correctly structured and that the necessary tables exist.\n\n4. **Check Permissions**: Ensure that the database user has the required permissions to perform the operations.\n\n### Prevention Strategies\n- Use connection pooling to manage database connections efficiently.\n- Implement logging for database queries to monitor performance and errors.\n\n---\n\n## API Integration\n\n### Symptoms and Error Messages\n- API call failures\n- Unexpected responses\n- Rate limiting errors\n\n### Root Cause Analysis\n- Incorrect API endpoints\n- Authentication issues\n- Rate limits exceeded\n\n### Step-by-Step Solutions\n1. **Verify API Endpoints**: Ensure that the API endpoints are correct and accessible.\n   ```javascript\n   const response = await fetch('https://api.example.com/data');\n   ```\n\n2. **Check API Keys**: Ensure that the correct API keys are being used and are valid.\n\n3. **Handle Rate Limiting**: Implement exponential backoff for retrying failed requests due to rate limits.\n\n4. **Inspect API Responses**: Log the responses to understand the structure and any errors returned by the API.\n\n### Prevention Strategies\n- Use environment variables to manage API keys securely.\n- Write integration tests to validate API interactions.\n\n---\n\n## Deployment Issues\n\n### Symptoms and Error Messages\n- Application not starting in production\n- Environment variable issues\n- 404 errors for static assets\n\n### Root Cause Analysis\n- Misconfigured production environment\n- Missing build artifacts\n- Incorrect routing or asset paths\n\n### Step-by-Step Solutions\n1. **Check Deployment Logs**: Review logs from your hosting provider for error messages.\n\n2. **Verify Environment Variables**: Ensure that all required environment variables are set in the production environment.\n\n3. **Build the Application**: Ensure that the application is built before deployment:\n   ```bash\n   npm run build\n   ```\n\n4. **Check Static Asset Paths**: Ensure that static assets are correctly referenced in the application.\n\n### Prevention Strategies\n- Use CI/CD pipelines to automate the deployment process.\n- Regularly test the production build locally before deploying.\n\n---\n\nThis troubleshooting guide aims to provide developers with the necessary tools and strategies to effectively diagnose and resolve issues in a React, Next.js, and Express application. For further assistance, please refer to the project's documentation or community support channels."
}