{
  "overview": "# Project Overview for seoagent-nextjs\n\n## What This Application Does\nThe **seoagent-nextjs** application is designed to help users optimize their online content for search engines, making it easier for potential customers to find them. Whether you're a small business owner, a content creator, or a digital marketer, this tool simplifies the process of improving your website's visibility. With features that analyze your content and suggest enhancements, users can create SEO-friendly articles and web pages that attract more visitors. What sets this application apart is its seamless integration of advanced technologies, making it user-friendly and effective without requiring any technical expertise.\n\n## How It Works (Simple Explanation)\nWhen you use the seoagent-nextjs application, you start by entering your content into the platform. The application then analyzes your text and provides suggestions to improve its search engine ranking. The user experience is designed to be intuitive, guiding you through the optimization process step-by-step. Information flows smoothly through the system, where your input is processed, and actionable insights are generated in real-time, allowing you to make immediate improvements to your content.\n\n## Key Features & Capabilities\n- **Content Optimization**: Analyze and enhance your articles for better search engine performance.\n- **User-Friendly Interface**: Navigate easily through the application with a straightforward design.\n- **Real-Time Suggestions**: Receive instant feedback on your content, enabling quick adjustments.\n- **SEO Analytics**: Track the effectiveness of your optimizations over time.\n- **Support for Various Content Types**: Whether it's blog posts, product descriptions, or landing pages, the application can handle diverse content formats.\n- **Collaboration Tools**: Work with team members to refine content and share insights.\n\n## Technology Overview (Friendly)\nThe seoagent-nextjs application is built using a powerful combination of **React**, **Next.js**, and **Express**. These technologies were chosen for their ability to create fast, responsive applications that provide a smooth user experience. React allows for dynamic content updates, while Next.js enhances performance with server-side rendering, ensuring that your content loads quickly. Express serves as the backend framework, managing requests and data efficiently. Together, these technologies create a cohesive system that works seamlessly to deliver valuable SEO insights to users, making the optimization process both effective and enjoyable. \n\nBy leveraging this modern tech stack, the application not only meets the needs of users today but is also scalable for future enhancements, ensuring that you always have the best tools at your fingertips.",
  "gettingStarted": "# Getting Started with seoagent-nextjs\n\n## Welcome to seoagent-nextjs\nWelcome to **seoagent-nextjs**, a powerful web application designed to help users optimize their SEO strategies effectively. This application leverages the capabilities of React, Next.js, and Express to provide a seamless experience for managing SEO tasks. Whether you're a digital marketer, a small business owner, or a developer looking to enhance your website's visibility, seoagent-nextjs is tailored for you.\n\n## 🚀 Quick Start (5 Minutes)\nFollow these simple steps to get your account set up and start using the application:\n\n### 1. Create Your Account\n1. Visit the application at [your-app-url].\n2. Click the **Sign Up** button located on the homepage.\n3. Enter your email address and a secure password.\n4. Check your email for a verification link and follow the instructions to verify your account (if required).\n\n### 2. First Login\n1. Return to the application and click on **Sign In**.\n2. Enter your registered email and password.\n3. Complete any onboarding steps that may appear to help you get acquainted with the application.\n\n### 3. Navigate to Dashboard\n1. Once logged in, you will be directed to your main dashboard.\n2. Take a moment to familiarize yourself with the layout and available features.\n3. Explore sections such as \"SEO Analysis,\" \"Keyword Tracking,\" and \"Reports.\"\n\n### 4. Start Using Key Features\n- **SEO Analysis**: Begin by running an SEO analysis on your website. This will provide insights into areas that need improvement.\n- **Keyword Tracking**: Add keywords relevant to your business to monitor their performance over time.\n- **Reports**: Generate your first report to visualize your SEO progress and share it with your team.\n\n## 📋 Detailed Setup Guide\nTo ensure a smooth experience with seoagent-nextjs, please follow these detailed setup instructions:\n\n### System Requirements\n- **Node.js**: Version 14.x or higher\n- **npm**: Version 6.x or higher\n- **Database**: Supabase (for authentication and data storage)\n\n### Browser Compatibility\n- Google Chrome (latest version)\n- Mozilla Firefox (latest version)\n- Safari (latest version)\n- Microsoft Edge (latest version)\n\n### Initial Configuration Steps\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/your-repo/seagent-nextjs.git\n   cd seoagent-nextjs\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n3. **Set Up Environment Variables**:\n   Create a `.env` file in the root directory and add the following variables:\n   ```plaintext\n   SUPABASE_URL=your_supabase_url\n   SUPABASE_ANON_KEY=your_supabase_anon_key\n   STRIPE_SECRET_KEY=your_stripe_secret_key\n   OPENAI_API_KEY=your_openai_api_key\n   ```\n\n4. **Run the Development Server**:\n   ```bash\n   npm run dev\n   ```\n   Open your browser and navigate to `http://localhost:3000` to access the application.\n\n### Common Setup Issues\n- **Error: \"Cannot connect to Supabase\"**: Ensure your Supabase URL and keys are correctly set in the `.env` file.\n- **Port Already in Use**: If you encounter a port conflict, change the port in the `package.json` scripts or terminate the process using that port.\n\n## 🎯 Next Steps\nNow that you have your account set up and are familiar with the dashboard, consider exploring the following features:\n\n- **Integrate with Google Analytics**: Connect your Google Analytics account to track user behavior on your site.\n- **Utilize the API**: Check the API documentation for advanced integrations and custom functionalities.\n- **Explore Tutorials**: Visit the documentation section for in-depth tutorials on optimizing your SEO strategies.\n\nThank you for choosing seoagent-nextjs! We’re excited to help you enhance your SEO efforts. If you have any questions or need assistance, don’t hesitate to reach out to our support team. Happy optimizing!",
  "userGuide": "# seoagent-nextjs User Guide\n\n## Overview\nThe `seoagent-nextjs` application is designed to assist users in managing and optimizing their websites for search engines. Built using React, Next.js, and Express, this application provides a user-friendly interface for monitoring website health, managing content, and implementing SEO strategies. Users can navigate through various features to enhance their website's visibility and performance.\n\n---\n\n## 📄 App\n\n### What You See\nWhen you visit the App page, you are greeted with a clean interface that serves as the central hub for navigating the application. The layout is intuitive, allowing users to easily find the features they need.\n\n### What You Can Do\n- View information about the application.\n- Navigate to different sections of the application.\n\n**Related API**: [`/api/app`](api-reference.md#app)\n\n---\n\n## 📄 Layout\n\n### What You See\nThe Layout page presents a structured view of the application’s components. Users can see how different elements are arranged and interact with them seamlessly.\n\n### What You Can Do\n- View the overall layout of the application.\n- Navigate to various features based on the layout structure.\n\n**Related API**: [`/api/layout`](api-reference.md#layout)\n\n---\n\n## 📄 Website Health Overview\n\n### What You See\nOn the Website Health Overview page, users can view a summary of their website's performance metrics, including loading speed, mobile responsiveness, and SEO scores.\n\n### What You Can Do\n- Analyze the health metrics of your website.\n- Identify areas for improvement based on the provided data.\n\n**Related API**: [`/api/website-health`](api-reference.md#website-health)\n\n---\n\n## 📄 Upgrade Badge\n\n### What You See\nThe Upgrade Badge page displays information regarding available upgrades for the application, highlighting new features and enhancements.\n\n### What You Can Do\n- Review upgrade options.\n- Navigate to the upgrade section to enhance your application experience.\n\n**Related API**: [`/api/upgrade-badge`](api-reference.md#upgrade-badge)\n\n---\n\n## 📄 Protected Route\n\n### What You See\nWhen accessing the Protected Route page, users are informed that certain features require authentication or specific permissions.\n\n### What You Can Do\n- Understand the requirements for accessing protected features.\n- Navigate back to the main application or login if necessary.\n\n**Related API**: [`/api/protected-route`](api-reference.md#protected-route)\n\n---\n\n## 📄 Feature Gate\n\n### What You See\nThe Feature Gate page outlines the features that are currently enabled or disabled for your account, providing insights into available functionalities.\n\n### What You Can Do\n- View which features are accessible.\n- Request access to additional features if applicable.\n\n**Related API**: [`/api/feature-gate`](api-reference.md#feature-gate)\n\n---\n\n## 📄 Strapi Bzx SP0n3\n\n### What You See\nThe Strapi Bzx SP0n3 page provides an interface for managing content connected to the Strapi CMS.\n\n### What You Can Do\n- View and manage content related to your website.\n- Navigate to content creation or editing sections.\n\n**Related API**: [`/api/strapi-bzx`](api-reference.md#strapi-bzx)\n\n---\n\n## 📄 Terms\n\n### What You See\nThe Terms page outlines the terms of service for using the application, ensuring users are informed about their rights and responsibilities.\n\n### What You Can Do\n- Read the terms of service.\n- Navigate to related legal documents if necessary.\n\n**Related API**: [`/api/terms`](api-reference.md#terms)\n\n---\n\n## 📄 Strategy\n\n### What You See\nThe Strategy page presents various SEO strategies and recommendations tailored to your website's needs.\n\n### What You Can Do\n- Review suggested strategies for improving SEO.\n- Implement recommended actions directly from the page.\n\n**Related API**: [`/api/strategy`](api-reference.md#strategy)\n\n---\n\n## 📄 Privacy\n\n### What You See\nOn the Privacy page, users can review the privacy policy detailing how their data is collected, used, and protected.\n\n### What You Can Do\n- Understand your privacy rights.\n- Navigate to data management options if applicable.\n\n**Related API**: [`/api/privacy`](api-reference.md#privacy)\n\n---\n\n## 📄 Login\n\n### What You See\nThe Login page allows users to enter their credentials to access their accounts securely.\n\n### What You Can Do\n- Enter your username and password to log in.\n- Recover your password if you forget it.\n\n**Related API**: [`/api/login`](api-reference.md#login)\n\n---\n\n## 📄 Keywords\n\n### What You See\nThe Keywords page displays a list of keywords relevant to your website's SEO strategy.\n\n### What You Can Do\n- Add, edit, or remove keywords.\n- Analyze keyword performance and relevance.\n\n**Related API**: [`/api/keywords`](api-reference.md#keywords)\n\n---\n\n## 📄 Debug Seo\n\n### What You See\nThe Debug SEO page provides tools and insights for troubleshooting SEO-related issues on your website.\n\n### What You Can Do\n- Run diagnostics on your website's SEO.\n- View detailed reports and suggestions for improvements.\n\n### Navigation Options\nFrom this page, you can navigate to:\n- [App](#app)\n\n**Related API**: [`/api/debug-seo`](api-reference.md#debug-seo)\n\n---\n\n## 📄 Dashboard\n\n### What You See\nThe Dashboard page presents an overview of key metrics and performance indicators for your website.\n\n### What You Can Do\n- Monitor website performance at a glance.\n- Access detailed reports and analytics.\n\n**Related API**: [`/api/dashboard`](api-reference.md#dashboard)\n\n---\n\n## 📄 Content Writer\n\n### What You See\nThe Content Writer page provides tools for creating and editing content for your website.\n\n### What You Can Do\n- Write and format articles or blog posts.\n- Save drafts or publish content directly.\n\n### Navigation Options\nFrom this page, you can navigate to:\n- [Cms Connections](#cms-connections)\n\n**Related API**: [`/api/content-writer`](api-reference.md#content-writer)\n\n---\n\n## 📄 Cms Connections\n\n### What You See\nThe Cms Connections page allows users to manage connections to various content management systems.\n\n### What You Can Do\n- Add or remove CMS connections.\n- Configure settings for each connected CMS.\n\n**Related API**: [`/api/cms-connections`](api-reference.md#cms-connections)\n\n---\n\n## 📄 Chat\n\n### What You See\nThe Chat page provides a communication interface for users to interact with support or community members.\n\n### What You Can Do\n- Send and receive messages.\n- Access chat history for reference.\n\n**Related API**: [`/api/chat`](api-reference.md#chat)\n\n---\n\n## 📄 Autopilot\n\n### What You See\nThe Autopilot page offers automated tools for managing SEO tasks and website updates.\n\n### What You Can Do\n- Configure automated tasks for SEO optimization.\n- Monitor the performance of automated actions.\n\n**Related API**: [`/api/autopilot`](api-reference.md#autopilot)\n\n---\n\n## 📄 Article Writer\n\n### What You See\nThe Article Writer page provides a focused environment for drafting articles.\n\n### What You Can Do\n- Create and edit articles.\n- Save drafts or publish articles.\n\n### Navigation Options\nFrom this page, you can navigate to:\n- [Cms Connections](#cms-connections)\n\n**Related API**: [`/api/article-writer`](api-reference.md#article-writer)\n\n---\n\n## 📄 Add Website\n\n### What You See\nThe Add Website page allows users to input details for a new website they wish to manage.\n\n### What You Can Do\n- Enter website information and settings.\n- Submit the form to add the website to your account.\n\n### Navigation Options\nFrom this page, you can navigate to:\n- [App](#app)\n\n**Related API**: [`/api/add-website`](api-reference.md#add-website)\n\n---\n\n## 📄 Account\n\n### What You See\nThe Account page displays user account information and settings.\n\n### What You Can Do\n- Update personal information and preferences.\n- Manage subscription and billing details.\n\n**Related API**: [`/api/account`](api-reference.md#account)\n\n---\n\n## 📄 [website Id]\n\n### What You See\nThe [website Id] page provides detailed information about a specific website managed by the user.\n\n### What You Can Do\n- View metrics and settings specific to the website.\n- Navigate to related features for that website.\n\n**Related API**: [`/api/website/[id]`](api-reference.md#website-id)\n\n---\n\n## 📄 [token]\n\n### What You See\nThe [token] page is a secure area for managing tokens related to user authentication or API access.\n\n### What You Can Do\n- View and manage your tokens.\n- Generate new tokens for API access.\n\n### Navigation Options\nFrom this page, you can navigate to:\n- [App](#app)\n\n**Related API**: [`/api/token`](api-reference.md#token)\n\n---\n\n## 📄 [token]\n\n### What You See\nThe [token] page is a secure area for managing tokens related to user authentication or API access.\n\n### What You Can Do\n- View and manage your tokens.\n- Generate new tokens for API access.\n\n### Navigation Options\nFrom this page, you can navigate to:\n- [App](#app)\n\n**Related API**: [`/api/token`](api-reference.md#token)\n\n---\n\n## 📄 Cms Connection\n\n### What You See\nThe Cms Connection page provides details about the current connections to content management systems.\n\n### What You Can Do\n- View connection status and settings.\n- Edit or remove CMS connections as needed.\n\n**Related API**: [`/api/cms-connection`](api-reference.md#cms-connection)\n\n---\n\nThis user guide serves as a comprehensive reference for navigating and utilizing the `seoagent-nextjs` application effectively. Each section provides insights into what users can expect and the actions they can perform, ensuring a smooth user experience.",
  "frontend": {
    "overview": "# Frontend Architecture Overview\n\nThis React application consists of **25 pages** with **99 components** (97 interactive).\n\n## Pages Structure\n\n- **[App](#app)** (`/`) - 0 components\n- **[Layout](#layout)** (`/layout.tsx`) - 5 components\n- **[Website Health Overview](#website-health-overview)** (`/unknown`) - 7 components\n- **[Upgrade Badge](#upgrade-badge)** (`/unknown`) - 1 components\n- **[Protected Route](#protected-route)** (`/unknown`) - 0 components\n- **[Feature Gate](#feature-gate)** (`/unknown`) - 2 components\n- **[Strapi Bzx SP0n3](#strapi-bzx-sp0n3)** (`/unknown`) - 0 components\n- **[Terms](#terms)** (`/terms`) - 1 components\n- **[Strategy](#strategy)** (`/strategy`) - 2 components\n- **[Privacy](#privacy)** (`/privacy`) - 1 components\n- **[Login](#login)** (`/login`) - 6 components\n- **[Keywords](#keywords)** (`/keywords`) - 0 components\n- **[Debug Seo](#debug-seo)** (`/debug-seo`) - 3 components\n- **[Dashboard](#dashboard)** (`/dashboard`) - 0 components\n- **[Content Writer](#content-writer)** (`/content-writer`) - 17 components\n- **[Cms Connections](#cms-connections)** (`/cms-connections`) - 4 components\n- **[Chat](#chat)** (`/chat`) - 0 components\n- **[Autopilot](#autopilot)** (`/autopilot`) - 1 components\n- **[Article Writer](#article-writer)** (`/article-writer`) - 17 components\n- **[Add Website](#add-website)** (`/add-website`) - 10 components\n- **[Account](#account)** (`/account`) - 4 components\n- **[[website Id]](#website-id)** (`/website/[websiteId]`) - 5 components\n- **[[token]](#token)** (`/meta-tags/[token]`) - 4 components\n- **[[token]](#token)** (`/alt-tags/[token]`) - 4 components\n- **[Cms Connection](#cms-connection)** (`/website/[websiteId]/cms-connection`) - 5 components\n\n## Component Distribution\n\n- **Buttons & Actions**: 52\n- **Input Fields**: 21\n- **Navigation Links**: 19\n- **Forms & Input**: 5\n- **Navigation Components**: 2\n\n## Navigation Flow\n\nThe application uses a combination of:\n- **Direct links** for page-to-page navigation\n- **Button clicks** for actions and form submissions\n- **Programmatic navigation** using React Router or Next.js routing\n\nClick on any page below to see its components and navigation details.",
    "featuresAndFunctionality": "# Frontend Features & Functionality\n\nThis React application provides a comprehensive user interface with 25 distinct pages and interactive components.\n\n## Pages Overview\n\n### App\n**Route**: `/`\n\nThe App page provides user interface and functionality for app related features.\n\n\n### Layout\n**Route**: `/layout.tsx`\n\nThe Layout page provides user interface and functionality for layout related features.\n\n**Interactive Components**: 5\n- link, link, link, link, link\n\n### Website Health Overview\n**Route**: `/unknown`\n\nThe Website Health Overview page provides user interface and functionality for website health overview related features.\n\n**Interactive Components**: 7\n- button, Connect Now, Manage Connection, Connect CMS, Manage CMS, button, Installation Complete\n\n### Upgrade Badge\n**Route**: `/unknown`\n\nThe Upgrade Badge page provides user interface and functionality for upgrade badge related features.\n\n**Interactive Components**: 1\n- ⚡\n\n### Protected Route\n**Route**: `/unknown`\n\nThe Protected Route page provides user interface and functionality for protected route related features.\n\n\n### Feature Gate\n**Route**: `/unknown`\n\nThe Feature Gate page provides user interface and functionality for feature gate related features.\n\n**Interactive Components**: 2\n- ⚡ Upgrade Now, ← Back to Dashboard\n\n### Strapi Bzx SP0n3\n**Route**: `/unknown`\n\nThe Strapi Bzx SP0n3 page provides user interface and functionality for strapi bzx sp0n3 related features.\n\n\n### Terms\n**Route**: `/terms`\n\nThe Terms page provides user interface and functionality for terms related features.\n\n**Interactive Components**: 1\n- legal@seoagent.com\n\n### Strategy\n**Route**: `/strategy`\n\nThe Strategy page provides user interface and functionality for strategy related features.\n\n**Interactive Components**: 2\n- input, Join Waitlist\n\n### Privacy\n**Route**: `/privacy`\n\nThe Privacy page provides user interface and functionality for privacy related features.\n\n**Interactive Components**: 1\n- privacy@seoagent.com\n\n### Login\n**Route**: `/login`\n\nThe Login page provides user interface and functionality for login related features.\n\n**Interactive Components**: 6\n- form, input, input, button, button, LoginForm\n\n### Keywords\n**Route**: `/keywords`\n\nThe Keywords page provides user interface and functionality for keywords related features.\n\n\n### Debug Seo\n**Route**: `/debug-seo`\n\nThe Debug Seo page provides user interface and functionality for debug seo related features.\n\n**Interactive Components**: 3\n- Back to Dashboard, Run All Tests, Run\n\n### Dashboard\n**Route**: `/dashboard`\n\nThe Dashboard page provides user interface and functionality for dashboard related features.\n\n\n### Content Writer\n**Route**: `/content-writer`\n\nThe Content Writer page provides user interface and functionality for content writer related features.\n\n**Interactive Components**: 17\n- button, Set Up CMS Connection, Create New Article, form, input, select, select, input, Cancel, button, select, button, button, button, View Live Article, Edit in Strapi, button\n\n### Cms Connections\n**Route**: `/cms-connections`\n\nThe Cms Connections page provides user interface and functionality for cms connections related features.\n\n**Interactive Components**: 4\n- Connect CMS, Cancel, Try Again, Get Started\n\n### Chat\n**Route**: `/chat`\n\nThe Chat page provides user interface and functionality for chat related features.\n\n\n### Autopilot\n**Route**: `/autopilot`\n\nThe Autopilot page provides user interface and functionality for autopilot related features.\n\n**Interactive Components**: 1\n- Get Tracking Script\n\n### Article Writer\n**Route**: `/article-writer`\n\nThe Article Writer page provides user interface and functionality for article writer related features.\n\n**Interactive Components**: 17\n- button, Set Up CMS Connection, Create New Article, form, input, select, select, input, Cancel, button, select, button, button, button, View Live Article, Edit in Strapi, button\n\n### Add Website\n**Route**: `/add-website`\n\nThe Add Website page provides user interface and functionality for add website related features.\n\n**Interactive Components**: 10\n- textarea, Copy Code, Done, form, input, select, input, input, Cancel, button\n\n### Account\n**Route**: `/account`\n\nThe Account page provides user interface and functionality for account related features.\n\n**Interactive Components**: 4\n- input, input, input, Sign Out\n\n### [website Id]\n**Route**: `/website/[websiteId]`\n\nThe [website Id] page provides user interface and functionality for [website id] related features.\n\n**Interactive Components**: 5\n- Return to Dashboard, Dashboard, View installation instructions →, Connect GSC\n\n### [token]\n**Route**: `/meta-tags/[token]`\n\nThe [token] page provides user interface and functionality for [token] related features.\n\n**Interactive Components**: 4\n- Back to Dashboard, a, Edit, Delete\n\n### [token]\n**Route**: `/alt-tags/[token]`\n\nThe [token] page provides user interface and functionality for [token] related features.\n\n**Interactive Components**: 4\n- Back to Dashboard, a, Edit, Delete\n\n### Cms Connection\n**Route**: `/website/[websiteId]/cms-connection`\n\nThe Cms Connection page provides user interface and functionality for cms connection related features.\n\n**Interactive Components**: 5\n- Return to Dashboard, Dashboard, button, Disconnect\n\n## Navigation Flow\n\nThe application provides seamless navigation between pages through:\n\n- **Back to Dashboard** navigates from [debug-seo](#debug-seo) to [app](#app)\n- **Set Up CMS Connection** navigates from [content-writer](#content-writer) to [cms-connections](#cms-connections)\n- **Set Up CMS Connection** navigates from [article-writer](#article-writer) to [cms-connections](#cms-connections)\n- **Done** navigates from [add-website](#add-website) to [app](#app)\n- **Back to Dashboard** navigates from [token](#token) to [app](#app)\n- **Back to Dashboard** navigates from [token](#token) to [app](#app)\n\n",
    "components": [
      {
        "name": "link",
        "slug": "link",
        "purpose": "Navigation link that takes users to different pages",
        "props": [
          "rel: string",
          "href: string",
          "sizes: string"
        ],
        "usage": "Used in Layout page",
        "interactions": "No interactions defined",
        "filePath": "src/app/layout.tsx",
        "uiEvents": []
      },
      {
        "name": "link",
        "slug": "link",
        "purpose": "Navigation link that takes users to different pages",
        "props": [
          "rel: string",
          "href: string",
          "sizes: string",
          "type: string"
        ],
        "usage": "Used in Layout page",
        "interactions": "No interactions defined",
        "filePath": "src/app/layout.tsx",
        "uiEvents": []
      },
      {
        "name": "link",
        "slug": "link",
        "purpose": "Navigation link that takes users to different pages",
        "props": [
          "rel: string",
          "href: string",
          "sizes: string",
          "type: string"
        ],
        "usage": "Used in Layout page",
        "interactions": "No interactions defined",
        "filePath": "src/app/layout.tsx",
        "uiEvents": []
      },
      {
        "name": "link",
        "slug": "link",
        "purpose": "Navigation link that takes users to different pages",
        "props": [
          "rel: string",
          "href: string"
        ],
        "usage": "Used in Layout page",
        "interactions": "No interactions defined",
        "filePath": "src/app/layout.tsx",
        "uiEvents": []
      },
      {
        "name": "link",
        "slug": "link",
        "purpose": "Navigation link that takes users to different pages",
        "props": [
          "rel: string",
          "href: string"
        ],
        "usage": "Used in Layout page",
        "interactions": "No interactions defined",
        "filePath": "src/app/layout.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Website Health Overview page",
        "interactions": "Click handler: onStartAudit",
        "filePath": "src/components/WebsiteHealthOverview.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Connect Now\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Website Health Overview page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/components/WebsiteHealthOverview.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Connect Now"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Manage Connection\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Website Health Overview page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/components/WebsiteHealthOverview.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Manage Connection"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Connect CMS\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Website Health Overview page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/components/WebsiteHealthOverview.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Connect CMS"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Manage CMS\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Website Health Overview page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/components/WebsiteHealthOverview.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Manage CMS"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string",
          "title: string"
        ],
        "usage": "Used in Website Health Overview page",
        "interactions": "Click handler: handleCopyCode",
        "filePath": "src/components/WebsiteHealthOverview.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Installation Complete\" that triggers user actions",
        "props": [
          "className: string",
          "disabled: unknown"
        ],
        "usage": "Used in Website Health Overview page",
        "interactions": "No interactions defined",
        "filePath": "src/components/WebsiteHealthOverview.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"⚡\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: expression",
          "title: expression"
        ],
        "usage": "Used in Upgrade Badge page",
        "interactions": "Click handler: handleUpgrade",
        "filePath": "src/components/UpgradeBadge.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks ⚡"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"⚡ Upgrade Now\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Feature Gate page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/components/FeatureGate.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks ⚡ Upgrade Now"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"← Back to Dashboard\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Feature Gate page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/components/FeatureGate.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks ← Back to Dashboard"
          }
        ]
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"legal@seoagent.com\" that takes users to different pages",
        "props": [
          "href: string",
          "className: string"
        ],
        "usage": "Used in Terms page",
        "interactions": "No interactions defined",
        "filePath": "src/app/terms/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "placeholder: string",
          "className: string"
        ],
        "usage": "Used in Strategy page",
        "interactions": "No interactions defined",
        "filePath": "src/app/strategy/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Join Waitlist\" that triggers user actions",
        "props": [
          "className: string"
        ],
        "usage": "Used in Strategy page",
        "interactions": "No interactions defined",
        "filePath": "src/app/strategy/page.tsx",
        "uiEvents": []
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"privacy@seoagent.com\" that takes users to different pages",
        "props": [
          "href: string",
          "className: string"
        ],
        "usage": "Used in Privacy page",
        "interactions": "No interactions defined",
        "filePath": "src/app/privacy/page.tsx",
        "uiEvents": []
      },
      {
        "name": "form",
        "slug": "form",
        "purpose": "Form component for user input and data submission",
        "props": [
          "className: string",
          "onSubmit: expression"
        ],
        "usage": "Used in Login page",
        "interactions": "No interactions defined",
        "filePath": "src/app/login/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "id: string",
          "name: string",
          "type: string",
          "autoComplete: string",
          "required: unknown",
          "value: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Login page",
        "interactions": "No interactions defined",
        "filePath": "src/app/login/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "id: string",
          "name: string",
          "type: string",
          "autoComplete: expression",
          "required: unknown",
          "value: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Login page",
        "interactions": "No interactions defined",
        "filePath": "src/app/login/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "type: string",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Login page",
        "interactions": "No interactions defined",
        "filePath": "src/app/login/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "type: string",
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Login page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/login/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "LoginForm",
        "slug": "loginform",
        "purpose": "Form component for user input and data submission",
        "props": [],
        "usage": "Used in Login page",
        "interactions": "No interactions defined",
        "filePath": "src/app/login/page.tsx",
        "uiEvents": []
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"Back to Dashboard\" that takes users to different pages",
        "props": [
          "href: string",
          "className: string"
        ],
        "usage": "Used in Debug Seo page",
        "interactions": "No interactions defined",
        "filePath": "src/app/debug-seo/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Run All Tests\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Debug Seo page",
        "interactions": "Click handler: runAllTests",
        "filePath": "src/app/debug-seo/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Run All Tests"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Run\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Debug Seo page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/debug-seo/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Run"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"Set Up CMS Connection\" that takes users to different pages",
        "props": [
          "href: string",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Create New Article\" that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Create New Article"
          }
        ]
      },
      {
        "name": "form",
        "slug": "form",
        "purpose": "Form component for user input and data submission",
        "props": [
          "onSubmit: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "value: expression",
          "onChange: expression",
          "placeholder: string",
          "className: string",
          "required: unknown"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "select",
        "slug": "select",
        "purpose": "Input field for user data entry",
        "props": [
          "value: expression",
          "onChange: expression",
          "className: string",
          "required: unknown"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "select",
        "slug": "select",
        "purpose": "Input field for user data entry",
        "props": [
          "value: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "value: expression",
          "onChange: expression",
          "placeholder: string",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Cancel\" that triggers user actions",
        "props": [
          "type: string",
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Cancel"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "type: string",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "select",
        "slug": "select",
        "purpose": "Input field for user data entry",
        "props": [
          "value: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"View Live Article\" that takes users to different pages",
        "props": [
          "href: expression",
          "target: string",
          "rel: string",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"Edit in Strapi\" that takes users to different pages",
        "props": [
          "href: expression",
          "target: string",
          "rel: string",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Content Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/content-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Connect CMS\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Cms Connections page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/cms-connections/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Connect CMS"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Cancel\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Cms Connections page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/cms-connections/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Cancel"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Try Again\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Cms Connections page",
        "interactions": "Click handler: fetchConnections",
        "filePath": "src/app/cms-connections/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Try Again"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Get Started\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Cms Connections page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/cms-connections/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Get Started"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Get Tracking Script\" that triggers user actions",
        "props": [
          "className: string"
        ],
        "usage": "Used in Autopilot page",
        "interactions": "No interactions defined",
        "filePath": "src/app/autopilot/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"Set Up CMS Connection\" that takes users to different pages",
        "props": [
          "href: string",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Create New Article\" that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Create New Article"
          }
        ]
      },
      {
        "name": "form",
        "slug": "form",
        "purpose": "Form component for user input and data submission",
        "props": [
          "onSubmit: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "value: expression",
          "onChange: expression",
          "placeholder: string",
          "className: string",
          "required: unknown"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "select",
        "slug": "select",
        "purpose": "Input field for user data entry",
        "props": [
          "value: expression",
          "onChange: expression",
          "className: string",
          "required: unknown"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "select",
        "slug": "select",
        "purpose": "Input field for user data entry",
        "props": [
          "value: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "value: expression",
          "onChange: expression",
          "placeholder: string",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Cancel\" that triggers user actions",
        "props": [
          "type: string",
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Cancel"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "type: string",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "select",
        "slug": "select",
        "purpose": "Input field for user data entry",
        "props": [
          "value: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"View Live Article\" that takes users to different pages",
        "props": [
          "href: expression",
          "target: string",
          "rel: string",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"Edit in Strapi\" that takes users to different pages",
        "props": [
          "href: expression",
          "target: string",
          "rel: string",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "No interactions defined",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Article Writer page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/article-writer/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "textarea",
        "slug": "textarea",
        "purpose": "Input field for user data entry",
        "props": [
          "className: string",
          "rows: expression",
          "readOnly: unknown",
          "value: expression"
        ],
        "usage": "Used in Add Website page",
        "interactions": "No interactions defined",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Copy Code\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Add Website page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Copy Code"
          }
        ]
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"Done\" that takes users to different pages",
        "props": [
          "href: string",
          "className: string"
        ],
        "usage": "Used in Add Website page",
        "interactions": "No interactions defined",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": []
      },
      {
        "name": "form",
        "slug": "form",
        "purpose": "Form component for user input and data submission",
        "props": [
          "onSubmit: expression",
          "className: string"
        ],
        "usage": "Used in Add Website page",
        "interactions": "No interactions defined",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "id: string",
          "value: expression",
          "onChange: expression",
          "className: string",
          "placeholder: string",
          "required: unknown"
        ],
        "usage": "Used in Add Website page",
        "interactions": "No interactions defined",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": []
      },
      {
        "name": "select",
        "slug": "select",
        "purpose": "Input field for user data entry",
        "props": [
          "id: string",
          "value: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Add Website page",
        "interactions": "No interactions defined",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "id: string",
          "type: string",
          "checked: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Add Website page",
        "interactions": "No interactions defined",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "id: string",
          "type: string",
          "checked: expression",
          "onChange: expression",
          "className: string"
        ],
        "usage": "Used in Add Website page",
        "interactions": "No interactions defined",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Cancel\" that triggers user actions",
        "props": [
          "type: string",
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Add Website page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Cancel"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "type: string",
          "disabled: expression",
          "className: string"
        ],
        "usage": "Used in Add Website page",
        "interactions": "No interactions defined",
        "filePath": "src/app/add-website/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "value: expression",
          "disabled: unknown",
          "className: string"
        ],
        "usage": "Used in Account page",
        "interactions": "No interactions defined",
        "filePath": "src/app/account/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "value: expression",
          "disabled: unknown",
          "className: string"
        ],
        "usage": "Used in Account page",
        "interactions": "No interactions defined",
        "filePath": "src/app/account/page.tsx",
        "uiEvents": []
      },
      {
        "name": "input",
        "slug": "input",
        "purpose": "Input field for user data entry",
        "props": [
          "type: string",
          "value: expression",
          "disabled: unknown",
          "className: string"
        ],
        "usage": "Used in Account page",
        "interactions": "No interactions defined",
        "filePath": "src/app/account/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Sign Out\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Account page",
        "interactions": "Click handler: handleSignOut",
        "filePath": "src/app/account/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Sign Out"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Return to Dashboard\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in [website Id] page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/website/[websiteId]/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Return to Dashboard"
          }
        ]
      },
      {
        "name": "nav",
        "slug": "nav",
        "purpose": "Navigation component for site/app navigation",
        "props": [
          "className: string",
          "aria-label: string"
        ],
        "usage": "Used in [website Id] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/website/[websiteId]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Dashboard\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in [website Id] page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/website/[websiteId]/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Dashboard"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"View installation instructions →\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in [website Id] page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/website/[websiteId]/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks View installation instructions →"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Connect GSC\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in [website Id] page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/website/[websiteId]/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Connect GSC"
          }
        ]
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"Back to Dashboard\" that takes users to different pages",
        "props": [
          "href: string",
          "className: string"
        ],
        "usage": "Used in [token] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/meta-tags/[token]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link that takes users to different pages",
        "props": [
          "href: expression",
          "target: string",
          "rel: string",
          "className: string"
        ],
        "usage": "Used in [token] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/meta-tags/[token]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Edit\" that triggers user actions",
        "props": [
          "className: string"
        ],
        "usage": "Used in [token] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/meta-tags/[token]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Delete\" that triggers user actions",
        "props": [
          "className: string"
        ],
        "usage": "Used in [token] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/meta-tags/[token]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link labeled \"Back to Dashboard\" that takes users to different pages",
        "props": [
          "href: string",
          "className: string"
        ],
        "usage": "Used in [token] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/alt-tags/[token]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "a",
        "slug": "a",
        "purpose": "Navigation link that takes users to different pages",
        "props": [
          "href: expression",
          "target: string",
          "rel: string",
          "className: string"
        ],
        "usage": "Used in [token] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/alt-tags/[token]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Edit\" that triggers user actions",
        "props": [
          "className: string"
        ],
        "usage": "Used in [token] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/alt-tags/[token]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Delete\" that triggers user actions",
        "props": [
          "className: string"
        ],
        "usage": "Used in [token] page",
        "interactions": "No interactions defined",
        "filePath": "src/app/alt-tags/[token]/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Return to Dashboard\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Cms Connection page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/website/[websiteId]/cms-connection/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Return to Dashboard"
          }
        ]
      },
      {
        "name": "nav",
        "slug": "nav",
        "purpose": "Navigation component for site/app navigation",
        "props": [
          "className: string",
          "aria-label: string"
        ],
        "usage": "Used in Cms Connection page",
        "interactions": "No interactions defined",
        "filePath": "src/app/website/[websiteId]/cms-connection/page.tsx",
        "uiEvents": []
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Dashboard\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Cms Connection page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/website/[websiteId]/cms-connection/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Dashboard"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Cms Connection page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/website/[websiteId]/cms-connection/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks button"
          }
        ]
      },
      {
        "name": "button",
        "slug": "button",
        "purpose": "Interactive button labeled \"Disconnect\" that triggers user actions",
        "props": [
          "onClick: expression",
          "className: string"
        ],
        "usage": "Used in Cms Connection page",
        "interactions": "Click handler: inline-function",
        "filePath": "src/app/website/[websiteId]/cms-connection/page.tsx",
        "uiEvents": [
          {
            "event": "click",
            "description": "User clicks Disconnect"
          }
        ]
      }
    ],
    "pages": [
      {
        "route": "/",
        "name": "App",
        "slug": "app",
        "purpose": "The App page provides user interface and functionality for app related features.",
        "components": [],
        "componentsMarkdown": "**No interactive components detected on this page.**",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/layout.tsx",
        "name": "Layout",
        "slug": "layout",
        "purpose": "The Layout page provides user interface and functionality for layout related features.",
        "components": [
          "link",
          "link",
          "link",
          "link",
          "link"
        ],
        "componentsMarkdown": "### 🔗 Navigation Links\n\n#### link\n\n> **Location**: `src/app/layout.tsx:51`  \n> **Type**: link  \n> **Description**: Navigation link that takes users to different pages\n\n**Navigates To**: `/favicon.ico`\n\n**Props**:\n- `rel` (string) = \"icon\"\n- `href` (string) = \"/favicon.ico\"\n- `sizes` (string) = \"32x32\"\n\n\n#### link\n\n> **Location**: `src/app/layout.tsx:52`  \n> **Type**: link  \n> **Description**: Navigation link that takes users to different pages\n\n**Navigates To**: `/favicon-16x16.png`\n\n**Props**:\n- `rel` (string) = \"icon\"\n- `href` (string) = \"/favicon-16x16.png\"\n- `sizes` (string) = \"16x16\"\n- `type` (string) = \"image/png\"\n\n\n#### link\n\n> **Location**: `src/app/layout.tsx:53`  \n> **Type**: link  \n> **Description**: Navigation link that takes users to different pages\n\n**Navigates To**: `/favicon-32x32.png`\n\n**Props**:\n- `rel` (string) = \"icon\"\n- `href` (string) = \"/favicon-32x32.png\"\n- `sizes` (string) = \"32x32\"\n- `type` (string) = \"image/png\"\n\n\n#### link\n\n> **Location**: `src/app/layout.tsx:54`  \n> **Type**: link  \n> **Description**: Navigation link that takes users to different pages\n\n**Navigates To**: `/apple-touch-icon.png`\n\n**Props**:\n- `rel` (string) = \"apple-touch-icon\"\n- `href` (string) = \"/apple-touch-icon.png\"\n\n\n#### link\n\n> **Location**: `src/app/layout.tsx:55`  \n> **Type**: link  \n> **Description**: Navigation link that takes users to different pages\n\n**Navigates To**: `/site.webmanifest`\n\n**Props**:\n- `rel` (string) = \"manifest\"\n- `href` (string) = \"/site.webmanifest\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/unknown",
        "name": "Website Health Overview",
        "slug": "website-health-overview",
        "purpose": "The Website Health Overview page provides user interface and functionality for website health overview related features.",
        "components": [
          "button",
          "button",
          "button",
          "button",
          "button",
          "button",
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button\n\n> **Location**: `src/components/WebsiteHealthOverview.tsx:142`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `onStartAudit`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"w-full btn bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white flex items-center justify-center text-sm py-2\"\n\n\n#### button - \"Connect Now\"\n\n> **Location**: `src/components/WebsiteHealthOverview.tsx:191`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Connect Now\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"w-full btn bg-blue-600 hover:bg-blue-700 text-white flex items-center justify-center text-sm py-2\"\n\n\n#### button - \"Manage Connection\"\n\n> **Location**: `src/components/WebsiteHealthOverview.tsx:199`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Manage Connection\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"w-full btn bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 flex items-center justify-center text-sm py-2\"\n\n\n#### button - \"Connect CMS\"\n\n> **Location**: `src/components/WebsiteHealthOverview.tsx:239`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Connect CMS\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"w-full btn bg-purple-600 hover:bg-purple-700 text-white flex items-center justify-center text-sm py-2\"\n\n\n#### button - \"Manage CMS\"\n\n> **Location**: `src/components/WebsiteHealthOverview.tsx:247`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Manage CMS\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"w-full btn bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 flex items-center justify-center text-sm py-2\"\n\n\n#### button\n\n> **Location**: `src/components/WebsiteHealthOverview.tsx:298`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `handleCopyCode`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"absolute top-1 right-1 p-1 bg-gray-700 hover:bg-gray-600 rounded text-white\"\n- `title` (string) = \"Copy code\"\n\n\n#### button - \"Installation Complete\"\n\n> **Location**: `src/components/WebsiteHealthOverview.tsx:308`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Installation Complete\" that triggers user actions\n\n**Props**:\n- `className` (string) = \"w-full btn bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 flex items-center justify-center text-sm py-2\"\n- `disabled` (unknown)\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/unknown",
        "name": "Upgrade Badge",
        "slug": "upgrade-badge",
        "purpose": "The Upgrade Badge page provides user interface and functionality for upgrade badge related features.",
        "components": [
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button - \"⚡\"\n\n> **Location**: `src/components/UpgradeBadge.tsx:43`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"⚡\" that triggers user actions\n\n**Click Handler**: `handleUpgrade`\n\n**Props**:\n- `onClick` (expression)\n- `className` (expression)\n- `title` (expression)\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/unknown",
        "name": "Protected Route",
        "slug": "protected-route",
        "purpose": "The Protected Route page provides user interface and functionality for protected route related features.",
        "components": [],
        "componentsMarkdown": "**No interactive components detected on this page.**",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/unknown",
        "name": "Feature Gate",
        "slug": "feature-gate",
        "purpose": "The Feature Gate page provides user interface and functionality for feature gate related features.",
        "components": [
          "button",
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button - \"⚡ Upgrade Now\"\n\n> **Location**: `src/components/FeatureGate.tsx:68`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"⚡ Upgrade Now\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"w-full btn bg-violet-600 hover:bg-violet-700 text-white py-3\"\n\n\n#### button - \"← Back to Dashboard\"\n\n> **Location**: `src/components/FeatureGate.tsx:75`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"← Back to Dashboard\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"w-full btn border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500 text-gray-700 dark:text-gray-300\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/unknown",
        "name": "Strapi Bzx SP0n3",
        "slug": "strapi-bzx-sp0n3",
        "purpose": "The Strapi Bzx SP0n3 page provides user interface and functionality for strapi bzx sp0n3 related features.",
        "components": [],
        "componentsMarkdown": "**No interactive components detected on this page.**",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/terms",
        "name": "Terms",
        "slug": "terms",
        "purpose": "The Terms page provides user interface and functionality for terms related features.",
        "components": [
          "a"
        ],
        "componentsMarkdown": "### 🔗 Navigation Links\n\n#### a - \"legal@seoagent.com\"\n\n> **Location**: `src/app/terms/page.tsx:83`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"legal@seoagent.com\" that takes users to different pages\n\n**Navigates To**: `mailto:legal@seoagent.com`\n\n**Props**:\n- `href` (string) = \"mailto:legal@seoagent.com\"\n- `className` (string) = \"text-violet-600 hover:underline\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/strategy",
        "name": "Strategy",
        "slug": "strategy",
        "purpose": "The Strategy page provides user interface and functionality for strategy related features.",
        "components": [
          "input",
          "button"
        ],
        "componentsMarkdown": "### 📋 Input Fields\n\n#### input\n\n> **Location**: `src/app/strategy/page.tsx:128`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"email\"\n- `placeholder` (string) = \"Enter your email\"\n- `className` (string) = \"flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n\n\n\n### 🔘 Buttons & Actions\n\n#### button - \"Join Waitlist\"\n\n> **Location**: `src/app/strategy/page.tsx:133`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Join Waitlist\" that triggers user actions\n\n**Props**:\n- `className` (string) = \"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-medium py-2 px-6 rounded-lg transition-all duration-200\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/privacy",
        "name": "Privacy",
        "slug": "privacy",
        "purpose": "The Privacy page provides user interface and functionality for privacy related features.",
        "components": [
          "a"
        ],
        "componentsMarkdown": "### 🔗 Navigation Links\n\n#### a - \"privacy@seoagent.com\"\n\n> **Location**: `src/app/privacy/page.tsx:65`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"privacy@seoagent.com\" that takes users to different pages\n\n**Navigates To**: `mailto:privacy@seoagent.com`\n\n**Props**:\n- `href` (string) = \"mailto:privacy@seoagent.com\"\n- `className` (string) = \"text-violet-600 hover:underline\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/login",
        "name": "Login",
        "slug": "login",
        "purpose": "The Login page provides user interface and functionality for login related features.",
        "components": [
          "form",
          "input",
          "input",
          "button",
          "button",
          "LoginForm"
        ],
        "componentsMarkdown": "### 📝 Forms & Input\n\n#### form\n\n> **Location**: `src/app/login/page.tsx:79`  \n> **Type**: form  \n> **Description**: Form component for user input and data submission\n\n**Props**:\n- `className` (string) = \"space-y-6\"\n- `onSubmit` (expression)\n\n\n#### LoginForm\n\n> **Location**: `src/app/login/page.tsx:187`  \n> **Type**: form  \n> **Description**: Form component for user input and data submission\n\n\n\n### 📋 Input Fields\n\n#### input\n\n> **Location**: `src/app/login/page.tsx:85`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `id` (string) = \"email\"\n- `name` (string) = \"email\"\n- `type` (string) = \"email\"\n- `autoComplete` (string) = \"email\"\n- `required` (unknown)\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"appearance-none block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white sm:text-sm\"\n\n\n#### input\n\n> **Location**: `src/app/login/page.tsx:103`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `id` (string) = \"password\"\n- `name` (string) = \"password\"\n- `type` (string) = \"password\"\n- `autoComplete` (expression)\n- `required` (unknown)\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"appearance-none block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white sm:text-sm\"\n\n\n\n### 🔘 Buttons & Actions\n\n#### button\n\n> **Location**: `src/app/login/page.tsx:123`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Props**:\n- `type` (string) = \"submit\"\n- `disabled` (expression)\n- `className` (string) = \"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n\n\n#### button\n\n> **Location**: `src/app/login/page.tsx:146`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `type` (string) = \"button\"\n- `onClick` (expression)\n- `className` (string) = \"w-full flex justify-center py-2 px-4 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/keywords",
        "name": "Keywords",
        "slug": "keywords",
        "purpose": "The Keywords page provides user interface and functionality for keywords related features.",
        "components": [],
        "componentsMarkdown": "**No interactive components detected on this page.**",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/debug-seo",
        "name": "Debug Seo",
        "slug": "debug-seo",
        "purpose": "The Debug Seo page provides user interface and functionality for debug seo related features.",
        "components": [
          "a",
          "button",
          "button"
        ],
        "componentsMarkdown": "### 🔗 Navigation Links\n\n#### a - \"Back to Dashboard\"\n\n> **Location**: `src/app/debug-seo/page.tsx:302`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"Back to Dashboard\" that takes users to different pages\n\n**Navigates To**: [App](#app) (`/`)\n\n**Props**:\n- `href` (string) = \"/\"\n- `className` (string) = \"inline-flex items-center text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-200 transition-colors mr-4\"\n\n\n\n### 🔘 Buttons & Actions\n\n#### button - \"Run All Tests\"\n\n> **Location**: `src/app/debug-seo/page.tsx:320`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Run All Tests\" that triggers user actions\n\n**Click Handler**: `runAllTests`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn bg-violet-600 hover:bg-violet-700 text-white\"\n\n\n#### button - \"Run\"\n\n> **Location**: `src/app/debug-seo/page.tsx:393`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Run\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn-sm bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100\"\n\n\n\n",
        "navigationLinks": [
          "[App](#app)"
        ],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/dashboard",
        "name": "Dashboard",
        "slug": "dashboard",
        "purpose": "The Dashboard page provides user interface and functionality for dashboard related features.",
        "components": [],
        "componentsMarkdown": "**No interactive components detected on this page.**",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/content-writer",
        "name": "Content Writer",
        "slug": "content-writer",
        "purpose": "The Content Writer page provides user interface and functionality for content writer related features.",
        "components": [
          "button",
          "a",
          "button",
          "form",
          "input",
          "select",
          "select",
          "input",
          "button",
          "button",
          "select",
          "button",
          "button",
          "button",
          "a",
          "a",
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button\n\n> **Location**: `src/app/content-writer/page.tsx:465`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"ml-auto text-red-400 hover:text-red-600\"\n\n\n#### button - \"Create New Article\"\n\n> **Location**: `src/app/content-writer/page.tsx:508`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Create New Article\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-4 py-2 bg-violet-600 hover:bg-violet-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button - \"Cancel\"\n\n> **Location**: `src/app/content-writer/page.tsx:598`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Cancel\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `type` (string) = \"button\"\n- `onClick` (expression)\n- `className` (string) = \"px-4 py-2 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/content-writer/page.tsx:605`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Props**:\n- `type` (string) = \"submit\"\n- `disabled` (expression)\n- `className` (string) = \"px-4 py-2 bg-violet-600 hover:bg-violet-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/content-writer/page.tsx:722`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-blue-600 hover:bg-blue-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/content-writer/page.tsx:743`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-orange-600 hover:bg-orange-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/content-writer/page.tsx:764`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-green-600 hover:bg-green-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/content-writer/page.tsx:811`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-red-600 hover:bg-red-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n\n### 🔗 Navigation Links\n\n#### a - \"Set Up CMS Connection\"\n\n> **Location**: `src/app/content-writer/page.tsx:492`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"Set Up CMS Connection\" that takes users to different pages\n\n**Navigates To**: [Cms Connections](#cms-connections) (`/cms-connections`)\n\n**Props**:\n- `href` (string) = \"/cms-connections\"\n- `className` (string) = \"inline-flex items-center px-4 py-2 bg-violet-600 hover:bg-violet-700 text-white rounded-lg transition-colors\"\n\n\n#### a - \"View Live Article\"\n\n> **Location**: `src/app/content-writer/page.tsx:785`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"View Live Article\" that takes users to different pages\n\n**Props**:\n- `href` (expression)\n- `target` (string) = \"_blank\"\n- `rel` (string) = \"noopener noreferrer\"\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors\"\n\n\n#### a - \"Edit in Strapi\"\n\n> **Location**: `src/app/content-writer/page.tsx:798`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"Edit in Strapi\" that takes users to different pages\n\n**Props**:\n- `href` (expression)\n- `target` (string) = \"_blank\"\n- `rel` (string) = \"noopener noreferrer\"\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors\"\n\n\n\n### 📝 Forms & Input\n\n#### form\n\n> **Location**: `src/app/content-writer/page.tsx:527`  \n> **Type**: form  \n> **Description**: Form component for user input and data submission\n\n**Props**:\n- `onSubmit` (expression)\n- `className` (string) = \"space-y-4\"\n\n\n\n### 📋 Input Fields\n\n#### input\n\n> **Location**: `src/app/content-writer/page.tsx:532`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"text\"\n- `value` (expression)\n- `onChange` (expression)\n- `placeholder` (string) = \"Enter article title...\"\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n- `required` (unknown)\n\n\n#### select\n\n> **Location**: `src/app/content-writer/page.tsx:546`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n- `required` (unknown)\n\n\n#### select\n\n> **Location**: `src/app/content-writer/page.tsx:565`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n\n\n#### input\n\n> **Location**: `src/app/content-writer/page.tsx:585`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"text\"\n- `value` (expression)\n- `onChange` (expression)\n- `placeholder` (string) = \"keyword1, keyword2, keyword3\"\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n\n\n#### select\n\n> **Location**: `src/app/content-writer/page.tsx:628`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"text-sm border border-gray-300 dark:border-gray-600 rounded-md px-3 py-1 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n\n\n\n",
        "navigationLinks": [
          "[Cms Connections](#cms-connections)"
        ],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/cms-connections",
        "name": "Cms Connections",
        "slug": "cms-connections",
        "purpose": "The Cms Connections page provides user interface and functionality for cms connections related features.",
        "components": [
          "button",
          "button",
          "button",
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button - \"Connect CMS\"\n\n> **Location**: `src/app/cms-connections/page.tsx:120`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Connect CMS\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn bg-violet-600 hover:bg-violet-700 text-white\"\n\n\n#### button - \"Cancel\"\n\n> **Location**: `src/app/cms-connections/page.tsx:138`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Cancel\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"text-gray-500 hover:text-gray-700 text-sm\"\n\n\n#### button - \"Try Again\"\n\n> **Location**: `src/app/cms-connections/page.tsx:163`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Try Again\" that triggers user actions\n\n**Click Handler**: `fetchConnections`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn bg-blue-600 hover:bg-blue-700 text-white\"\n\n\n#### button - \"Get Started\"\n\n> **Location**: `src/app/cms-connections/page.tsx:185`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Get Started\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn bg-violet-600 hover:bg-violet-700 text-white\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/chat",
        "name": "Chat",
        "slug": "chat",
        "purpose": "The Chat page provides user interface and functionality for chat related features.",
        "components": [],
        "componentsMarkdown": "**No interactive components detected on this page.**",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/autopilot",
        "name": "Autopilot",
        "slug": "autopilot",
        "purpose": "The Autopilot page provides user interface and functionality for autopilot related features.",
        "components": [
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button - \"Get Tracking Script\"\n\n> **Location**: `src/app/autopilot/page.tsx:98`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Get Tracking Script\" that triggers user actions\n\n**Props**:\n- `className` (string) = \"w-full bg-purple-600 hover:bg-purple-700 text-white font-medium py-2 px-4 rounded-lg transition-colors\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/article-writer",
        "name": "Article Writer",
        "slug": "article-writer",
        "purpose": "The Article Writer page provides user interface and functionality for article writer related features.",
        "components": [
          "button",
          "a",
          "button",
          "form",
          "input",
          "select",
          "select",
          "input",
          "button",
          "button",
          "select",
          "button",
          "button",
          "button",
          "a",
          "a",
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button\n\n> **Location**: `src/app/article-writer/page.tsx:449`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"ml-auto text-red-400 hover:text-red-600\"\n\n\n#### button - \"Create New Article\"\n\n> **Location**: `src/app/article-writer/page.tsx:492`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Create New Article\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-4 py-2 bg-violet-600 hover:bg-violet-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button - \"Cancel\"\n\n> **Location**: `src/app/article-writer/page.tsx:582`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Cancel\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `type` (string) = \"button\"\n- `onClick` (expression)\n- `className` (string) = \"px-4 py-2 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/article-writer/page.tsx:589`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Props**:\n- `type` (string) = \"submit\"\n- `disabled` (expression)\n- `className` (string) = \"px-4 py-2 bg-violet-600 hover:bg-violet-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/article-writer/page.tsx:704`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-blue-600 hover:bg-blue-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/article-writer/page.tsx:725`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-orange-600 hover:bg-orange-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/article-writer/page.tsx:746`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-green-600 hover:bg-green-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n#### button\n\n> **Location**: `src/app/article-writer/page.tsx:793`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `disabled` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-red-600 hover:bg-red-700 disabled:opacity-50 text-white rounded-lg transition-colors\"\n\n\n\n### 🔗 Navigation Links\n\n#### a - \"Set Up CMS Connection\"\n\n> **Location**: `src/app/article-writer/page.tsx:476`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"Set Up CMS Connection\" that takes users to different pages\n\n**Navigates To**: [Cms Connections](#cms-connections) (`/cms-connections`)\n\n**Props**:\n- `href` (string) = \"/cms-connections\"\n- `className` (string) = \"inline-flex items-center px-4 py-2 bg-violet-600 hover:bg-violet-700 text-white rounded-lg transition-colors\"\n\n\n#### a - \"View Live Article\"\n\n> **Location**: `src/app/article-writer/page.tsx:767`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"View Live Article\" that takes users to different pages\n\n**Props**:\n- `href` (expression)\n- `target` (string) = \"_blank\"\n- `rel` (string) = \"noopener noreferrer\"\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors\"\n\n\n#### a - \"Edit in Strapi\"\n\n> **Location**: `src/app/article-writer/page.tsx:780`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"Edit in Strapi\" that takes users to different pages\n\n**Props**:\n- `href` (expression)\n- `target` (string) = \"_blank\"\n- `rel` (string) = \"noopener noreferrer\"\n- `className` (string) = \"inline-flex items-center px-3 py-1 text-sm bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors\"\n\n\n\n### 📝 Forms & Input\n\n#### form\n\n> **Location**: `src/app/article-writer/page.tsx:511`  \n> **Type**: form  \n> **Description**: Form component for user input and data submission\n\n**Props**:\n- `onSubmit` (expression)\n- `className` (string) = \"space-y-4\"\n\n\n\n### 📋 Input Fields\n\n#### input\n\n> **Location**: `src/app/article-writer/page.tsx:516`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"text\"\n- `value` (expression)\n- `onChange` (expression)\n- `placeholder` (string) = \"Enter article title...\"\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n- `required` (unknown)\n\n\n#### select\n\n> **Location**: `src/app/article-writer/page.tsx:530`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n- `required` (unknown)\n\n\n#### select\n\n> **Location**: `src/app/article-writer/page.tsx:549`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n\n\n#### input\n\n> **Location**: `src/app/article-writer/page.tsx:569`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"text\"\n- `value` (expression)\n- `onChange` (expression)\n- `placeholder` (string) = \"keyword1, keyword2, keyword3\"\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n\n\n#### select\n\n> **Location**: `src/app/article-writer/page.tsx:611`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"text-sm border border-gray-300 dark:border-gray-600 rounded-md px-3 py-1 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-violet-500 focus:border-transparent\"\n\n\n\n",
        "navigationLinks": [
          "[Cms Connections](#cms-connections)"
        ],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/add-website",
        "name": "Add Website",
        "slug": "add-website",
        "purpose": "The Add Website page provides user interface and functionality for add website related features.",
        "components": [
          "textarea",
          "button",
          "a",
          "form",
          "input",
          "select",
          "input",
          "input",
          "button",
          "button"
        ],
        "componentsMarkdown": "### 📋 Input Fields\n\n#### textarea\n\n> **Location**: `src/app/add-website/page.tsx:159`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `className` (string) = \"w-full p-4 bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg text-sm font-mono\"\n- `rows` (expression)\n- `readOnly` (unknown)\n- `value` (expression)\n\n\n#### input\n\n> **Location**: `src/app/add-website/page.tsx:223`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"text\"\n- `id` (string) = \"domain\"\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-violet-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n- `placeholder` (string) = \"example.com\"\n- `required` (unknown)\n\n\n#### select\n\n> **Location**: `src/app/add-website/page.tsx:241`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `id` (string) = \"language\"\n- `value` (expression)\n- `onChange` (expression)\n- `className` (string) = \"w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-violet-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n\n\n#### input\n\n> **Location**: `src/app/add-website/page.tsx:262`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `id` (string) = \"enableMetaTags\"\n- `type` (string) = \"checkbox\"\n- `checked` (expression)\n- `onChange` (expression)\n- `className` (string) = \"h-4 w-4 text-violet-600 focus:ring-violet-500 border-gray-300 rounded\"\n\n\n#### input\n\n> **Location**: `src/app/add-website/page.tsx:278`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `id` (string) = \"enableImageTags\"\n- `type` (string) = \"checkbox\"\n- `checked` (expression)\n- `onChange` (expression)\n- `className` (string) = \"h-4 w-4 text-violet-600 focus:ring-violet-500 border-gray-300 rounded\"\n\n\n\n### 🔘 Buttons & Actions\n\n#### button - \"Copy Code\"\n\n> **Location**: `src/app/add-website/page.tsx:170`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Copy Code\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn bg-violet-600 hover:bg-violet-700 text-white\"\n\n\n#### button - \"Cancel\"\n\n> **Location**: `src/app/add-website/page.tsx:295`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Cancel\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `type` (string) = \"button\"\n- `onClick` (expression)\n- `className` (string) = \"btn border-gray-200 dark:border-gray-700/60 hover:border-gray-300 dark:hover:border-gray-600 text-gray-800 dark:text-gray-300\"\n\n\n#### button\n\n> **Location**: `src/app/add-website/page.tsx:302`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Props**:\n- `type` (string) = \"submit\"\n- `disabled` (expression)\n- `className` (string) = \"btn bg-violet-500 hover:bg-violet-600 text-white disabled:opacity-50 disabled:cursor-not-allowed\"\n\n\n\n### 🔗 Navigation Links\n\n#### a - \"Done\"\n\n> **Location**: `src/app/add-website/page.tsx:178`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"Done\" that takes users to different pages\n\n**Navigates To**: [App](#app) (`/`)\n\n**Props**:\n- `href` (string) = \"/\"\n- `className` (string) = \"btn bg-gray-900 text-gray-100 hover:bg-gray-800 dark:bg-gray-100 dark:text-gray-800 dark:hover:bg-white\"\n\n\n\n### 📝 Forms & Input\n\n#### form\n\n> **Location**: `src/app/add-website/page.tsx:202`  \n> **Type**: form  \n> **Description**: Form component for user input and data submission\n\n**Props**:\n- `onSubmit` (expression)\n- `className` (string) = \"space-y-6\"\n\n\n\n",
        "navigationLinks": [
          "[App](#app)"
        ],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/account",
        "name": "Account",
        "slug": "account",
        "purpose": "The Account page provides user interface and functionality for account related features.",
        "components": [
          "input",
          "input",
          "input",
          "button"
        ],
        "componentsMarkdown": "### 📋 Input Fields\n\n#### input\n\n> **Location**: `src/app/account/page.tsx:60`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"email\"\n- `value` (expression)\n- `disabled` (unknown)\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-700 text-gray-500 dark:text-gray-400\"\n\n\n#### input\n\n> **Location**: `src/app/account/page.tsx:71`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"text\"\n- `value` (expression)\n- `disabled` (unknown)\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-700 text-gray-500 dark:text-gray-400 font-mono text-xs\"\n\n\n#### input\n\n> **Location**: `src/app/account/page.tsx:82`  \n> **Type**: input  \n> **Description**: Input field for user data entry\n\n**Props**:\n- `type` (string) = \"text\"\n- `value` (expression)\n- `disabled` (unknown)\n- `className` (string) = \"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-700 text-gray-500 dark:text-gray-400\"\n\n\n\n### 🔘 Buttons & Actions\n\n#### button - \"Sign Out\"\n\n> **Location**: `src/app/account/page.tsx:107`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Sign Out\" that triggers user actions\n\n**Click Handler**: `handleSignOut`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn border-gray-200 dark:border-gray-700/60 hover:border-gray-300 dark:hover:border-gray-600 text-gray-800 dark:text-gray-300\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/website/[websiteId]",
        "name": "[website Id]",
        "slug": "website-id",
        "purpose": "The [website Id] page provides user interface and functionality for [website id] related features.",
        "components": [
          "button",
          "nav",
          "button",
          "button",
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button - \"Return to Dashboard\"\n\n> **Location**: `src/app/website/[websiteId]/page.tsx:272`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Return to Dashboard\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn bg-violet-600 hover:bg-violet-700 text-white\"\n\n\n#### button - \"Dashboard\"\n\n> **Location**: `src/app/website/[websiteId]/page.tsx:316`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Dashboard\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"inline-flex items-center text-sm font-medium text-gray-700 hover:text-violet-600 dark:text-gray-400 dark:hover:text-white\"\n\n\n#### button - \"View installation instructions →\"\n\n> **Location**: `src/app/website/[websiteId]/page.tsx:380`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"View installation instructions →\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"text-sm font-medium text-orange-800 hover:text-orange-900\"\n\n\n#### button - \"Connect GSC\"\n\n> **Location**: `src/app/website/[websiteId]/page.tsx:409`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Connect GSC\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded text-blue-700 bg-blue-100 hover:bg-blue-200\"\n\n\n\n### 🧭 Navigation Components\n\n#### nav\n\n> **Location**: `src/app/website/[websiteId]/page.tsx:313`  \n> **Type**: navigation  \n> **Description**: Navigation component for site/app navigation\n\n**Props**:\n- `className` (string) = \"flex mb-3\"\n- `aria-label` (string) = \"Breadcrumb\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/meta-tags/[token]",
        "name": "[token]",
        "slug": "token",
        "purpose": "The [token] page provides user interface and functionality for [token] related features.",
        "components": [
          "a",
          "a",
          "button",
          "button"
        ],
        "componentsMarkdown": "### 🔗 Navigation Links\n\n#### a - \"Back to Dashboard\"\n\n> **Location**: `src/app/meta-tags/[token]/page.tsx:175`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"Back to Dashboard\" that takes users to different pages\n\n**Navigates To**: [App](#app) (`/`)\n\n**Props**:\n- `href` (string) = \"/\"\n- `className` (string) = \"inline-flex items-center text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-200 transition-colors mr-4\"\n\n\n#### a\n\n> **Location**: `src/app/meta-tags/[token]/page.tsx:249`  \n> **Type**: link  \n> **Description**: Navigation link that takes users to different pages\n\n**Props**:\n- `href` (expression)\n- `target` (string) = \"_blank\"\n- `rel` (string) = \"noopener noreferrer\"\n- `className` (string) = \"text-indigo-600 hover:text-indigo-700 dark:text-indigo-400 dark:hover:text-indigo-300\"\n\n\n\n### 🔘 Buttons & Actions\n\n#### button - \"Edit\"\n\n> **Location**: `src/app/meta-tags/[token]/page.tsx:284`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Edit\" that triggers user actions\n\n**Props**:\n- `className` (string) = \"text-indigo-600 hover:text-indigo-700 dark:text-indigo-400 dark:hover:text-indigo-300 text-sm\"\n\n\n#### button - \"Delete\"\n\n> **Location**: `src/app/meta-tags/[token]/page.tsx:287`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Delete\" that triggers user actions\n\n**Props**:\n- `className` (string) = \"text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 text-sm\"\n\n\n\n",
        "navigationLinks": [
          "[App](#app)"
        ],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/alt-tags/[token]",
        "name": "[token]",
        "slug": "token",
        "purpose": "The [token] page provides user interface and functionality for [token] related features.",
        "components": [
          "a",
          "a",
          "button",
          "button"
        ],
        "componentsMarkdown": "### 🔗 Navigation Links\n\n#### a - \"Back to Dashboard\"\n\n> **Location**: `src/app/alt-tags/[token]/page.tsx:175`  \n> **Type**: link  \n> **Description**: Navigation link labeled \"Back to Dashboard\" that takes users to different pages\n\n**Navigates To**: [App](#app) (`/`)\n\n**Props**:\n- `href` (string) = \"/\"\n- `className` (string) = \"inline-flex items-center text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-200 transition-colors mr-4\"\n\n\n#### a\n\n> **Location**: `src/app/alt-tags/[token]/page.tsx:264`  \n> **Type**: link  \n> **Description**: Navigation link that takes users to different pages\n\n**Props**:\n- `href` (expression)\n- `target` (string) = \"_blank\"\n- `rel` (string) = \"noopener noreferrer\"\n- `className` (string) = \"text-indigo-600 hover:text-indigo-700 dark:text-indigo-400 dark:hover:text-indigo-300\"\n\n\n\n### 🔘 Buttons & Actions\n\n#### button - \"Edit\"\n\n> **Location**: `src/app/alt-tags/[token]/page.tsx:288`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Edit\" that triggers user actions\n\n**Props**:\n- `className` (string) = \"text-indigo-600 hover:text-indigo-700 dark:text-indigo-400 dark:hover:text-indigo-300 text-sm\"\n\n\n#### button - \"Delete\"\n\n> **Location**: `src/app/alt-tags/[token]/page.tsx:291`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Delete\" that triggers user actions\n\n**Props**:\n- `className` (string) = \"text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 text-sm\"\n\n\n\n",
        "navigationLinks": [
          "[App](#app)"
        ],
        "dataFlow": "Data flows through React props and state management"
      },
      {
        "route": "/website/[websiteId]/cms-connection",
        "name": "Cms Connection",
        "slug": "cms-connection",
        "purpose": "The Cms Connection page provides user interface and functionality for cms connection related features.",
        "components": [
          "button",
          "nav",
          "button",
          "button",
          "button"
        ],
        "componentsMarkdown": "### 🔘 Buttons & Actions\n\n#### button - \"Return to Dashboard\"\n\n> **Location**: `src/app/website/[websiteId]/cms-connection/page.tsx:185`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Return to Dashboard\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"btn bg-violet-600 hover:bg-violet-700 text-white\"\n\n\n#### button - \"Dashboard\"\n\n> **Location**: `src/app/website/[websiteId]/cms-connection/page.tsx:229`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Dashboard\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"inline-flex items-center text-sm font-medium text-gray-700 hover:text-violet-600 dark:text-gray-400 dark:hover:text-white\"\n\n\n#### button\n\n> **Location**: `src/app/website/[websiteId]/cms-connection/page.tsx:241`  \n> **Type**: button  \n> **Description**: Interactive button that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"ml-1 text-sm font-medium text-gray-700 hover:text-violet-600 dark:text-gray-400 dark:hover:text-white md:ml-2\"\n\n\n#### button - \"Disconnect\"\n\n> **Location**: `src/app/website/[websiteId]/cms-connection/page.tsx:329`  \n> **Type**: button  \n> **Description**: Interactive button labeled \"Disconnect\" that triggers user actions\n\n**Click Handler**: `inline-function`\n\n**Props**:\n- `onClick` (expression)\n- `className` (string) = \"text-sm text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300\"\n\n\n\n### 🧭 Navigation Components\n\n#### nav\n\n> **Location**: `src/app/website/[websiteId]/cms-connection/page.tsx:226`  \n> **Type**: navigation  \n> **Description**: Navigation component for site/app navigation\n\n**Props**:\n- `className` (string) = \"flex mb-4\"\n- `aria-label` (string) = \"Breadcrumb\"\n\n\n\n",
        "navigationLinks": [],
        "dataFlow": "Data flows through React props and state management"
      }
    ],
    "styling": "CSS",
    "stateManagement": "React State (useState, useContext)"
  },
  "backend": {
    "overview": "# Backend API Documentation\n\nThis documentation provides a comprehensive overview of the backend API, including routes, functions, and error handling. Each section is designed to help developers understand and effectively utilize the API.\n\n## Table of Contents\n- [1. Strapi Publishing Debug & Fix Summary](#1-strapi-publishing-debug--fix-summary)\n- [2. Admin Tool API](#2-admin-tool-api)\n- [3. Strapi CMS Configuration](#3-strapi-cms-configuration)\n- [4. UI Component → API Mapping](#4-ui-component--api-mapping)\n\n---\n\n## 1. Strapi Publishing Debug & Fix Summary\n\n### Issues Identified & Fixed ✅\n\n#### 1.1 CMS Manager Database Schema Mismatch\n- **Problem**: CMS Manager was using modern schema (`user_id`, `is_active`) but the database has a legacy schema (`user_token`, `status`).\n- **Error**: `400 Bad Request` when querying `cms_connections` table.\n- **Fixed**: Updated `/src/lib/cms/cms-manager.ts` to use correct column names:\n  - `user_id` → `user_token`\n  - `is_active` → `status = 'active'`\n  - Updated `dbRecordToConnection()` to map legacy schema properly.\n\n#### 1.2 Created Supabase Edge Function\n- **File**: `/supabase/functions/publish-article/index.ts`\n- **Purpose**: Replace Vercel Edge Functions with Supabase Edge Functions.\n- **Features**:\n  - Same publishing logic as current API.\n  - Improved Strapi content type parsing.\n  - Better error handling and logging.\n  - CORS support for frontend calls.\n\n### Current Strapi Publishing Error Analysis\nThe error you're seeing:\n```\n\"Method not allowed for endpoint: api::blog-post.blog-post\"\n```\n\n---\n\n## 2. Admin Tool API\n\n### Routes Overview\n| HTTP Method | Route                          | Description                          |\n|-------------|--------------------------------|--------------------------------------|\n| GET         | `/api/health`                 | Check the health of the API         |\n| GET         | `/api/websites`               | Retrieve all websites                |\n| GET         | `/api/websites/:token`        | Retrieve a specific website          |\n| POST        | `/api/test-endpoints/:token`   | Test specific endpoints              |\n| POST        | `/api/websites`               | Create a new website                 |\n| GET         | `/api/users`                  | Retrieve all users                   |\n| GET         | `/api/env`                    | Get environment variables            |\n| GET         | `/`                            | Root endpoint                        |\n\n### Example Route Implementation\n```typescript\napp.get('/api/health', (req, res) => {\n  res.json({ status: 'ok', timestamp: new Date().toISOString() });\n});\n```\n\n### Error Handling\n- **Common Errors**:\n  - `404 Not Found`: When the requested resource does not exist.\n  - `500 Internal Server Error`: For unexpected server errors.\n\n---\n\n## 3. Strapi CMS Configuration\n\n### Configuration Files Overview\n\n#### 3.1 Server Configuration\n- **File**: `strapi-cms/config/server.ts`\n```typescript\nexport default ({ env }: { env: any }) => ({\n  host: env('HOST', '0.0.0.0'),\n  port: env.int('PORT', 1337),\n  app: {\n    keys: env.array('APP_KEYS'),\n  },\n});\n```\n\n#### 3.2 Plugin Configuration\n- **File**: `strapi-cms/config/plugins.ts`\n```typescript\nexport default () => ({});\n```\n\n---\n\n## 4. UI Component → API Mapping\n\n| Slug           | Service Function                | Linked Components       | Purpose                                   | Parameters                                   | Response                                     | Error Handling                             | Database Operations                      |\n|----------------|----------------------------------|-------------------------|-------------------------------------------|----------------------------------------------|----------------------------------------------|-------------------------------------------|------------------------------------------|\n| `get-health`   | `GET /api/health`               | HealthCheckComponent     | Check API health                          | None                                         | `{ status: 'ok', timestamp: 'ISOString' }` | `500 Internal Server Error`               | None                                     |\n| `get-websites` | `GET /api/websites`             | WebsiteListComponent     | Retrieve all websites                     | None                                         | `[{ id: 1, name: 'Website 1' }, ...]`     | `404 Not Found`                           | Read from `websites` table              |\n| `post-websites`| `POST /api/websites`            | WebsiteFormComponent     | Create a new website                      | `{ name: string, url: string }`             | `{ id: 1, name: 'New Website' }`           | `400 Bad Request`, `500 Internal Server Error` | Insert into `websites` table            |\n| `get-users`    | `GET /api/users`                | UserListComponent        | Retrieve all users                        | None                                         | `[{ id: 1, email: 'user@example.com' }, ...]` | `404 Not Found`                           | Read from `users` table                 |\n\n---\n\nThis documentation serves as a guide for developers to understand the backend API's structure, functionality, and error handling. For any further questions or clarifications, please refer to the codebase or reach out to the development team.",
    "apis": [
      {
        "method": "GET",
        "path": "/api/health",
        "slug": "get-api-health",
        "purpose": "GET endpoint for /api/health",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "admin-tool/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/api/websites",
        "slug": "get-api-websites",
        "purpose": "GET endpoint for /api/websites",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "admin-tool/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/api/websites/:token",
        "slug": "get-api-websites-token",
        "purpose": "GET endpoint for /api/websites/:token",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "admin-tool/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/api/test-endpoints/:token",
        "slug": "post-api-test-endpoints-token",
        "purpose": "POST endpoint for /api/test-endpoints/:token",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "admin-tool/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/api/websites",
        "slug": "post-api-websites",
        "purpose": "POST endpoint for /api/websites",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "admin-tool/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/api/users",
        "slug": "get-api-users",
        "purpose": "GET endpoint for /api/users",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "admin-tool/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/api/env",
        "slug": "get-api-env",
        "purpose": "GET endpoint for /api/env",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "admin-tool/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/",
        "slug": "get",
        "purpose": "GET endpoint for /",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "admin-tool/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "gsc_connected",
        "slug": "get-gsc-connected",
        "purpose": "GET endpoint for gsc_connected",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/components/GSCConnection.tsx",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "error",
        "slug": "get-error",
        "purpose": "GET endpoint for error",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/components/GSCConnection.tsx",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "details",
        "slug": "get-details",
        "purpose": "GET endpoint for details",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/components/GSCConnection.tsx",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/",
        "slug": "get",
        "purpose": "GET endpoint for /",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/server.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_URL",
        "slug": "get-supabase-url",
        "purpose": "GET endpoint for SUPABASE_URL",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/websites/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_SERVICE_ROLE_KEY",
        "slug": "get-supabase-service-role-key",
        "purpose": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/websites/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "Authorization",
        "slug": "get-authorization",
        "purpose": "GET endpoint for Authorization",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/websites/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_URL",
        "slug": "get-supabase-url",
        "purpose": "GET endpoint for SUPABASE_URL",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/publish-article/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_SERVICE_ROLE_KEY",
        "slug": "get-supabase-service-role-key",
        "purpose": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/publish-article/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_URL",
        "slug": "get-supabase-url",
        "purpose": "GET endpoint for SUPABASE_URL",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/get-meta-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_SERVICE_ROLE_KEY",
        "slug": "get-supabase-service-role-key",
        "purpose": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/get-meta-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "token",
        "slug": "get-token",
        "purpose": "GET endpoint for token",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/get-meta-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_URL",
        "slug": "get-supabase-url",
        "purpose": "GET endpoint for SUPABASE_URL",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/get-alt-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_SERVICE_ROLE_KEY",
        "slug": "get-supabase-service-role-key",
        "purpose": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/get-alt-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "token",
        "slug": "get-token",
        "purpose": "GET endpoint for token",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/get-alt-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_URL",
        "slug": "get-supabase-url",
        "purpose": "GET endpoint for SUPABASE_URL",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-schema-markup/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_SERVICE_ROLE_KEY",
        "slug": "get-supabase-service-role-key",
        "purpose": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-schema-markup/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_URL",
        "slug": "get-supabase-url",
        "purpose": "GET endpoint for SUPABASE_URL",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-meta-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_SERVICE_ROLE_KEY",
        "slug": "get-supabase-service-role-key",
        "purpose": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-meta-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "OPENAI_API_KEY",
        "slug": "get-openai-api-key",
        "purpose": "GET endpoint for OPENAI_API_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-meta-tags/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_URL",
        "slug": "get-supabase-url",
        "purpose": "GET endpoint for SUPABASE_URL",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-image-alt/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_SERVICE_ROLE_KEY",
        "slug": "get-supabase-service-role-key",
        "purpose": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-image-alt/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "OPENAI_API_KEY",
        "slug": "get-openai-api-key",
        "purpose": "GET endpoint for OPENAI_API_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-image-alt/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "OPENAI_API_KEY",
        "slug": "get-openai-api-key",
        "purpose": "GET endpoint for OPENAI_API_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-image-alt/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "OPENAI_API_KEY",
        "slug": "get-openai-api-key",
        "purpose": "GET endpoint for OPENAI_API_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-article/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_URL",
        "slug": "get-supabase-url",
        "purpose": "GET endpoint for SUPABASE_URL",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-article/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "SUPABASE_SERVICE_ROLE_KEY",
        "slug": "get-supabase-service-role-key",
        "purpose": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "supabase/functions/generate-article/index.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "Location",
        "slug": "get-location",
        "purpose": "GET endpoint for Location",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "Location",
        "slug": "get-location",
        "purpose": "GET endpoint for Location",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "DELETE",
        "path": "index",
        "slug": "delete-index",
        "purpose": "DELETE endpoint for index",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "Content-Type",
        "slug": "get-content-type",
        "purpose": "GET endpoint for Content-Type",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "Location",
        "slug": "get-location",
        "purpose": "GET endpoint for Location",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "DELETE",
        "path": "index",
        "slug": "delete-index",
        "purpose": "DELETE endpoint for index",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "DELETE",
        "path": "Content-Type",
        "slug": "delete-content-type",
        "purpose": "DELETE endpoint for Content-Type",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "DELETE",
        "path": "Content-Type",
        "slug": "delete-content-type",
        "purpose": "DELETE endpoint for Content-Type",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "content-type",
        "slug": "get-content-type",
        "purpose": "GET endpoint for content-type",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "content-length",
        "slug": "get-content-length",
        "purpose": "GET endpoint for content-length",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "field",
        "slug": "get-field",
        "purpose": "GET endpoint for field",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "redirectTo",
        "slug": "get-redirectto",
        "purpose": "GET endpoint for redirectTo",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "info",
        "slug": "get-info",
        "purpose": "GET endpoint for info",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "registrationToken",
        "slug": "get-registrationtoken",
        "purpose": "GET endpoint for registrationToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "code",
        "slug": "get-code",
        "purpose": "GET endpoint for code",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "code",
        "slug": "get-code",
        "purpose": "GET endpoint for code",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "field",
        "slug": "get-field",
        "purpose": "GET endpoint for field",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "region",
        "slug": "get-region",
        "purpose": "GET endpoint for region",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "vertical",
        "slug": "get-vertical",
        "purpose": "GET endpoint for vertical",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "line",
        "slug": "get-line",
        "purpose": "GET endpoint for line",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "lineAlign",
        "slug": "get-linealign",
        "purpose": "GET endpoint for lineAlign",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "snapToLines",
        "slug": "get-snaptolines",
        "purpose": "GET endpoint for snapToLines",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "size",
        "slug": "get-size",
        "purpose": "GET endpoint for size",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "align",
        "slug": "get-align",
        "purpose": "GET endpoint for align",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "position",
        "slug": "get-position",
        "purpose": "GET endpoint for position",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "age",
        "slug": "get-age",
        "purpose": "GET endpoint for age",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "Content-Range",
        "slug": "get-content-range",
        "purpose": "GET endpoint for Content-Range",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "Content-Length",
        "slug": "get-content-length",
        "purpose": "GET endpoint for Content-Length",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "CMCD",
        "slug": "get-cmcd",
        "purpose": "GET endpoint for CMCD",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-gesture-receiver",
        "slug": "get-media-gesture-receiver",
        "purpose": "GET endpoint for media-gesture-receiver",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-container",
        "slug": "get-media-container",
        "purpose": "GET endpoint for media-container",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "#xywh",
        "slug": "get-xywh",
        "purpose": "GET endpoint for #xywh",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-controller",
        "slug": "get-media-controller",
        "purpose": "GET endpoint for media-controller",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-chrome-button",
        "slug": "get-media-chrome-button",
        "purpose": "GET endpoint for media-chrome-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-airplay-button",
        "slug": "get-media-airplay-button",
        "purpose": "GET endpoint for media-airplay-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-captions-button",
        "slug": "get-media-captions-button",
        "purpose": "GET endpoint for media-captions-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-cast-button",
        "slug": "get-media-cast-button",
        "purpose": "GET endpoint for media-cast-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-chrome-dialog",
        "slug": "get-media-chrome-dialog",
        "purpose": "GET endpoint for media-chrome-dialog",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-chrome-range",
        "slug": "get-media-chrome-range",
        "purpose": "GET endpoint for media-chrome-range",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-control-bar",
        "slug": "get-media-control-bar",
        "purpose": "GET endpoint for media-control-bar",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-text-display",
        "slug": "get-media-text-display",
        "purpose": "GET endpoint for media-text-display",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-duration-display",
        "slug": "get-media-duration-display",
        "purpose": "GET endpoint for media-duration-display",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-fullscreen-button",
        "slug": "get-media-fullscreen-button",
        "purpose": "GET endpoint for media-fullscreen-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-live-button",
        "slug": "get-media-live-button",
        "purpose": "GET endpoint for media-live-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-loading-indicator",
        "slug": "get-media-loading-indicator",
        "purpose": "GET endpoint for media-loading-indicator",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-mute-button",
        "slug": "get-media-mute-button",
        "purpose": "GET endpoint for media-mute-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-pip-button",
        "slug": "get-media-pip-button",
        "purpose": "GET endpoint for media-pip-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-playback-rate-button",
        "slug": "get-media-playback-rate-button",
        "purpose": "GET endpoint for media-playback-rate-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-play-button",
        "slug": "get-media-play-button",
        "purpose": "GET endpoint for media-play-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-poster-image",
        "slug": "get-media-poster-image",
        "purpose": "GET endpoint for media-poster-image",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-preview-chapter-display",
        "slug": "get-media-preview-chapter-display",
        "purpose": "GET endpoint for media-preview-chapter-display",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-preview-thumbnail",
        "slug": "get-media-preview-thumbnail",
        "purpose": "GET endpoint for media-preview-thumbnail",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-preview-time-display",
        "slug": "get-media-preview-time-display",
        "purpose": "GET endpoint for media-preview-time-display",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-seek-backward-button",
        "slug": "get-media-seek-backward-button",
        "purpose": "GET endpoint for media-seek-backward-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-seek-forward-button",
        "slug": "get-media-seek-forward-button",
        "purpose": "GET endpoint for media-seek-forward-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-time-display",
        "slug": "get-media-time-display",
        "purpose": "GET endpoint for media-time-display",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-time-range",
        "slug": "get-media-time-range",
        "purpose": "GET endpoint for media-time-range",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-tooltip",
        "slug": "get-media-tooltip",
        "purpose": "GET endpoint for media-tooltip",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-volume-range",
        "slug": "get-media-volume-range",
        "purpose": "GET endpoint for media-volume-range",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "DELETE",
        "path": "muted",
        "slug": "delete-muted",
        "purpose": "DELETE endpoint for muted",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "token",
        "slug": "get-token",
        "purpose": "GET endpoint for token",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "token",
        "slug": "get-token",
        "purpose": "GET endpoint for token",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "mux-video",
        "slug": "get-mux-video",
        "purpose": "GET endpoint for mux-video",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-theme",
        "slug": "get-media-theme",
        "purpose": "GET endpoint for media-theme",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-chrome-menu",
        "slug": "get-media-chrome-menu",
        "purpose": "GET endpoint for media-chrome-menu",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-chrome-menu-item",
        "slug": "get-media-chrome-menu-item",
        "purpose": "GET endpoint for media-chrome-menu-item",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-settings-menu",
        "slug": "get-media-settings-menu",
        "purpose": "GET endpoint for media-settings-menu",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-settings-menu-item",
        "slug": "get-media-settings-menu-item",
        "purpose": "GET endpoint for media-settings-menu-item",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-chrome-menu-button",
        "slug": "get-media-chrome-menu-button",
        "purpose": "GET endpoint for media-chrome-menu-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-settings-menu-button",
        "slug": "get-media-settings-menu-button",
        "purpose": "GET endpoint for media-settings-menu-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-audio-track-menu",
        "slug": "get-media-audio-track-menu",
        "purpose": "GET endpoint for media-audio-track-menu",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-audio-track-menu-button",
        "slug": "get-media-audio-track-menu-button",
        "purpose": "GET endpoint for media-audio-track-menu-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-captions-menu",
        "slug": "get-media-captions-menu",
        "purpose": "GET endpoint for media-captions-menu",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-captions-menu-button",
        "slug": "get-media-captions-menu-button",
        "purpose": "GET endpoint for media-captions-menu-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-playback-rate-menu",
        "slug": "get-media-playback-rate-menu",
        "purpose": "GET endpoint for media-playback-rate-menu",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-playback-rate-menu-button",
        "slug": "get-media-playback-rate-menu-button",
        "purpose": "GET endpoint for media-playback-rate-menu-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-rendition-menu",
        "slug": "get-media-rendition-menu",
        "purpose": "GET endpoint for media-rendition-menu",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-rendition-menu-button",
        "slug": "get-media-rendition-menu-button",
        "purpose": "GET endpoint for media-rendition-menu-button",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-dialog",
        "slug": "get-media-dialog",
        "purpose": "GET endpoint for media-dialog",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "mxp-dialog",
        "slug": "get-mxp-dialog",
        "purpose": "GET endpoint for mxp-dialog",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "media-theme-gerwig",
        "slug": "get-media-theme-gerwig",
        "purpose": "GET endpoint for media-theme-gerwig",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "mux-player",
        "slug": "get-mux-player",
        "purpose": "GET endpoint for mux-player",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "content-type",
        "slug": "get-content-type",
        "purpose": "GET endpoint for content-type",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "content-type",
        "slug": "get-content-type",
        "purpose": "GET endpoint for content-type",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/strapi-BzxSP0n3.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/content-type-builder/schema",
        "slug": "get-content-type-builder-schema",
        "purpose": "GET endpoint for /content-type-builder/schema",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/index-BTp6pMEF.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/content-type-builder/reserved-names",
        "slug": "get-content-type-builder-reserved-names",
        "purpose": "GET endpoint for /content-type-builder/reserved-names",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/index-BTp6pMEF.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/content-type-builder/update-schema",
        "slug": "post-content-type-builder-update-schema",
        "purpose": "POST endpoint for /content-type-builder/update-schema",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/index-BTp6pMEF.js",
        "serviceFunction": "handler"
      },
      {
        "method": "DELETE",
        "path": "",
        "slug": "delete",
        "purpose": "DELETE endpoint for ",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/MarketplacePage-CyKHKP18.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "logo-url",
        "slug": "get-logo-url",
        "purpose": "GET endpoint for logo-url",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "strapi-cms/dist/build/ApplicationInfoPage-hxiRoPKM.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "content-type",
        "slug": "get-content-type",
        "purpose": "GET endpoint for content-type",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/lib/cms/base-provider.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "mode",
        "slug": "get-mode",
        "purpose": "GET endpoint for mode",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/login/page.tsx",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/manage",
        "slug": "get-manage",
        "purpose": "GET endpoint for /manage",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/subscriptions.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/manage",
        "slug": "post-manage",
        "purpose": "POST endpoint for /manage",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/subscriptions.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/create-checkout-session",
        "slug": "post-create-checkout-session",
        "purpose": "POST endpoint for /create-checkout-session",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/subscriptions.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/webhook",
        "slug": "post-webhook",
        "purpose": "POST endpoint for /webhook",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/subscriptions.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/usage",
        "slug": "get-usage",
        "purpose": "GET endpoint for /usage",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/subscriptions.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/websites",
        "slug": "get-websites",
        "purpose": "GET endpoint for /websites",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/seo.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/websites",
        "slug": "post-websites",
        "purpose": "POST endpoint for /websites",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/seo.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/audit/:websiteId",
        "slug": "get-audit-websiteid",
        "purpose": "GET endpoint for /audit/:websiteId",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/seo.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/crawl/:websiteId",
        "slug": "get-crawl-websiteid",
        "purpose": "GET endpoint for /crawl/:websiteId",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/seo.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/issues/:websiteId",
        "slug": "get-issues-websiteid",
        "purpose": "GET endpoint for /issues/:websiteId",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/seo.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/",
        "slug": "get",
        "purpose": "GET endpoint for /",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/health.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/detailed",
        "slug": "get-detailed",
        "purpose": "GET endpoint for /detailed",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/health.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/ready",
        "slug": "get-ready",
        "purpose": "GET endpoint for /ready",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/health.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/alive",
        "slug": "get-alive",
        "purpose": "GET endpoint for /alive",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/health.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/connection",
        "slug": "get-connection",
        "purpose": "GET endpoint for /connection",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/gsc.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/oauth/start",
        "slug": "get-oauth-start",
        "purpose": "GET endpoint for /oauth/start",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/gsc.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/oauth/callback",
        "slug": "get-oauth-callback",
        "purpose": "GET endpoint for /oauth/callback",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/gsc.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/oauth/refresh",
        "slug": "post-oauth-refresh",
        "purpose": "POST endpoint for /oauth/refresh",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/gsc.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/properties",
        "slug": "get-properties",
        "purpose": "GET endpoint for /properties",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/gsc.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/sync",
        "slug": "post-sync",
        "purpose": "POST endpoint for /sync",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/gsc.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/performance",
        "slug": "get-performance",
        "purpose": "GET endpoint for /performance",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/gsc.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/connections",
        "slug": "get-connections",
        "purpose": "GET endpoint for /connections",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/cms.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/connections",
        "slug": "post-connections",
        "purpose": "POST endpoint for /connections",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/cms.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/connections/:id",
        "slug": "get-connections-id",
        "purpose": "GET endpoint for /connections/:id",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/cms.js",
        "serviceFunction": "handler"
      },
      {
        "method": "DELETE",
        "path": "/connections/:id",
        "slug": "delete-connections-id",
        "purpose": "DELETE endpoint for /connections/:id",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/cms.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/oauth/start",
        "slug": "get-oauth-start",
        "purpose": "GET endpoint for /oauth/start",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/cms.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/oauth/callback/:type",
        "slug": "get-oauth-callback-type",
        "purpose": "GET endpoint for /oauth/callback/:type",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/cms.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/test-connection",
        "slug": "post-test-connection",
        "purpose": "POST endpoint for /test-connection",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/cms.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/login",
        "slug": "post-login",
        "purpose": "POST endpoint for /login",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/auth.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/register",
        "slug": "post-register",
        "purpose": "POST endpoint for /register",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/auth.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/refresh",
        "slug": "post-refresh",
        "purpose": "POST endpoint for /refresh",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/auth.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/me",
        "slug": "get-me",
        "purpose": "GET endpoint for /me",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/auth.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/",
        "slug": "get",
        "purpose": "GET endpoint for /",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/articles.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/generate",
        "slug": "post-generate",
        "purpose": "POST endpoint for /generate",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/articles.js",
        "serviceFunction": "handler"
      },
      {
        "method": "POST",
        "path": "/publish",
        "slug": "post-publish",
        "purpose": "POST endpoint for /publish",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/articles.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "/:id",
        "slug": "get-id",
        "purpose": "GET endpoint for /:id",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/articles.js",
        "serviceFunction": "handler"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "slug": "put-id",
        "purpose": "PUT endpoint for /:id",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/articles.js",
        "serviceFunction": "handler"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "slug": "delete-id",
        "purpose": "DELETE endpoint for /:id",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/routes/articles.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "User-Agent",
        "slug": "get-user-agent",
        "purpose": "GET endpoint for User-Agent",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/middleware/logger.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "User-Agent",
        "slug": "get-user-agent",
        "purpose": "GET endpoint for User-Agent",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "api-service/src/middleware/errorHandler.js",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "site_url",
        "slug": "get-site-url",
        "purpose": "GET endpoint for site_url",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/lib/cms/providers/wordpress.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "user_login",
        "slug": "get-user-login",
        "purpose": "GET endpoint for user_login",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/lib/cms/providers/wordpress.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "password",
        "slug": "get-password",
        "purpose": "GET endpoint for password",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/lib/cms/providers/wordpress.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "shop",
        "slug": "get-shop",
        "purpose": "GET endpoint for shop",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/lib/cms/providers/shopify.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/websites/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/websites/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/websites/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "websiteId",
        "slug": "get-websiteid",
        "purpose": "GET endpoint for websiteId",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/websites/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "websiteUrl",
        "slug": "get-websiteurl",
        "purpose": "GET endpoint for websiteUrl",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "status",
        "slug": "get-status",
        "purpose": "GET endpoint for status",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "limit",
        "slug": "get-limit",
        "purpose": "GET endpoint for limit",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "offset",
        "slug": "get-offset",
        "purpose": "GET endpoint for offset",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/articles/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/websites/switch-info/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "stripe-signature",
        "slug": "get-stripe-signature",
        "purpose": "GET endpoint for stripe-signature",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/subscription/webhook/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/subscription/manage/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "url",
        "slug": "get-url",
        "purpose": "GET endpoint for url",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/smartjs/check/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "siteUrl",
        "slug": "get-siteurl",
        "purpose": "GET endpoint for siteUrl",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/sitemap/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/sitemap/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/properties/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/connection/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/connection/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/debug/url-inspections/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/debug/tables/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/debug/gsc-test/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/debug/gsc-data/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "authorization",
        "slug": "get-authorization",
        "purpose": "GET endpoint for authorization",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cron/gsc-sync/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/connections/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/connections/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "connectionId",
        "slug": "get-connectionid",
        "purpose": "GET endpoint for connectionId",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/connections/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/chat/threads/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "siteId",
        "slug": "get-siteid",
        "purpose": "GET endpoint for siteId",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/chat/threads/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/chat/sites/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/chat/messages/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "threadId",
        "slug": "get-threadid",
        "purpose": "GET endpoint for threadId",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/chat/messages/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "authUserId",
        "slug": "get-authuserid",
        "purpose": "GET endpoint for authUserId",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/auth/get-token/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/start/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/[auditId]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/[auditId]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/audits/[auditId]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/websites/[websiteToken]/stats/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/oauth/start/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "userToken",
        "slug": "get-usertoken",
        "purpose": "GET endpoint for userToken",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/oauth/refresh/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "code",
        "slug": "get-code",
        "purpose": "GET endpoint for code",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/oauth/callback/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "state",
        "slug": "get-state",
        "purpose": "GET endpoint for state",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/oauth/callback/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "error",
        "slug": "get-error",
        "purpose": "GET endpoint for error",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/gsc/oauth/callback/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "origin",
        "slug": "get-origin",
        "purpose": "GET endpoint for origin",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/oauth/start/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "code",
        "slug": "get-code",
        "purpose": "GET endpoint for code",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/oauth/callback/[type]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "state",
        "slug": "get-state",
        "purpose": "GET endpoint for state",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/oauth/callback/[type]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "error",
        "slug": "get-error",
        "purpose": "GET endpoint for error",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/oauth/callback/[type]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "user_id",
        "slug": "get-user-id",
        "purpose": "GET endpoint for user_id",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/oauth/callback/[type]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "site_url",
        "slug": "get-site-url",
        "purpose": "GET endpoint for site_url",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/oauth/callback/[type]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "user_login",
        "slug": "get-user-login",
        "purpose": "GET endpoint for user_login",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/oauth/callback/[type]/route.ts",
        "serviceFunction": "handler"
      },
      {
        "method": "GET",
        "path": "password",
        "slug": "get-password",
        "purpose": "GET endpoint for password",
        "parameters": [],
        "response": "JSON response",
        "errorHandling": "Standard HTTP error codes",
        "filePath": "src/app/api/cms/oauth/callback/[type]/route.ts",
        "serviceFunction": "handler"
      }
    ],
    "services": [],
    "middleware": [],
    "authentication": "Custom"
  },
  "database": {
    "overview": "# Database Documentation\n\n## 1. Database Architecture\n\n### Type\nThe project utilizes **Supabase**, an open-source backend-as-a-service (BaaS) platform that provides a PostgreSQL database, authentication, real-time subscriptions, and storage.\n\n### Hosting\nSupabase is hosted on the Supabase cloud infrastructure. Each project is provisioned with its own PostgreSQL database instance, ensuring data isolation and security.\n\n### Connection Details\nTo connect to the Supabase database, the following parameters are typically required:\n- **URL**: The endpoint for the Supabase project.\n- **API Key**: The public or service role API key for authentication.\n- **Database URL**: The PostgreSQL connection string, which includes the database name, user credentials, and host information.\n\nExample connection code snippet using `@supabase/supabase-js`:\n\n```javascript\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://your-project.supabase.co';\nconst supabaseAnonKey = 'your-anon-key';\n\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\n```\n\n## 2. Schema Overview\n\nThe database schema consists of multiple tables that represent different entities in the application. Below is a high-level overview of the primary tables and their relationships:\n\n### Tables\n- **Users**: Stores user information including authentication details.\n- **Posts**: Contains blog or content posts created by users.\n- **Tags**: Represents tags that can be associated with posts for categorization.\n- **Comments**: Stores comments made by users on posts.\n\n### Relationships\n- **Users to Posts**: One-to-Many (A user can create multiple posts).\n- **Posts to Tags**: Many-to-Many (A post can have multiple tags, and a tag can belong to multiple posts).\n- **Posts to Comments**: One-to-Many (A post can have multiple comments).\n\n### Example Schema Diagram\n```plaintext\nUsers\n  └──< Posts\n       └──< Comments\n       └──< Tags\n```\n\n## 3. Query Patterns\n\nData access and modification in the Supabase database are primarily performed using the following query patterns:\n\n### Data Retrieval\n- **Select Queries**: Used to fetch data from tables. For example, retrieving all posts by a specific user:\n  \n  ```javascript\n  const { data, error } = await supabase\n    .from('posts')\n    .select('*')\n    .eq('user_id', userId);\n  ```\n\n### Data Insertion\n- **Insert Queries**: Used to add new records to tables. For example, adding a new post:\n\n  ```javascript\n  const { data, error } = await supabase\n    .from('posts')\n    .insert([{ title: 'New Post', content: 'Post content', user_id: userId }]);\n  ```\n\n### Data Updates\n- **Update Queries**: Used to modify existing records. For example, updating a post's content:\n\n  ```javascript\n  const { data, error } = await supabase\n    .from('posts')\n    .update({ content: 'Updated content' })\n    .eq('id', postId);\n  ```\n\n### Data Deletion\n- **Delete Queries**: Used to remove records from tables. For example, deleting a comment:\n\n  ```javascript\n  const { data, error } = await supabase\n    .from('comments')\n    .delete()\n    .eq('id', commentId);\n  ```\n\n## 4. Data Models\n\nEach table in the database has a defined structure and validation rules. Below are examples of the data models for key tables:\n\n### Users Table\n```json\n{\n  \"id\": \"uuid\",\n  \"username\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"created_at\": \"timestamp\"\n}\n```\n**Validation Rules**:\n- `username`: Required, unique.\n- `email`: Required, valid email format.\n- `password`: Required, minimum length of 6 characters.\n\n### Posts Table\n```json\n{\n  \"id\": \"uuid\",\n  \"title\": \"string\",\n  \"content\": \"text\",\n  \"user_id\": \"uuid\",\n  \"created_at\": \"timestamp\"\n}\n```\n**Validation Rules**:\n- `title`: Required, maximum length of 255 characters.\n- `content`: Required.\n\n### Tags Table\n```json\n{\n  \"id\": \"uuid\",\n  \"name\": \"string\",\n  \"created_at\": \"timestamp\"\n}\n```\n**Validation Rules**:\n- `name`: Required, unique.\n\n### Comments Table\n```json\n{\n  \"id\": \"uuid\",\n  \"post_id\": \"uuid\",\n  \"user_id\": \"uuid\",\n  \"content\": \"text\",\n  \"created_at\": \"timestamp\"\n}\n```\n**Validation Rules**:\n- `content`: Required.\n\n## 5. Performance Considerations\n\nTo optimize database performance, consider the following strategies:\n\n### Indexing\n- Create indexes on frequently queried fields, such as `user_id` in the Posts table and `post_id` in the Comments table, to speed up retrieval times.\n\n### Query Optimization\n- Use pagination for large datasets to limit the amount of data returned in a single query. This can be achieved using the `limit` and `offset` parameters.\n\n### Caching\n- Implement caching strategies for read-heavy operations to reduce the load on the database and improve response times.\n\n### Connection Pooling\n- Utilize connection pooling to manage database connections efficiently, reducing the overhead of establishing new connections for each request.\n\nBy following these guidelines and understanding the database architecture, schema, and query patterns, developers can effectively work with the Supabase database in this project.",
    "schema": [],
    "queries": [],
    "relationships": "Database relationships to be documented"
  },
  "userFlows": [
    {
      "name": "Landing Page",
      "slug": "landing-page",
      "description": "Main entry point where users first visit the website to learn about the product/service",
      "steps": [
        {
          "action": "Create Account Button",
          "component": "Landing Page",
          "componentSlug": "landing-page",
          "event": "onClick",
          "apiEndpoint": "POST /api/auth/register",
          "apiSlug": "create-account-function",
          "serviceFunction": "createAccount",
          "dbModel": "users",
          "result": "Navigate to signup-page"
        },
        {
          "action": "Login Button",
          "component": "Landing Page",
          "componentSlug": "landing-page",
          "event": "onClick",
          "apiEndpoint": "POST /api/auth/login",
          "apiSlug": "authenticate-user-function",
          "serviceFunction": "authenticateUser",
          "dbModel": "users",
          "result": "Navigate to dashboard"
        }
      ]
    },
    {
      "name": "Dashboard",
      "slug": "dashboard",
      "description": "Main user interface after login where users manage their account and access features",
      "steps": [
        {
          "action": "Profile Settings",
          "component": "Dashboard",
          "componentSlug": "dashboard",
          "event": "onClick",
          "apiEndpoint": "",
          "apiSlug": "",
          "serviceFunction": "",
          "dbModel": "",
          "result": "Navigate to profile-settings"
        },
        {
          "action": "View Websites",
          "component": "Dashboard",
          "componentSlug": "dashboard",
          "event": "onClick",
          "apiEndpoint": "",
          "apiSlug": "",
          "serviceFunction": "",
          "dbModel": "",
          "result": "Navigate to website-page"
        }
      ]
    },
    {
      "name": "Website Page",
      "slug": "website-page",
      "description": "Page where users can manage their websites and SEO settings",
      "steps": [
        {
          "action": "Add Website Button",
          "component": "Website Page",
          "componentSlug": "website-page",
          "event": "onClick",
          "apiEndpoint": "POST /api/websites",
          "apiSlug": "add-website-function",
          "serviceFunction": "addWebsite",
          "dbModel": "websites",
          "result": "Navigate to add-website-page"
        },
        {
          "action": "Edit Website Button",
          "component": "Website Page",
          "componentSlug": "website-page",
          "event": "onClick",
          "apiEndpoint": "PUT /api/websites/:token",
          "apiSlug": "edit-website-function",
          "serviceFunction": "editWebsite",
          "dbModel": "websites",
          "result": "Navigate to edit-website-page"
        }
      ]
    },
    {
      "name": "Terms Page",
      "slug": "terms-page",
      "description": "Page displaying the terms and conditions of using the application",
      "steps": []
    },
    {
      "name": "Privacy Page",
      "slug": "privacy-page",
      "description": "Page displaying the privacy policy of the application",
      "steps": []
    },
    {
      "name": "Login Page",
      "slug": "login-page",
      "description": "Page for users to log into their accounts",
      "steps": [
        {
          "action": "Submit Login Form",
          "component": "Login Page",
          "componentSlug": "login-page",
          "event": "onSubmit",
          "apiEndpoint": "POST /api/auth/login",
          "apiSlug": "authenticate-user-function",
          "serviceFunction": "authenticateUser",
          "dbModel": "users",
          "result": "Navigate to dashboard"
        }
      ]
    },
    {
      "name": "Debug SEO Page",
      "slug": "debug-seo-page",
      "description": "Page for users to analyze and debug SEO issues",
      "steps": []
    }
  ],
  "architectureDiagram": "\ngraph TB\n    %% Frontend Layer\n    subgraph \"Frontend Layer\"\n        FE0[\"AuthProvider\"]\n        FE1[\"Home\"]\n        FE2[\"RootLayout\"]\n        FE3[\"WebsiteManagement\"]\n        FE4[\"WebsiteHealthOverview\"]\n        FE5[\"UsageDashboard\"]\n        FE6[\"UpgradeBadge\"]\n        FE7[\"ThemeToggle\"]\n    end\n    \n    %% Backend Layer\n    subgraph \"Backend Layer\"\n        BE0[\"server\"]\n        BE1[\"GSCConnection\"]\n        BE2[\"index\"]\n        BE3[\"strapi-BzxSP0n3\"]\n        BE4[\"index-BTp6pMEF\"]\n        BE5[\"MarketplacePage-CyKHKP18\"]\n    end\n    \n    %% Database Layer\n    subgraph \"Database Layer\"\n        DB0[\"Supabase\"]\n    end\n    \n    %% External Services\n    subgraph \"External Services\"\n        EXT0[\"@supabase/ssr\"]\n        EXT1[\"@supabase/supabase-js\"]\n        EXT2[\"stripe\"]\n    end\n    \n    %% Connections\n    FE0 --> BE0\n    FE1 --> BE1\n    FE2 --> BE2\n    FE3 --> BE3\n    FE4 --> BE4\n    FE5 --> BE5\n    FE6 --> BE0\n    FE7 --> BE1\n    BE0 --> DB0\n    BE1 --> DB0\n    BE2 --> DB0\n    BE3 --> DB0\n    BE4 --> DB0\n    BE5 --> DB0\n    BE0 --> EXT0\n    BE0 --> EXT1\n    BE0 --> EXT2\n    BE1 --> EXT0\n    BE1 --> EXT1\n    BE1 --> EXT2\n    BE2 --> EXT0\n    BE2 --> EXT1\n    BE2 --> EXT2\n    \n    %% Styling\n    classDef frontend fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef backend fill:#f3e5f5,stroke:#4a148c,stroke-width:2px\n    classDef database fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px\n    classDef external fill:#fff3e0,stroke:#e65100,stroke-width:2px\n    \n    class FE0 frontend\n    class FE1 frontend\n    class FE2 frontend\n    class FE3 frontend\n    class FE4 frontend\n    class FE5 frontend\n    class FE6 frontend\n    class FE7 frontend\n    class BE0 backend\n    class BE1 backend\n    class BE2 backend\n    class BE3 backend\n    class BE4 backend\n    class BE5 backend\n    class DB0 database\n    class EXT0 external\n    class EXT1 external\n    class EXT2 external\n",
  "apiDocumentation": [
    {
      "endpoint": "/api/health",
      "method": "GET",
      "description": "GET endpoint for /api/health",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /api/health",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/api/websites",
      "method": "GET",
      "description": "List websites managed by the user",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /api/websites",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/api/websites/:token",
      "method": "GET",
      "description": "List websites managed by the user",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /api/websites/:token",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/api/test-endpoints/:token",
      "method": "POST",
      "description": "POST endpoint for /api/test-endpoints/:token",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /api/test-endpoints/:token",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/api/websites",
      "method": "POST",
      "description": "Add new website to management",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /api/websites",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/api/users",
      "method": "GET",
      "description": "Retrieve user account information",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /api/users",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/api/env",
      "method": "GET",
      "description": "GET endpoint for /api/env",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /api/env",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/",
      "method": "GET",
      "description": "GET endpoint for /",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "gsc_connected",
      "method": "GET",
      "description": "GET endpoint for gsc_connected",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET gsc_connected",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "error",
      "method": "GET",
      "description": "GET endpoint for error",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET error",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "details",
      "method": "GET",
      "description": "GET endpoint for details",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET details",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/",
      "method": "GET",
      "description": "GET endpoint for /",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_URL",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_URL",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_URL",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_SERVICE_ROLE_KEY",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_SERVICE_ROLE_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "Authorization",
      "method": "GET",
      "description": "GET endpoint for Authorization",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET Authorization",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_URL",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_URL",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_URL",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_SERVICE_ROLE_KEY",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_SERVICE_ROLE_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_URL",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_URL",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_URL",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_SERVICE_ROLE_KEY",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_SERVICE_ROLE_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "token",
      "method": "GET",
      "description": "GET endpoint for token",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET token",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_URL",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_URL",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_URL",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_SERVICE_ROLE_KEY",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_SERVICE_ROLE_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "token",
      "method": "GET",
      "description": "GET endpoint for token",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET token",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_URL",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_URL",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_URL",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_SERVICE_ROLE_KEY",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_SERVICE_ROLE_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_URL",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_URL",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_URL",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_SERVICE_ROLE_KEY",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_SERVICE_ROLE_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "OPENAI_API_KEY",
      "method": "GET",
      "description": "GET endpoint for OPENAI_API_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET OPENAI_API_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_URL",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_URL",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_URL",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_SERVICE_ROLE_KEY",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_SERVICE_ROLE_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "OPENAI_API_KEY",
      "method": "GET",
      "description": "GET endpoint for OPENAI_API_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET OPENAI_API_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "OPENAI_API_KEY",
      "method": "GET",
      "description": "GET endpoint for OPENAI_API_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET OPENAI_API_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "OPENAI_API_KEY",
      "method": "GET",
      "description": "GET endpoint for OPENAI_API_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET OPENAI_API_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_URL",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_URL",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_URL",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "SUPABASE_SERVICE_ROLE_KEY",
      "method": "GET",
      "description": "GET endpoint for SUPABASE_SERVICE_ROLE_KEY",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET SUPABASE_SERVICE_ROLE_KEY",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "Location",
      "method": "GET",
      "description": "GET endpoint for Location",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET Location",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "Location",
      "method": "GET",
      "description": "GET endpoint for Location",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET Location",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "index",
      "method": "DELETE",
      "description": "DELETE endpoint for index",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "DELETE index",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "Content-Type",
      "method": "GET",
      "description": "GET endpoint for Content-Type",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET Content-Type",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "Location",
      "method": "GET",
      "description": "GET endpoint for Location",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET Location",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "index",
      "method": "DELETE",
      "description": "DELETE endpoint for index",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "DELETE index",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "Content-Type",
      "method": "DELETE",
      "description": "DELETE endpoint for Content-Type",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "DELETE Content-Type",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "Content-Type",
      "method": "DELETE",
      "description": "DELETE endpoint for Content-Type",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "DELETE Content-Type",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "content-type",
      "method": "GET",
      "description": "GET endpoint for content-type",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET content-type",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "content-length",
      "method": "GET",
      "description": "GET endpoint for content-length",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET content-length",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "field",
      "method": "GET",
      "description": "GET endpoint for field",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET field",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "redirectTo",
      "method": "GET",
      "description": "GET endpoint for redirectTo",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET redirectTo",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "info",
      "method": "GET",
      "description": "GET endpoint for info",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET info",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "registrationToken",
      "method": "GET",
      "description": "GET endpoint for registrationToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET registrationToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "code",
      "method": "GET",
      "description": "GET endpoint for code",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET code",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "code",
      "method": "GET",
      "description": "GET endpoint for code",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET code",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "field",
      "method": "GET",
      "description": "GET endpoint for field",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET field",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "region",
      "method": "GET",
      "description": "GET endpoint for region",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET region",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "vertical",
      "method": "GET",
      "description": "GET endpoint for vertical",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET vertical",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "line",
      "method": "GET",
      "description": "GET endpoint for line",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET line",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "lineAlign",
      "method": "GET",
      "description": "GET endpoint for lineAlign",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET lineAlign",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "snapToLines",
      "method": "GET",
      "description": "GET endpoint for snapToLines",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET snapToLines",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "size",
      "method": "GET",
      "description": "GET endpoint for size",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET size",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "align",
      "method": "GET",
      "description": "GET endpoint for align",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET align",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "position",
      "method": "GET",
      "description": "GET endpoint for position",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET position",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "age",
      "method": "GET",
      "description": "GET endpoint for age",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET age",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "Content-Range",
      "method": "GET",
      "description": "GET endpoint for Content-Range",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET Content-Range",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "Content-Length",
      "method": "GET",
      "description": "GET endpoint for Content-Length",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET Content-Length",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "CMCD",
      "method": "GET",
      "description": "GET endpoint for CMCD",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET CMCD",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-gesture-receiver",
      "method": "GET",
      "description": "GET endpoint for media-gesture-receiver",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-gesture-receiver",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-container",
      "method": "GET",
      "description": "GET endpoint for media-container",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-container",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "#xywh",
      "method": "GET",
      "description": "GET endpoint for #xywh",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET #xywh",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-controller",
      "method": "GET",
      "description": "GET endpoint for media-controller",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-controller",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-chrome-button",
      "method": "GET",
      "description": "GET endpoint for media-chrome-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-chrome-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-airplay-button",
      "method": "GET",
      "description": "GET endpoint for media-airplay-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-airplay-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-captions-button",
      "method": "GET",
      "description": "GET endpoint for media-captions-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-captions-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-cast-button",
      "method": "GET",
      "description": "GET endpoint for media-cast-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-cast-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-chrome-dialog",
      "method": "GET",
      "description": "GET endpoint for media-chrome-dialog",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-chrome-dialog",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-chrome-range",
      "method": "GET",
      "description": "GET endpoint for media-chrome-range",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-chrome-range",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-control-bar",
      "method": "GET",
      "description": "GET endpoint for media-control-bar",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-control-bar",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-text-display",
      "method": "GET",
      "description": "GET endpoint for media-text-display",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-text-display",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-duration-display",
      "method": "GET",
      "description": "GET endpoint for media-duration-display",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-duration-display",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-fullscreen-button",
      "method": "GET",
      "description": "GET endpoint for media-fullscreen-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-fullscreen-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-live-button",
      "method": "GET",
      "description": "GET endpoint for media-live-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-live-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-loading-indicator",
      "method": "GET",
      "description": "GET endpoint for media-loading-indicator",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-loading-indicator",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-mute-button",
      "method": "GET",
      "description": "GET endpoint for media-mute-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-mute-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-pip-button",
      "method": "GET",
      "description": "GET endpoint for media-pip-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-pip-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-playback-rate-button",
      "method": "GET",
      "description": "GET endpoint for media-playback-rate-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-playback-rate-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-play-button",
      "method": "GET",
      "description": "GET endpoint for media-play-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-play-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-poster-image",
      "method": "GET",
      "description": "GET endpoint for media-poster-image",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-poster-image",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-preview-chapter-display",
      "method": "GET",
      "description": "GET endpoint for media-preview-chapter-display",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-preview-chapter-display",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-preview-thumbnail",
      "method": "GET",
      "description": "GET endpoint for media-preview-thumbnail",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-preview-thumbnail",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-preview-time-display",
      "method": "GET",
      "description": "GET endpoint for media-preview-time-display",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-preview-time-display",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-seek-backward-button",
      "method": "GET",
      "description": "GET endpoint for media-seek-backward-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-seek-backward-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-seek-forward-button",
      "method": "GET",
      "description": "GET endpoint for media-seek-forward-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-seek-forward-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-time-display",
      "method": "GET",
      "description": "GET endpoint for media-time-display",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-time-display",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-time-range",
      "method": "GET",
      "description": "GET endpoint for media-time-range",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-time-range",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-tooltip",
      "method": "GET",
      "description": "GET endpoint for media-tooltip",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-tooltip",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-volume-range",
      "method": "GET",
      "description": "GET endpoint for media-volume-range",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-volume-range",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "muted",
      "method": "DELETE",
      "description": "DELETE endpoint for muted",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "DELETE muted",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "token",
      "method": "GET",
      "description": "GET endpoint for token",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET token",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "token",
      "method": "GET",
      "description": "GET endpoint for token",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET token",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "mux-video",
      "method": "GET",
      "description": "GET endpoint for mux-video",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET mux-video",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-theme",
      "method": "GET",
      "description": "GET endpoint for media-theme",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-theme",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-chrome-menu",
      "method": "GET",
      "description": "GET endpoint for media-chrome-menu",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-chrome-menu",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-chrome-menu-item",
      "method": "GET",
      "description": "GET endpoint for media-chrome-menu-item",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-chrome-menu-item",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-settings-menu",
      "method": "GET",
      "description": "GET endpoint for media-settings-menu",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-settings-menu",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-settings-menu-item",
      "method": "GET",
      "description": "GET endpoint for media-settings-menu-item",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-settings-menu-item",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-chrome-menu-button",
      "method": "GET",
      "description": "GET endpoint for media-chrome-menu-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-chrome-menu-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-settings-menu-button",
      "method": "GET",
      "description": "GET endpoint for media-settings-menu-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-settings-menu-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-audio-track-menu",
      "method": "GET",
      "description": "GET endpoint for media-audio-track-menu",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-audio-track-menu",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-audio-track-menu-button",
      "method": "GET",
      "description": "GET endpoint for media-audio-track-menu-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-audio-track-menu-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-captions-menu",
      "method": "GET",
      "description": "GET endpoint for media-captions-menu",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-captions-menu",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-captions-menu-button",
      "method": "GET",
      "description": "GET endpoint for media-captions-menu-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-captions-menu-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-playback-rate-menu",
      "method": "GET",
      "description": "GET endpoint for media-playback-rate-menu",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-playback-rate-menu",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-playback-rate-menu-button",
      "method": "GET",
      "description": "GET endpoint for media-playback-rate-menu-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-playback-rate-menu-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-rendition-menu",
      "method": "GET",
      "description": "GET endpoint for media-rendition-menu",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-rendition-menu",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-rendition-menu-button",
      "method": "GET",
      "description": "GET endpoint for media-rendition-menu-button",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-rendition-menu-button",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-dialog",
      "method": "GET",
      "description": "GET endpoint for media-dialog",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-dialog",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "mxp-dialog",
      "method": "GET",
      "description": "GET endpoint for mxp-dialog",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET mxp-dialog",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "media-theme-gerwig",
      "method": "GET",
      "description": "GET endpoint for media-theme-gerwig",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET media-theme-gerwig",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "mux-player",
      "method": "GET",
      "description": "GET endpoint for mux-player",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET mux-player",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "content-type",
      "method": "GET",
      "description": "GET endpoint for content-type",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET content-type",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "content-type",
      "method": "GET",
      "description": "GET endpoint for content-type",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET content-type",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/content-type-builder/schema",
      "method": "GET",
      "description": "GET endpoint for /content-type-builder/schema",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /content-type-builder/schema",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/content-type-builder/reserved-names",
      "method": "GET",
      "description": "GET endpoint for /content-type-builder/reserved-names",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /content-type-builder/reserved-names",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/content-type-builder/update-schema",
      "method": "POST",
      "description": "POST endpoint for /content-type-builder/update-schema",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /content-type-builder/update-schema",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "",
      "method": "DELETE",
      "description": "DELETE endpoint for ",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "DELETE ",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "logo-url",
      "method": "GET",
      "description": "GET endpoint for logo-url",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET logo-url",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "content-type",
      "method": "GET",
      "description": "GET endpoint for content-type",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET content-type",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "mode",
      "method": "GET",
      "description": "GET endpoint for mode",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET mode",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/manage",
      "method": "GET",
      "description": "GET endpoint for /manage",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /manage",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/manage",
      "method": "POST",
      "description": "POST endpoint for /manage",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /manage",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/create-checkout-session",
      "method": "POST",
      "description": "POST endpoint for /create-checkout-session",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /create-checkout-session",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/webhook",
      "method": "POST",
      "description": "POST endpoint for /webhook",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /webhook",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/usage",
      "method": "GET",
      "description": "GET endpoint for /usage",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /usage",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/websites",
      "method": "GET",
      "description": "List websites managed by the user",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /websites",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/websites",
      "method": "POST",
      "description": "Add new website to management",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /websites",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/audit/:websiteId",
      "method": "GET",
      "description": "GET endpoint for /audit/:websiteId",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /audit/:websiteId",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/crawl/:websiteId",
      "method": "GET",
      "description": "GET endpoint for /crawl/:websiteId",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /crawl/:websiteId",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/issues/:websiteId",
      "method": "GET",
      "description": "GET endpoint for /issues/:websiteId",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /issues/:websiteId",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/",
      "method": "GET",
      "description": "GET endpoint for /",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/detailed",
      "method": "GET",
      "description": "GET endpoint for /detailed",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /detailed",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/ready",
      "method": "GET",
      "description": "GET endpoint for /ready",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /ready",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/alive",
      "method": "GET",
      "description": "GET endpoint for /alive",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /alive",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/connection",
      "method": "GET",
      "description": "GET endpoint for /connection",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /connection",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/oauth/start",
      "method": "GET",
      "description": "GET endpoint for /oauth/start",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /oauth/start",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/oauth/callback",
      "method": "GET",
      "description": "GET endpoint for /oauth/callback",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /oauth/callback",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/oauth/refresh",
      "method": "POST",
      "description": "POST endpoint for /oauth/refresh",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /oauth/refresh",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/properties",
      "method": "GET",
      "description": "GET endpoint for /properties",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /properties",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/sync",
      "method": "POST",
      "description": "POST endpoint for /sync",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /sync",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/performance",
      "method": "GET",
      "description": "GET endpoint for /performance",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /performance",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/connections",
      "method": "GET",
      "description": "GET endpoint for /connections",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /connections",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/connections",
      "method": "POST",
      "description": "POST endpoint for /connections",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /connections",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/connections/:id",
      "method": "GET",
      "description": "GET endpoint for /connections/:id",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /connections/:id",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/connections/:id",
      "method": "DELETE",
      "description": "DELETE endpoint for /connections/:id",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "DELETE /connections/:id",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/oauth/start",
      "method": "GET",
      "description": "GET endpoint for /oauth/start",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /oauth/start",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/oauth/callback/:type",
      "method": "GET",
      "description": "GET endpoint for /oauth/callback/:type",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /oauth/callback/:type",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/test-connection",
      "method": "POST",
      "description": "POST endpoint for /test-connection",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /test-connection",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/login",
      "method": "POST",
      "description": "POST endpoint for /login",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /login",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/register",
      "method": "POST",
      "description": "POST endpoint for /register",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /register",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/refresh",
      "method": "POST",
      "description": "POST endpoint for /refresh",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /refresh",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/me",
      "method": "GET",
      "description": "GET endpoint for /me",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /me",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/",
      "method": "GET",
      "description": "GET endpoint for /",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/generate",
      "method": "POST",
      "description": "POST endpoint for /generate",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /generate",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/publish",
      "method": "POST",
      "description": "POST endpoint for /publish",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "POST /publish",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/:id",
      "method": "GET",
      "description": "GET endpoint for /:id",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET /:id",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/:id",
      "method": "PUT",
      "description": "PUT endpoint for /:id",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "PUT /:id",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "/:id",
      "method": "DELETE",
      "description": "DELETE endpoint for /:id",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "DELETE /:id",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "User-Agent",
      "method": "GET",
      "description": "GET endpoint for User-Agent",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET User-Agent",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "User-Agent",
      "method": "GET",
      "description": "GET endpoint for User-Agent",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET User-Agent",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "site_url",
      "method": "GET",
      "description": "GET endpoint for site_url",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET site_url",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "user_login",
      "method": "GET",
      "description": "GET endpoint for user_login",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET user_login",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "password",
      "method": "GET",
      "description": "GET endpoint for password",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET password",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "shop",
      "method": "GET",
      "description": "GET endpoint for shop",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET shop",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "websiteId",
      "method": "GET",
      "description": "GET endpoint for websiteId",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET websiteId",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "websiteUrl",
      "method": "GET",
      "description": "GET endpoint for websiteUrl",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET websiteUrl",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "status",
      "method": "GET",
      "description": "GET endpoint for status",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET status",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "limit",
      "method": "GET",
      "description": "GET endpoint for limit",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET limit",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "offset",
      "method": "GET",
      "description": "GET endpoint for offset",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET offset",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "stripe-signature",
      "method": "GET",
      "description": "GET endpoint for stripe-signature",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET stripe-signature",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "url",
      "method": "GET",
      "description": "GET endpoint for url",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET url",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "siteUrl",
      "method": "GET",
      "description": "GET endpoint for siteUrl",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET siteUrl",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "authorization",
      "method": "GET",
      "description": "GET endpoint for authorization",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET authorization",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "connectionId",
      "method": "GET",
      "description": "GET endpoint for connectionId",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET connectionId",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "siteId",
      "method": "GET",
      "description": "GET endpoint for siteId",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET siteId",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "threadId",
      "method": "GET",
      "description": "GET endpoint for threadId",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET threadId",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "authUserId",
      "method": "GET",
      "description": "GET endpoint for authUserId",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET authUserId",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "userToken",
      "method": "GET",
      "description": "GET endpoint for userToken",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET userToken",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "code",
      "method": "GET",
      "description": "GET endpoint for code",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET code",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "state",
      "method": "GET",
      "description": "GET endpoint for state",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET state",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "error",
      "method": "GET",
      "description": "GET endpoint for error",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET error",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "origin",
      "method": "GET",
      "description": "GET endpoint for origin",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET origin",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "code",
      "method": "GET",
      "description": "GET endpoint for code",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET code",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "state",
      "method": "GET",
      "description": "GET endpoint for state",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET state",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "error",
      "method": "GET",
      "description": "GET endpoint for error",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET error",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "user_id",
      "method": "GET",
      "description": "GET endpoint for user_id",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET user_id",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "site_url",
      "method": "GET",
      "description": "GET endpoint for site_url",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET site_url",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "user_login",
      "method": "GET",
      "description": "GET endpoint for user_login",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET user_login",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    },
    {
      "endpoint": "password",
      "method": "GET",
      "description": "GET endpoint for password",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Success",
          "schema": "{\"success\": true, \"data\": {}}"
        },
        {
          "status": 400,
          "description": "Bad Request",
          "schema": "{\"error\": \"Invalid parameters\"}"
        }
      ],
      "examples": [
        {
          "title": "Basic Usage",
          "request": "GET password",
          "response": "{ \"status\": \"success\" }"
        }
      ]
    }
  ],
  "deploymentGuide": "# Deployment Guide\n\nThis guide provides comprehensive instructions for deploying the project on Vercel and a Generic Node.js environment. Follow the steps outlined below to ensure a successful deployment.\n\n## 1. Prerequisites\n\nBefore deploying the application, ensure you have the following tools and accounts set up:\n\n### Required Tools\n- **Node.js**: Ensure you have Node.js (version 14.x or later) installed. You can download it from [Node.js official website](https://nodejs.org/).\n- **npm**: npm is included with Node.js. Verify installation with:\n  ```bash\n  npm -v\n  ```\n- **Git**: Version control system for managing code. Install from [Git official website](https://git-scm.com/).\n- **Concurrently**: This package is used to run multiple commands concurrently. Install it globally if not already installed:\n  ```bash\n  npm install -g concurrently\n  ```\n\n### Required Accounts\n- **Supabase**: Create an account at [Supabase](https://supabase.com/) and set up your database.\n- **Vercel**: Create an account at [Vercel](https://vercel.com/) for deploying the application.\n\n## 2. Environment Setup\n\n### Environment Variables\nCreate a `.env` file in the root of your project directory and add the following environment variables. Replace the placeholders with your actual values:\n\n```plaintext\nDATABASE_URL=<your_supabase_database_url>\nSUPABASE_ANON_KEY=<your_supabase_anon_key>\nSUPABASE_SERVICE_ROLE_KEY=<your_supabase_service_role_key>\nGOOGLE_API_KEY=<your_google_api_key>\nSTRIPE_SECRET_KEY=<your_stripe_secret_key>\n```\n\nEnsure that you do not commit this file to version control by adding it to your `.gitignore`.\n\n### Configuration\n- Install the necessary dependencies by running:\n  ```bash\n  npm install\n  ```\n\n## 3. Build Process\n\nTo build the application, run the following commands:\n\n### Build Commands\n1. **Build Next.js Application**:\n   ```bash\n   npm run build\n   ```\n2. **Build Strapi CMS**:\n   ```bash\n   cd strapi-cms && npm run build\n   ```\n\n### Run Migrations\nIf your application requires database migrations, run:\n```bash\nnpm run run-migration\n```\n\n## 4. Deployment Steps\n\n### A. Deploying on Vercel\n\n1. **Login to Vercel**:\n   ```bash\n   vercel login\n   ```\n\n2. **Initialize Vercel**:\n   Run the following command in your project root:\n   ```bash\n   vercel\n   ```\n\n3. **Configure Environment Variables in Vercel**:\n   Go to your Vercel dashboard, select your project, and navigate to the **Settings** > **Environment Variables** section. Add the same environment variables defined in your `.env` file.\n\n4. **Deploy**:\n   After configuration, you can deploy your application with:\n   ```bash\n   vercel --prod\n   ```\n\n### B. Deploying on Generic Node.js\n\n1. **Clone the Repository**:\n   If you haven't already, clone the repository:\n   ```bash\n   git clone <repository_url>\n   cd <repository_name>\n   ```\n\n2. **Install Dependencies**:\n   Ensure all dependencies are installed:\n   ```bash\n   npm install\n   ```\n\n3. **Start the Application**:\n   Run the following command to start the application:\n   ```bash\n   npm run start\n   ```\n\n4. **Start Strapi CMS**:\n   In a separate terminal, navigate to the Strapi CMS directory and run:\n   ```bash\n   cd strapi-cms && npm run start\n   ```\n\n## 5. Post-Deployment\n\n### Verification\n- Access the application via the URL provided by Vercel or your server's IP address for Node.js.\n- Verify that the application is running correctly by checking the logs and ensuring there are no errors.\n\n### Monitoring\n- Use tools like [LogRocket](https://logrocket.com/) or [Sentry](https://sentry.io/) for monitoring application performance and error tracking.\n\n## 6. Troubleshooting\n\n### Common Deployment Issues\n\n1. **Environment Variables Not Set**:\n   Ensure that all environment variables are correctly set in your `.env` file or in the Vercel dashboard.\n\n2. **Build Failures**:\n   - Check for any syntax errors in your code.\n   - Ensure all dependencies are correctly installed.\n\n3. **Database Connection Issues**:\n   - Verify that your Supabase database is running and accessible.\n   - Check your `DATABASE_URL` and keys for correctness.\n\n4. **Application Not Starting**:\n   - Ensure that the correct Node.js version is being used.\n   - Check the logs for any error messages that can provide insight into the issue.\n\n5. **CORS Issues**:\n   If you encounter CORS errors, ensure that your Supabase settings allow requests from your application's domain.\n\nBy following this guide, you should be able to successfully deploy and run your application on both Vercel and a Generic Node.js environment. For further assistance, consult the documentation for the specific tools and services you are using.",
  "troubleshooting": "# Troubleshooting Guide\n\nThis troubleshooting guide is designed to assist developers working with a project built on React, Next.js, and Express. It covers common issues that may arise during setup, build, runtime, performance, database connectivity, API integration, and deployment.\n\n## Table of Contents\n1. [Common Setup Issues](#common-setup-issues)\n2. [Build Errors](#build-errors)\n3. [Runtime Errors](#runtime-errors)\n4. [Performance Issues](#performance-issues)\n5. [Database Connectivity](#database-connectivity)\n6. [API Integration](#api-integration)\n7. [Deployment Issues](#deployment-issues)\n\n---\n\n## Common Setup Issues\n\n### Symptoms and Error Messages\n- Errors during `npm install` or `yarn install`.\n- Missing environment variables.\n- Application fails to start with `Error: Cannot find module`.\n\n### Root Cause Analysis\n- Incorrect Node.js version.\n- Missing or misconfigured `.env` file.\n- Incomplete or corrupted package installations.\n\n### Step-by-Step Solutions\n1. **Check Node.js Version**:\n   ```bash\n   node -v\n   ```\n   Ensure you are using a compatible version (e.g., Node.js 14.x or 16.x).\n\n2. **Install Dependencies**:\n   Run the following command to install dependencies:\n   ```bash\n   npm install\n   ```\n   or\n   ```bash\n   yarn install\n   ```\n\n3. **Verify Environment Variables**:\n   Ensure that your `.env` file is present and correctly configured. Example:\n   ```plaintext\n   SUPABASE_URL=https://your-supabase-url\n   SUPABASE_ANON_KEY=your-anon-key\n   ```\n\n4. **Clear Cache**:\n   If issues persist, clear the npm cache:\n   ```bash\n   npm cache clean --force\n   ```\n\n### Prevention Strategies\n- Use a version manager like `nvm` to maintain the correct Node.js version.\n- Document required environment variables in a `README.md` file.\n\n---\n\n## Build Errors\n\n### Symptoms and Error Messages\n- Errors during the build process such as `Module not found` or `Unexpected token`.\n- Warnings about deprecated packages.\n\n### Root Cause Analysis\n- Incorrect import paths.\n- Syntax errors in JavaScript/TypeScript files.\n- Missing or outdated dependencies.\n\n### Step-by-Step Solutions\n1. **Check Import Paths**:\n   Review your import statements for typos or incorrect paths. Example:\n   ```javascript\n   import Component from './components/Component'; // Ensure path is correct\n   ```\n\n2. **Fix Syntax Errors**:\n   Review the error message for line numbers and correct any syntax errors in your code.\n\n3. **Update Dependencies**:\n   Ensure all dependencies are up to date:\n   ```bash\n   npm outdated\n   npm update\n   ```\n\n### Prevention Strategies\n- Use TypeScript to catch errors at compile-time.\n- Regularly run `npm audit` to identify and fix vulnerabilities.\n\n---\n\n## Runtime Errors\n\n### Symptoms and Error Messages\n- Application crashes with messages like `TypeError: Cannot read property '...' of undefined`.\n- Unhandled promise rejections.\n\n### Root Cause Analysis\n- Accessing properties of `undefined` or `null`.\n- Asynchronous code not handled properly.\n\n### Step-by-Step Solutions\n1. **Debugging**:\n   Use `console.log` to check values before accessing properties:\n   ```javascript\n   console.log(variable);\n   if (variable) {\n       console.log(variable.property);\n   }\n   ```\n\n2. **Error Handling**:\n   Ensure proper error handling in asynchronous code:\n   ```javascript\n   async function fetchData() {\n       try {\n           const response = await apiCall();\n           // Process response\n       } catch (error) {\n           console.error('Error fetching data:', error);\n       }\n   }\n   ```\n\n### Prevention Strategies\n- Use TypeScript for type safety.\n- Implement error boundaries in React components.\n\n---\n\n## Performance Issues\n\n### Symptoms and Error Messages\n- Slow loading times.\n- High memory usage in the browser.\n\n### Root Cause Analysis\n- Large bundle sizes.\n- Inefficient rendering or data fetching.\n\n### Step-by-Step Solutions\n1. **Analyze Bundle Size**:\n   Use tools like `webpack-bundle-analyzer` to identify large dependencies:\n   ```bash\n   npm install --save-dev webpack-bundle-analyzer\n   ```\n\n2. **Optimize Images**:\n   Use optimized images and consider lazy loading:\n   ```javascript\n   <img src=\"image.jpg\" loading=\"lazy\" alt=\"description\" />\n   ```\n\n3. **Code Splitting**:\n   Implement dynamic imports for components:\n   ```javascript\n   const Component = dynamic(() => import('./Component'));\n   ```\n\n### Prevention Strategies\n- Regularly audit performance using Chrome DevTools.\n- Keep dependencies updated and remove unused packages.\n\n---\n\n## Database Connectivity\n\n### Symptoms and Error Messages\n- Errors like `ECONNREFUSED` or `Query failed`.\n- Timeouts during database operations.\n\n### Root Cause Analysis\n- Incorrect database connection configuration.\n- Network issues or database server downtime.\n\n### Step-by-Step Solutions\n1. **Check Connection String**:\n   Ensure your database connection string is correct in the `.env` file:\n   ```plaintext\n   DATABASE_URL=postgres://user:password@localhost:5432/mydb\n   ```\n\n2. **Test Database Connection**:\n   Use a database client to verify connectivity.\n\n3. **Review Query Syntax**:\n   Check for syntax errors in your SQL queries.\n\n### Prevention Strategies\n- Implement connection pooling to manage database connections efficiently.\n- Monitor database performance and set up alerts for downtime.\n\n---\n\n## API Integration\n\n### Symptoms and Error Messages\n- Errors like `404 Not Found` or `500 Internal Server Error`.\n- Unexpected API responses.\n\n### Root Cause Analysis\n- Incorrect API endpoints or parameters.\n- Rate limiting by the API provider.\n\n### Step-by-Step Solutions\n1. **Verify API Endpoints**:\n   Check that the API endpoints are correct and accessible:\n   ```javascript\n   const response = await fetch('https://api.example.com/data');\n   ```\n\n2. **Handle API Errors**:\n   Implement error handling for API calls:\n   ```javascript\n   if (!response.ok) {\n       throw new Error(`HTTP error! status: ${response.status}`);\n   }\n   ```\n\n3. **Check API Documentation**:\n   Ensure you are following the API's guidelines for requests and responses.\n\n### Prevention Strategies\n- Use environment variables for API keys and secrets.\n- Implement retry logic for failed requests.\n\n---\n\n## Deployment Issues\n\n### Symptoms and Error Messages\n- Deployment fails with messages like `Build failed` or `Server error`.\n- Application does not start in production.\n\n### Root Cause Analysis\n- Environment variables not set in production.\n- Build configuration issues.\n\n### Step-by-Step Solutions\n1. **Check Environment Variables**:\n   Ensure all required environment variables are set in the production environment.\n\n2. **Review Build Configuration**:\n   Check your `next.config.js` for any misconfigurations.\n\n3. **Logs**:\n   Review server logs for detailed error messages.\n\n### Prevention Strategies\n- Use CI/CD pipelines to automate deployments and catch errors early.\n- Document deployment steps and environment configurations.\n\n---\n\nThis guide provides a structured approach to troubleshooting common issues encountered in a React, Next.js, and Express project. By following the outlined steps and strategies, developers can efficiently resolve problems and enhance the stability of their applications."
}