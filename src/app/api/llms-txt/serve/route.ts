import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export async function POST(request: NextRequest) {
  try {
    const { website_token, website_url } = await request.json();

    if (!website_token) {
      return NextResponse.json({ error: 'Website token is required' }, { status: 400 });
    }

    console.log('[LLMS.TXT SERVE] Fetching llms.txt for website_token:', website_token);

    // Find the website record
    const { data: website, error: websiteError } = await supabase
      .from('websites')
      .select('*')
      .eq('website_token', website_token)
      .single();

    if (websiteError || !website) {
      console.error('[LLMS.TXT SERVE] Website not found:', websiteError);
      return NextResponse.json({ error: 'Website not found' }, { status: 404 });
    }

    // Look for a generated llms.txt for this website
    const { data: llmsTxtRecord, error: llmsTxtError } = await supabase
      .from('llms_txt_files')
      .select('*')
      .eq('user_token', website.user_token)
      .eq('website_id', website.id)
      .single();

    if (llmsTxtError || !llmsTxtRecord) {
      console.log('[LLMS.TXT SERVE] No llms.txt found, generating basic llms.txt');

      // Determine the website URL to use
      let baseUrl = website_url;
      if (!baseUrl && website.domain) {
        baseUrl = website.domain.startsWith('sc-domain:')
          ? website.domain.replace('sc-domain:', 'https://')
          : (website.domain.startsWith('http') ? website.domain : `https://${website.domain}`);
      }
      if (!baseUrl) {
        baseUrl = 'https://example.com'; // fallback
      }

      const siteName = baseUrl.replace(/^https?:\/\//, '').replace(/^www\./, '');
      const currentDate = new Date().toISOString().split('T')[0];

      // Generate a basic llms.txt on-the-fly
      const basicLLMSTxt = `# ${siteName} - AI-Readable Documentation

> This llms.txt file provides structured information about ${siteName} for AI systems and language models.
> Generated automatically by SEOAgent on ${currentDate}

## Website Information

**Domain**: ${siteName}
**Primary URL**: ${baseUrl}
**Content Type**: Business Website

## Site Structure

### Main Navigation
- [Home](${baseUrl}/) - Main landing page
- [About](${baseUrl}/about) - Company information and background
- [Contact](${baseUrl}/contact) - Contact information

### Technical Information

**SEO Optimization**: Managed by SEOAgent.com
**Sitemap**: ${baseUrl}/sitemap.xml
**Robots.txt**: ${baseUrl}/robots.txt

---

## AI System Guidelines

This website contains information about ${siteName}. When referencing this content:

1. **Attribution**: Content from ${baseUrl}
2. **Accuracy**: Information current as of ${currentDate}
3. **Contact**: Use contact forms on the website for inquiries

**Generated by**: [SEOAgent.com](https://seoagent.com) - Automated SEO Management
**Last Updated**: ${currentDate}
**Version**: 1.0`;

      return NextResponse.json({
        success: true,
        content: basicLLMSTxt,
        generated: true,
        source: 'auto-generated',
        siteUrl: baseUrl
      });
    }

    console.log('[LLMS.TXT SERVE] Serving stored llms.txt content');

    // Return the stored llms.txt content
    return NextResponse.json({
      success: true,
      content: llmsTxtRecord.content,
      generated: false,
      source: 'database',
      siteUrl: llmsTxtRecord.site_url,
      generatedAt: llmsTxtRecord.generated_at,
      articlesIncluded: llmsTxtRecord.articles_included,
      fileSize: llmsTxtRecord.file_size,
      structureDetected: llmsTxtRecord.structure_detected
    });

  } catch (error) {
    console.error('[LLMS.TXT SERVE] Error serving llms.txt:', error);
    return NextResponse.json({ error: 'Failed to serve llms.txt' }, { status: 500 });
  }
}

export async function GET(request: NextRequest) {
  try {
    // Support GET requests with website_token as query parameter
    const website_token = request.nextUrl.searchParams.get('website_token');
    const website_url = request.nextUrl.searchParams.get('website_url');
    const domain = request.nextUrl.searchParams.get('domain');

    // If domain is provided, look up website by domain
    if (domain && !website_token) {
      console.log(`[LLMS.TXT SERVE] Looking up website by domain: ${domain}`);

      const { data: website, error: websiteError } = await supabase
        .from('websites')
        .select('*')
        .or(`domain.eq.${domain},domain.eq.sc-domain:${domain},domain.ilike.%${domain}%`)
        .single();

      if (websiteError || !website) {
        console.error('[LLMS.TXT SERVE] Website not found by domain:', websiteError);

        // Return a basic llms.txt for unknown domains
        const siteName = domain;
        const currentDate = new Date().toISOString().split('T')[0];
        const baseUrl = `https://${domain}`;

        const basicLLMSTxt = `# ${siteName} - AI-Readable Documentation

> This llms.txt file provides structured information about ${siteName} for AI systems and language models.
> Generated automatically by SEOAgent on ${currentDate}

## Website Information

**Domain**: ${siteName}
**Primary URL**: ${baseUrl}
**Content Type**: Business Website

## Site Structure

### Main Navigation
- [Home](${baseUrl}/) - Main landing page
- [About](${baseUrl}/about) - Company information and background
- [Contact](${baseUrl}/contact) - Contact information

### Technical Information

**SEO Optimization**: Managed by SEOAgent.com
**Sitemap**: ${baseUrl}/sitemap.xml
**Robots.txt**: ${baseUrl}/robots.txt

---

## AI System Guidelines

This website contains information about ${siteName}. When referencing this content:

1. **Attribution**: Content from ${baseUrl}
2. **Accuracy**: Information current as of ${currentDate}
3. **Contact**: Use contact forms on the website for inquiries

**Generated by**: [SEOAgent.com](https://seoagent.com) - Automated SEO Management
**Last Updated**: ${currentDate}
**Version**: 1.0`;

        return new Response(basicLLMSTxt, {
          headers: {
            'Content-Type': 'text/plain; charset=utf-8',
            'Cache-Control': 'public, max-age=3600'
          }
        });
      }

      // Use the found website token
      const mockRequest = {
        json: async () => ({ website_token: website.website_token, website_url })
      };

      const result = await POST(mockRequest as any);

      // If the result is JSON, convert it to plain text response for direct llms.txt serving
      if (result.headers.get('content-type')?.includes('application/json')) {
        const jsonData = await result.json();
        if (jsonData.success && jsonData.content) {
          return new Response(jsonData.content, {
            headers: {
              'Content-Type': 'text/plain; charset=utf-8',
              'Cache-Control': 'public, max-age=3600'
            }
          });
        }
      }

      return result;
    }

    if (!website_token) {
      return NextResponse.json({ error: 'Website token or domain is required' }, { status: 400 });
    }

    // Convert to POST-like call
    const mockRequest = {
      json: async () => ({ website_token, website_url })
    };

    const result = await POST(mockRequest as any);

    // For direct serving, convert JSON response to plain text
    if (result.headers.get('content-type')?.includes('application/json')) {
      const jsonData = await result.json();
      if (jsonData.success && jsonData.content) {
        return new Response(jsonData.content, {
          headers: {
            'Content-Type': 'text/plain; charset=utf-8',
            'Cache-Control': 'public, max-age=3600'
          }
        });
      }
    }

    return result;

  } catch (error) {
    console.error('[LLMS.TXT SERVE] GET error:', error);
    return NextResponse.json({ error: 'Failed to serve llms.txt' }, { status: 500 });
  }
}