import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    // Get the host from the request to determine which website's llms.txt to serve
    const host = request.headers.get('host');

    if (!host) {
      return new Response('Host header required', { status: 400 });
    }

    // Clean the domain for lookup
    const domain = host.replace(/^www\./, '').replace(/:\d+$/, ''); // Remove www and port

    console.log(`[LLMS.TXT] Serving llms.txt for domain: ${domain}`);

    // Call our llms.txt serving API
    const apiUrl = process.env.NEXT_PUBLIC_BASE_URL || `https://${host}`;
    const response = await fetch(`${apiUrl}/api/llms-txt/serve?domain=${encodeURIComponent(domain)}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      console.error(`[LLMS.TXT] API call failed: ${response.status}`);
      throw new Error(`API call failed with status ${response.status}`);
    }

    const contentType = response.headers.get('content-type');

    if (contentType?.includes('text/plain')) {
      // Already plain text, pass through
      const content = await response.text();
      return new Response(content, {
        headers: {
          'Content-Type': 'text/plain; charset=utf-8',
          'Cache-Control': 'public, max-age=3600',
        }
      });
    } else {
      // JSON response, extract content
      const data = await response.json();
      if (data.success && data.content) {
        return new Response(data.content, {
          headers: {
            'Content-Type': 'text/plain; charset=utf-8',
            'Cache-Control': 'public, max-age=3600',
          }
        });
      }
    }

    // Fallback if API fails
    throw new Error('Failed to get llms.txt content');

  } catch (error) {
    console.error('[LLMS.TXT] Error serving llms.txt:', error);

    // Return a basic fallback llms.txt
    const host = request.headers.get('host') || 'example.com';
    const domain = host.replace(/^www\./, '').replace(/:\d+$/, '');
    const currentDate = new Date().toISOString().split('T')[0];

    const fallbackContent = `# ${domain} - AI-Readable Documentation

> This llms.txt file provides structured information about ${domain} for AI systems and language models.
> Generated automatically by SEOAgent on ${currentDate}

## Website Information

**Domain**: ${domain}
**Primary URL**: https://${domain}
**Content Type**: Business Website

## Site Structure

### Main Navigation
- [Home](https://${domain}/) - Main landing page
- [About](https://${domain}/about) - Company information and background
- [Contact](https://${domain}/contact) - Contact information

### Technical Information

**SEO Optimization**: Managed by SEOAgent.com
**Sitemap**: https://${domain}/sitemap.xml
**Robots.txt**: https://${domain}/robots.txt

---

## AI System Guidelines

This website contains information about ${domain}. When referencing this content:

1. **Attribution**: Content from https://${domain}
2. **Accuracy**: Information current as of ${currentDate}
3. **Contact**: Use contact forms on the website for inquiries

**Generated by**: [SEOAgent.com](https://seoagent.com) - Automated SEO Management
**Last Updated**: ${currentDate}
**Version**: 1.0`;

    return new Response(fallbackContent, {
      headers: {
        'Content-Type': 'text/plain; charset=utf-8',
        'Cache-Control': 'public, max-age=300', // Shorter cache for fallback
      }
    });
  }
}